<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Patrick Piccini</title>
        <link>https://patrickpiccini.github.io/posts/</link>
        <description>Recent content in Posts on Patrick Piccini</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
        <lastBuildDate>Thu, 28 Jul 2022 00:00:00 -0300</lastBuildDate>
        <atom:link href="https://patrickpiccini.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Microservice Project – Step 9</title>
            <link>https://patrickpiccini.github.io/posts/microservice_project_step09/</link>
            <pubDate>Thu, 28 Jul 2022 00:00:00 -0300</pubDate>
            
            <guid>https://patrickpiccini.github.io/posts/microservice_project_step09/</guid>
            <description>Table of Contents  Argon2 Hash de Senha  Encapsulamento   Controlador DataBase Resumo   Nesse step iremos abordar um assunto muito importante, onde devemos sempre reservar um tempo para desenvolvimento, que é a criptografia de informações sensíveis. O que faremos será uma classe para criptografar a senha do usuário antes de salvar no banco de dados.
Na pasta raiz da aplicação MS-Application, vamos criar os seguintes arquivos:</description>
            <content type="html"><![CDATA[<p><img src="/images/microservice_project/microservices.png" alt="microservices"></p>
<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#argon2">Argon2</a></li>
<li><a href="#hash-de-senha">Hash de Senha</a>
<ul>
<li><a href="#encapsulamento">Encapsulamento</a></li>
</ul>
</li>
<li><a href="#controlador-database">Controlador DataBase</a></li>
<li><a href="#resumo">Resumo</a></li>
</ul>
<hr>
<p>Nesse step iremos abordar um assunto muito importante, onde devemos sempre reservar um tempo para desenvolvimento, que é a criptografia de informações sensíveis. O que faremos será uma classe para criptografar a senha do usuário antes de salvar no banco de dados.</p>
<p>Na pasta raiz da aplicação MS-Application, vamos criar os seguintes arquivos:</p>
<pre><code class="language-Estrutura" data-lang="Estrutura">MS-application
└───MS1
    │   docker-compose-microservice1.yml
    │   Dockerfile
    │   main.py
    │   requirements.txt
    │
    ├───config
    │       database_connection.py
    │       rabbitmq_connection.py
    │       __init__.py
    │
    ├───criptografy
    │       hash_password.py
    │       __init__.py
    │
    ├───database_controller
    │       postgres_worker.py
    │       __init__.py
    │
    └───rabbitmq_controller
            rabbit_worker.py
	         __init__.py
</code></pre><h2 id="argon2">Argon2</h2>
<p>Para o hash de senhas, utilizaremos um algoritmo campeão da competição de Hashing de Senha em julho de 2015. Argon2 é um algoritmo de hash de senha seguro. Ele foi projetado para ter um tempo de execução configurável e consumo de memória. Isso significa que você pode decidir quanto tempo leva para fazer o hash de uma senha e quanta memória é necessária.</p>
<p>[argon2: <a href="https://argon2-cffi.readthedocs.io/en/stable/argon2.html">https://argon2-cffi.readthedocs.io/en/stable/argon2.html</a>]</p>
<h2 id="hash-de-senha">Hash de Senha</h2>
<p>O tema de criptografia de senha pode ser muitas vezes assustador, contudo, nos dias atuais temos diferentes algoritmos e bibliotecas que podem nos auxiliar a aplicar uma complexidade maior no nível de segurança das informações. Por isso, faremos uma implementação simples usando a biblioteca <strong>argon2</strong> e iremos usar um conceito básico de O.O(Orientação a Objetos), que será o encapsulamento de dados.</p>
<h3 id="encapsulamento">Encapsulamento</h3>
<p>O encapsulamento consiste em evitar que esses dados sofram modificações ou acessos indevidos. Para isso, é criada uma estrutura que contém métodos chamados <em><strong>getters</strong></em> e <em><strong>setters</strong></em>, que poderão ser utilizados em qualquer outra classe, sem causar inconsistência na criação do código.</p>
<p><em><strong>Getter</strong></em> – O método getter tem como objetivo retornar o valor que foi solicitado, porém, de forma que não prejudique a exatidão do dado.</p>
<p><em><strong>Setter</strong></em> – O método setter, recebe um valor como atributo de qualquer tipo suportado pela linguagem, podendo assim, acessar o dado bloqueado e fazer sua devida modificação.</p>
<p>Agora que temos conhecimento do que iremos utilizar, vamos para o desenvolvimento.</p>
<p>Primeiramente importaremos a biblioteca para fazer o hash das senhas</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> argon2 <span style="color:#f92672">import</span> PasswordHasher
</code></pre></div><p>Vamos criar uma classe chamada <strong>EncriptPassword</strong> e em seu constructor __init__ iremos instanciar a biblioteca <strong>PasswordHasher.</strong> Tambémcriaremos os atributo <em>self.__password</em> e <em>self.__hash_password</em> sendo privados, utilizando o &quot;__&quot;<em>.</em> É nesses atributos que serão encapsulados.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">def</span> __init__(self, password):
        self<span style="color:#f92672">.</span>ph <span style="color:#f92672">=</span> PasswordHasher()
        self<span style="color:#f92672">.</span>__password <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
        self<span style="color:#f92672">.</span>__hash_password <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
</code></pre></div><p>Agora criaremos os construtores getters e setters da senha e do hash da senha.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#75715e">#password</span>
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_pass</span>(self):
        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>__password
    
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">set_pass</span>(self, password_imput):
        self<span style="color:#f92672">.</span>__password <span style="color:#f92672">=</span> password_imput

    <span style="color:#75715e">#hash password</span>
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_hash_pass</span>(self):
        <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>__hash_password
    
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">set_hash_pass</span>(self, hash_pass):
        self<span style="color:#f92672">.</span>__hash_password <span style="color:#f92672">=</span> hash_pass
</code></pre></div><p>Nesse momento, criaremos o método que fará o hash da senha. Para isso usaremos a função <em>hash</em> e passaremos o <em>self.__password</em> como atributo. Essa senha será hasheada e atribuída ao atributo privado <em>__hash_password.</em> Assim, classes externas não poderão alterar a senha já criptografada.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">hash_password</span>(self):
        self<span style="color:#f92672">.</span>__hash_password <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>ph<span style="color:#f92672">.</span>hash(self<span style="color:#f92672">.</span>__password)
</code></pre></div><p>Criaremos também um método que será responsável por comparar se a senha hasheada é equivalente à senha normal. Esse método será muito importante para troca de senha, edição das informações do usuário e deletar usuário, onde será verificado se a senha postada na requisição é compatível com a senha existente no banco de dados.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">   <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">verify_hash</span>(self):
        <span style="color:#66d9ef">try</span>:
            <span style="color:#66d9ef">return</span> self<span style="color:#f92672">.</span>ph<span style="color:#f92672">.</span>verify(self<span style="color:#f92672">.</span>__hash_password, self<span style="color:#f92672">.</span>__password)
        <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> error:
            <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;Erro in verify hash&#39;</span>,error)
            <span style="color:#66d9ef">return</span> False
</code></pre></div><h2 id="controlador-database">Controlador DataBase</h2>
<p>Agora que temos nossa classe para criptografar as senhas, precisaremos criar alguns métodos a mais em nosso <em>postgres_worker</em>.</p>
<p>Devemos lembrar de importar a classe <strong>EncriptPassword</strong> ¸ ao arquivo_postgres_worker.py.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> config.database_connection <span style="color:#f92672">import</span> ConnectionDatabase
<span style="color:#f92672">from</span> criptografy.hash_password <span style="color:#f92672">import</span> EncriptPassword
<span style="color:#f92672">from</span> datetime <span style="color:#f92672">import</span> datetime
</code></pre></div><p>O primeiro método é o <em>verify_password_database(self, db_password, old_pass).</em> Ele será o responsável por receber como parâmetro a senha já criptografada, e a senha normal em formato string. Como resultado, nos retornará um valor booleano que será o que nos autorizará a continuar com algumas funções do sistema como: alterar a senha, alterar as informações do usuário e deletar um usuário. Caso a senha seja incompatível com a que há no banco de dados, a modificação será negada, e o usuário receberá um aviso como response.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">verify_password_database</span>(self, db_password, old_pass):
        <span style="color:#66d9ef">try</span>:
            EP <span style="color:#f92672">=</span> EncriptPassword()
            EP<span style="color:#f92672">.</span>set_pass(old_pass)
            EP<span style="color:#f92672">.</span>set_hash_pass(db_password[<span style="color:#ae81ff">0</span>])
            response_verify <span style="color:#f92672">=</span> EP<span style="color:#f92672">.</span>verify_hash()

            <span style="color:#66d9ef">if</span> response_verify <span style="color:#f92672">is</span> True:
                <span style="color:#66d9ef">return</span> True
            <span style="color:#66d9ef">return</span> False
        <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> error:
            <span style="color:#66d9ef">print</span>(error)
</code></pre></div><p>Também será criado um método para criptografar a senha, onde novamente utilizaremos as funções da classe <strong>EncriptPassword.</strong> O retorno desse método deverá ser a senha já hasheada, visto que será ela que colocaremos no banco de dados.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">encript_password</span>(self, data):
        <span style="color:#66d9ef">try</span>:
            HS <span style="color:#f92672">=</span> EncriptPassword()
            HS<span style="color:#f92672">.</span>set_pass(data)
            HS<span style="color:#f92672">.</span>hash_password()
            <span style="color:#66d9ef">return</span> HS<span style="color:#f92672">.</span>get_hash_pass()
        <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> error:
            <span style="color:#66d9ef">print</span>(error)
            <span style="color:#66d9ef">return</span> f<span style="color:#e6db74">&#39;[X] ERROR ON INCRIPTED PASSWORD! </span><span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#e6db74">        {error}&#39;</span>

</code></pre></div><p>Como exemplo de onde usaríamos esses novos métodos, deixarei abaixo um exemplo de uma criação de usuário, em que precisaremos colocar a senha. E a função de deletar um usuário, onde só será deletado caso a senha seja a mesma contida no banco de dados.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">insert_user</span>(self, data):
            <span style="color:#66d9ef">try</span>:
                encripted_password <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>encript_password(data[<span style="color:#e6db74">&#39;password&#39;</span>])

                query_insert <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;INSERT INTO users (full_name, nick_name ,password ,cpf , email, phone_number, created_at, updated_at)VALUES (</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">,</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">,</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">,</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">,</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">,</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">,</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">,</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">)&#39;</span>
                vars_query <span style="color:#f92672">=</span> (data[<span style="color:#e6db74">&#39;name&#39;</span>], data[<span style="color:#e6db74">&#39;nick_name&#39;</span>], encripted_password, data[<span style="color:#e6db74">&#39;cpf&#39;</span>],
                              data[<span style="color:#e6db74">&#39;email&#39;</span>], data[<span style="color:#e6db74">&#39;phone_number&#39;</span>], self<span style="color:#f92672">.</span>date_time_formate, self<span style="color:#f92672">.</span>date_time_formate)
                self<span style="color:#f92672">.</span>PSQL<span style="color:#f92672">.</span>cursor<span style="color:#f92672">.</span>execute(query_insert, vars_query)
                self<span style="color:#f92672">.</span>PSQL<span style="color:#f92672">.</span>connection<span style="color:#f92672">.</span>commit()

                <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;[✓] INSERTION DONE IN POSTGRES!&#39;</span>)
                <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;[✓] User created successfully! &#39;</span>
            <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> error:
                <span style="color:#66d9ef">print</span>(error)
                <span style="color:#66d9ef">return</span> f<span style="color:#e6db74">&#39;[X] ERROR INSERTING IN POSTGRES! {error}&#39;</span>
            <span style="color:#66d9ef">finally</span>:
                self<span style="color:#f92672">.</span>PSQL<span style="color:#f92672">.</span>cursor<span style="color:#f92672">.</span>close()
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">delete_user</span>(self, data):
            <span style="color:#66d9ef">try</span>:
                result_psw <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>take_pass(data[<span style="color:#e6db74">&#39;nick_name&#39;</span>])
                verify <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>verify_password_database(
                    result_psw, data[<span style="color:#e6db74">&#39;password&#39;</span>])

                <span style="color:#66d9ef">if</span> verify <span style="color:#f92672">==</span> False:
                    <span style="color:#66d9ef">return</span> f<span style="color:#e6db74">&#39;[X] PASSWORD NOT EQUAL!&#39;</span>

                sql_delete_query <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;DELETE FROM users WHERE nick_name=</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">&#39;</span>
                vars_query_select <span style="color:#f92672">=</span> data[<span style="color:#e6db74">&#39;nick_name&#39;</span>]
                self<span style="color:#f92672">.</span>PSQL<span style="color:#f92672">.</span>cursor<span style="color:#f92672">.</span>execute(sql_delete_query, (vars_query_select,))
                row_count <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>PSQL<span style="color:#f92672">.</span>cursor<span style="color:#f92672">.</span>rowcount
                self<span style="color:#f92672">.</span>PSQL<span style="color:#f92672">.</span>connection<span style="color:#f92672">.</span>commit()

                <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;[✓] DELETE DONE SUCCESSFULLY IN POSTGRES!&#39;</span>)
                <span style="color:#66d9ef">return</span> {<span style="color:#e6db74">&#39;Altered Lines&#39;</span>: row_count}
            <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> error:
                <span style="color:#66d9ef">print</span>(error)
                <span style="color:#66d9ef">return</span> f<span style="color:#e6db74">&#39;[X] ERROR ON DELETE IN POSTGRES! {error}&#39;</span>
            <span style="color:#66d9ef">finally</span>:
                self<span style="color:#f92672">.</span>PSQL<span style="color:#f92672">.</span>cursor<span style="color:#f92672">.</span>close()
</code></pre></div><p>OBS: lembrando novamente que todas as funções de interação com o banco de dados estão disponíveis no repositório git do projeto.</p>
<h2 id="resumo">Resumo</h2>
<p>Nesse passo abordamos assuntos muito importantes como a criptografia da senha do usuário e um ramo da Programação Orientada a Objetos (POO), chamada de encapsulamento. Criamos os métodos de criptografia de senha usando o algoritmo argon2. Por fim, implementamos novas funções no <em>postgres_worker.py,</em> que serão responsáveis por verificar a senha contida no banco, e também criptografar a senha para salvar no banco de dados.</p>
<p>Aqui, terminamos o desenvolvimento do primeiro Microservice (MS1). Na próxima etapa do projeto, iremos desenvolver o segundo Microservice (MS2), que será responsável por criar as orders no banco de dados.</p>
]]></content>
        </item>
        
        <item>
            <title>Microservice Project – Step 8</title>
            <link>https://patrickpiccini.github.io/posts/microservice_project_step08/</link>
            <pubDate>Thu, 21 Jul 2022 09:23:00 -0300</pubDate>
            
            <guid>https://patrickpiccini.github.io/posts/microservice_project_step08/</guid>
            <description>Table of Contents  Tag API Controlador DataBase  Manipulação de datas   Insert_user Show_all_user Métodos Criados Controlador Rabbit Resumo   No passo anterior concluímos a arquitetura do Microsserviço, e fizemos a conexão com os serviços do Rabbit e Postgres. Agora, vamos fazer a lógica do sistema de usuário, onde iremos diferenciar as interações com o banco de dados através de uma tag, enviada pela API, e dependendo da interação de for solicitada, haverá o acionamento de uma função equivalente a solicitação.</description>
            <content type="html"><![CDATA[<p><img src="/images/microservice_project/microservices.png" alt="microservices"></p>
<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#tag-api">Tag API</a></li>
<li><a href="#controlador-database">Controlador DataBase</a>
<ul>
<li><a href="#manipula%C3%A7%C3%A3o-de-datas">Manipulação de datas</a></li>
</ul>
</li>
<li><a href="#insert%5C_user">Insert_user</a></li>
<li><a href="#show%5C_all%5C_user">Show_all_user</a></li>
<li><a href="#m%C3%A9todos-criados">Métodos Criados</a></li>
<li><a href="#controlador-rabbit">Controlador Rabbit</a></li>
<li><a href="#resumo">Resumo</a></li>
</ul>
<hr>
<p>No passo anterior concluímos a arquitetura do Microsserviço, e fizemos a conexão com os serviços do Rabbit e Postgres. Agora, vamos fazer a lógica do sistema de usuário, onde iremos diferenciar as interações com o banco de dados através de uma tag, enviada pela API, e dependendo da interação de for solicitada, haverá o acionamento de uma função equivalente a solicitação.</p>
<p>Na pasta raiz da aplicação MS-Application, vamos criar os seguintes arquivos:</p>
<pre><code class="language-Estrutura" data-lang="Estrutura">MS-application
└───MS1
    │   docker-compose-microservice1.yml
    │   Dockerfile
    │   main.py
    │   requirements.txt
    │
    ├───config
    │       database_connection.py
    │       rabbitmq_connection.py
    │       __init__.py
    │
    ├───database_controller
    │       postgres_worker.py
    │       __init__.py
    │
    └───rabbitmq_controller
            rabbit_worker.py
	     __init__.py
</code></pre><h2 id="tag-api">Tag API</h2>
<p>Antes de começarmos a codar, vamos entender o cenário onde paramos. Temos uma API que recebe as informações de uma criação de usuário, por exemplo, e envia essas informações para o microsserviço. Para o microsserviço entender o que deve ser feita com aquelas informações recebidas, a API deverá enviar uma tag juntamente ao corpo das informações, que posteriormente será identificada. Entendendo esse fluxo, vamos voltar ao código da API e fazer essa pequena alteração da inserção da tag.</p>
<p>No arquivo <em>server.py, vamos</em> ao método de criação de usuário que abordamos nos Steps anteriores, e inserir ao payload que recebemos item chamado <em>type</em>, com o valor <em>create</em>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a6e22e">@app.route</span>(<span style="color:#e6db74">&#34;/user/create_user/&#34;</span>, methods<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;POST&#39;</span>])
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">create_user</span>():
        <span style="color:#66d9ef">if</span> request<span style="color:#f92672">.</span>method <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;POST&#39;</span>:
            payload <span style="color:#f92672">=</span> request<span style="color:#f92672">.</span>get_json()
            payload[<span style="color:#e6db74">&#39;type&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;create&#39;</span>

            corr_id <span style="color:#f92672">=</span> rabbit_queues<span style="color:#f92672">.</span>rpc_async(json<span style="color:#f92672">.</span>dumps(payload), <span style="color:#e6db74">&#34;user&#34;</span>)
            <span style="color:#66d9ef">while</span> rabbit_queues<span style="color:#f92672">.</span>queue[corr_id] <span style="color:#f92672">is</span> None:
                time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">0.1</span>)

            <span style="color:#66d9ef">return</span> {<span style="color:#e6db74">&#39;Status&#39;</span>: <span style="color:#ae81ff">200</span>, <span style="color:#e6db74">&#39;Message&#39;</span>: json<span style="color:#f92672">.</span>loads(rabbit_queues<span style="color:#f92672">.</span>queue[corr_id])}
        <span style="color:#66d9ef">else</span>:
            <span style="color:#66d9ef">return</span> {<span style="color:#e6db74">&#39;Status&#39;</span>: <span style="color:#ae81ff">404</span>, <span style="color:#e6db74">&#39;Message&#39;</span>: <span style="color:#e6db74">&#39;Erro no envio do method&#39;</span>}
</code></pre></div><h2 id="controlador-database">Controlador DataBase</h2>
<p>O controlador do database será o responsável por fazer o famoso <strong>CRUD.</strong> CRUD é a composição da primeira letra de 4 funções básicas de um sistema que trabalha com banco de dados:</p>
<p>✔️ C: Create (criar) - criar um novo registro.</p>
<p>👀 R: Read (ler) - ler (exibir) as informações de um registro.</p>
<p>♻️ U: Update (atualizar) - atualizar os dados do registro.</p>
<p>❌ D: Delete (apagar) - apagar um registro.</p>
<p>No desenvolvimento desse estágio mostrarei apenas uma interação com o banco de dados, visto que o desenvolvimento é muito complexo, e a leitura ficará muito maçante. O que faremos agora será a inclusão de um usuário ao banco. Para isso, devemos inserir as informações através de um comando SQL.</p>
<p>Primeiramente devemos importar todas as dependências necessárias, que serão a conexão com o banco, feita no <em>database_connection.py,</em> e a biblioteca datetime.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> config.database_connection <span style="color:#f92672">import</span> ConnectionDatabase
<span style="color:#f92672">from</span> datetime <span style="color:#f92672">import</span> datetime
</code></pre></div><p>Vamos criar uma Classe chamada <strong>PostgresWorker</strong> , com o construtor <em>__init__</em> contendo a conexão com o banco, captura do horário atual, e a formatação da data.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">def</span> __init__(self):
        self<span style="color:#f92672">.</span>PSQL <span style="color:#f92672">=</span> ConnectionDatabase()
        self<span style="color:#f92672">.</span>date_time <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>now()
        self<span style="color:#f92672">.</span>date_time_formate <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>date_time<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#39;%Y/%m/</span><span style="color:#e6db74">%d</span><span style="color:#e6db74"> %H:%M&#39;</span>)
</code></pre></div><h3 id="manipulação-de-datas">Manipulação de datas</h3>
<p>Algo a ser ressaltado! No código que iremos desenvolver, fiz todas as manipulações de datas usando o formato DATE, para uma explicação mais dinâmica e simples. Contudo, em projetos reais é <strong>MUITO RECOMENDADO</strong> a utilizar o padrão <strong>Unix Timestamp.</strong></p>
<p><strong>Unix Timestamp</strong> é um ponto fixo na história da computação, onde em 1º de janeiro de 1970 às 00:00 foi iniciado a contagem dos segundos. Essa data é considerada o início dos tempos pelo Linux. O motivo da recomendação do uso desse tipo de formato é pelo fato de o valor retornado do timestamp ser um float numeric. Sendo assim, é facilmente manipulado de forma binária e é muito curto e rápido de ser calculado.</p>
<p>A imagem abaixo mostra como uma determinada data e hora é representada em diferentes formatos.</p>
<p><img src="/images/microservice_project/img35.jpg" alt="img35"></p>
<p>Imagem 1: <a href="https://pynative.com/python-timestamp/">https://pynative.com/python-timestamp/</a></p>
<p>Agora que entendemos a importância do uso do formato Unix Timestamp, podemos continuar com o desenvolvimento.</p>
<h2 id="insert_user">Insert_user</h2>
<p>O que faremos agora será criar uma função chamada <em>insert_user</em> que fará a inserção/criação de usuário no nosso banco de dados. O método receberá como parâmetro <em>data</em>, que serão os dados para fazermos a interação com o banco.</p>
<p>Dentro do método teremos a variável <em>query_insert</em> que conterá a query para a execução do comando. Na variável <em>vars_query</em> terão as informações recebidas da fila, que serão inseridas da query. A função <em>&quot;cursor.execute(query_update, vars_query)&quot;</em> é responsável pela execução do comando, onde pegará a <em>query_update</em>, inserirá os valores de <em>vars_query,</em> e executará a instrução. A função <em>&quot;connection.commit&quot;</em> é responsável por fazer as alterações do banco para a persistência do database. Por fim, é retornado alguma informação. Tudo isso ficará dentro de um try-except, para caso haja alguma falha na interação com o banco, seja lançado um except com o erro.</p>
<p>Como esse caso é apenas uma inserção no banco, apenas retornará uma mensagem ao usuário. Entretanto em casos de retorno de alguma informação do banco ao usuário, essas informações serão passadas no return.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">        <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">insert_user</span>(self, data):
        <span style="color:#66d9ef">try</span>:
            query_insert <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;INSERT INTO users (full_name, nick_name ,password ,cpf , email, phone_number, created_at, updated_at)VALUES (</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">,</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">,</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">,</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">,</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">,</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">,</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">,</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">)&#39;</span>
            vars_query <span style="color:#f92672">=</span> (data[<span style="color:#e6db74">&#39;name&#39;</span>], data[<span style="color:#e6db74">&#39;nick_name&#39;</span>], data[<span style="color:#e6db74">&#39;password&#39;</span>], data[<span style="color:#e6db74">&#39;cpf&#39;</span>],
                          data[<span style="color:#e6db74">&#39;email&#39;</span>], data[<span style="color:#e6db74">&#39;phone_number&#39;</span>], self<span style="color:#f92672">.</span>date_time_formate, self<span style="color:#f92672">.</span>date_time_formate)
            self<span style="color:#f92672">.</span>PSQL<span style="color:#f92672">.</span>cursor<span style="color:#f92672">.</span>execute(query_insert, vars_query)
            self<span style="color:#f92672">.</span>PSQL<span style="color:#f92672">.</span>connection<span style="color:#f92672">.</span>commit()

            <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;[✓] INSERTION DONE IN POSTGRES!&#39;</span>)
            <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;[✓] User created successfully! &#39;</span>
        <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> error:
            <span style="color:#66d9ef">print</span>(error)
            <span style="color:#66d9ef">return</span> f<span style="color:#e6db74">&#39;[X] ERROR INSERTING IN POSTGRES! {error}&#39;</span>
        <span style="color:#66d9ef">finally</span>:
            self<span style="color:#f92672">.</span>PSQL<span style="color:#f92672">.</span>cursor<span style="color:#f92672">.</span>close()
</code></pre></div><h2 id="show_all_user">Show_all_user</h2>
<p>Para exemplificar uma situação em que precisamos retornar uma informação do banco de dados para o usuário, vamos criar a função <em>show_all_user.</em> A estrutura da função será muito semelhante a que criamos acima. Teremos somente uma query de instrução que será um select de toda a tabela. Serão capturadas as informações através do comando &quot;cursor.fetchall&quot;, e manipuladas para mostrar mais organizado ao usuário. Tudo isso ficará dentro de um try-except, para caso haja alguma falha na interação com o banco, seja lançado um except com o erro.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">show_all_user</span>(self):
        <span style="color:#66d9ef">try</span>:
            sql_select_query <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;SELECT * FROM users&#39;</span>
            self<span style="color:#f92672">.</span>PSQL<span style="color:#f92672">.</span>cursor<span style="color:#f92672">.</span>execute(sql_select_query)
            record <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>PSQL<span style="color:#f92672">.</span>cursor<span style="color:#f92672">.</span>fetchall()
            self<span style="color:#f92672">.</span>PSQL<span style="color:#f92672">.</span>connection<span style="color:#f92672">.</span>commit()

            dict_all_users <span style="color:#f92672">=</span> []
            <span style="color:#66d9ef">for</span> index <span style="color:#f92672">in</span> range(len(record)):
                dict_response <span style="color:#f92672">=</span> {
                    <span style="color:#e6db74">&#39;nick_name&#39;</span>: record[index][<span style="color:#ae81ff">1</span>],
                    <span style="color:#e6db74">&#39;name&#39;</span>: record[index][<span style="color:#ae81ff">3</span>],
                    <span style="color:#e6db74">&#39;email&#39;</span>: record[index][<span style="color:#ae81ff">5</span>],
                    <span style="color:#e6db74">&#39;phone_number&#39;</span>: record[index][<span style="color:#ae81ff">6</span>],
                    <span style="color:#e6db74">&#39;created_at&#39;</span>: str(record[index][<span style="color:#ae81ff">7</span>]),
                    <span style="color:#e6db74">&#39;updated_at&#39;</span>: str(record[index][<span style="color:#ae81ff">8</span>])
                }
                dict_all_users<span style="color:#f92672">.</span>append(dict_response)

            <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;[✓] SELECT DONE SUCCESSFULLY IN POSTGRES!&#39;</span>)
            <span style="color:#66d9ef">return</span> {<span style="color:#e6db74">&#39;users&#39;</span>: dict_all_users}
        <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> error:
            <span style="color:#66d9ef">print</span>(error)
            <span style="color:#66d9ef">return</span> f<span style="color:#e6db74">&#39;[X] ERROR ON SELECT IN POSTGRES! {error}&#39;</span>
        <span style="color:#66d9ef">finally</span>:
            self<span style="color:#f92672">.</span>PSQL<span style="color:#f92672">.</span>cursor<span style="color:#f92672">.</span>close()
</code></pre></div><p>Com isso, podemos ter uma base de como fazer o nosso CRUD. As demais funções poderão ser visualizadas no repositório git do projeto.</p>
<h2 id="métodos-criados">Métodos Criados</h2>
<p>Os métodos precisaremos criar são:</p>
<ul>
<li><strong>insert_user</strong> – Criação de usuário;</li>
<li><strong>alter_user</strong> – Alterar informações do usuário exceto senha;</li>
<li><strong>alter_password</strong> – Alterar senha do usuário;</li>
<li><strong>show_all_user</strong> – Mostrar todos os usuários cadastrados;</li>
<li><strong>show_one_user</strong> – Mostrar informações de um usuário através do NickName;</li>
<li><strong>delete_user</strong> – Deletar um usuário através do NickName;</li>
<li><strong>information_user</strong> – Selecionar todas as informações de um usuário;</li>
<li><strong>take_pass</strong> – Selecionar senha do usuário.</li>
</ul>
<h2 id="controlador-rabbit">Controlador Rabbit</h2>
<p>O controlador do rabbit será o responsável por identificar a tag recebida e irá disparar uma função para a interação com o banco de dados. Contudo o retorno do bando de dados deve ser retornado também ao usuário que consumiu a API, para isso, iremos publicar esse response através da fila de controle que criamos no Step6.</p>
<p>No arquivo <em>rabbit_worker.py</em> vamos iniciar importando as dependências.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> json<span style="color:#f92672">,</span> pika
<span style="color:#f92672">from</span> database_controller.postgres_worker <span style="color:#f92672">import</span> PostgresWorker
</code></pre></div><p>Vamos criar uma classe chamada <strong>RabbitWorker,</strong> e em seu construtor <em>__init__</em> criaremos um atributo vazio chamada <em>self.data.</em></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">RabbitWorker</span>():

    <span style="color:#66d9ef">def</span> __init__(self):
        self<span style="color:#f92672">.</span>data <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>
</code></pre></div><p>Logo abaixo, criaremos o método que chamamos no arquivo <em>main.py,</em> chamado de <em>call-back.</em> Ele é o responsável por processar os dados recebidos, e retornar a fila de controle, um response ao usuário. Nos parâmetros iremos deverá ter <em>ch, method, props</em> e <em>body.</em> No atributo <em>self.data</em> iremos carregá-lo com as informações recebidas do body. Logo abaixo, criaremos uma variável onde chamaremos o metodo <em>database_manipulation(self.data)</em> que criaremos posteriormente. Após isso, através do atributo <em>ch</em>, iremos criar a parte da publicação da mensagem de response na fila de controle e dando um ACK na fila de controle.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">callback</span>(self, ch, method, props, body):
        self<span style="color:#f92672">.</span>data <span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>loads(body)
        response_work <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>database_manipulation(self<span style="color:#f92672">.</span>data)

        ch<span style="color:#f92672">.</span>basic_publish(exchange<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>,
                         routing_key<span style="color:#f92672">=</span>props<span style="color:#f92672">.</span>reply_to,
                         properties<span style="color:#f92672">=</span>pika<span style="color:#f92672">.</span>BasicProperties(
                             correlation_id<span style="color:#f92672">=</span>props<span style="color:#f92672">.</span>correlation_id),
                         body<span style="color:#f92672">=</span>json<span style="color:#f92672">.</span>dumps(response_work))
        ch<span style="color:#f92672">.</span>basic_ack(delivery_tag<span style="color:#f92672">=</span>method<span style="color:#f92672">.</span>delivery_tag)
</code></pre></div><p>Como dito anteriormente, agora vamos criar o método <em>database_manipulation</em>, que é responsável por identificar a tag que há no corpo dos dados recebidos da API, e acionar os métodos contidos no arquivo <em>postgres_worker.py</em> para a fazer a ação solicitada da requisição.</p>
<p>O que faremos é bem simples. Quando for recebido uma mensagem na fila de usuário, a mensagem será consumida. Será identificado o type da mensagem, que no caso é nossa tag, e após isso, chamaremos uma função equivalente ao type, para executar um CRUD no banco de dados.</p>
<p>Essa identificação será através de um <em>if-elif</em> da informação &quot;type&quot;, contida em data.</p>
<table>
<thead>
<tr>
<th>Type</th>
<th>Function</th>
<th>Objective</th>
</tr>
</thead>
<tbody>
<tr>
<td>create</td>
<td>insert_user</td>
<td>Criar usuário</td>
</tr>
<tr>
<td>update</td>
<td>alter_user</td>
<td>Alterar informações de usuário</td>
</tr>
<tr>
<td>update_password</td>
<td>alter_password</td>
<td>Alterar senha de usuário</td>
</tr>
<tr>
<td>show_all</td>
<td>show_all_user</td>
<td>Mostrar todos os usuários</td>
</tr>
<tr>
<td>show_one</td>
<td>show_one_user</td>
<td>Mostrar um usuário</td>
</tr>
<tr>
<td>delete_user</td>
<td>delete_user</td>
<td>Deletar um usuário</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">database_manipulation</span>(self, data):
        <span style="color:#75715e"># start connection whith postgres</span>
        psql <span style="color:#f92672">=</span> PostgresWorker()
        <span style="color:#66d9ef">if</span> data[<span style="color:#e6db74">&#39;type&#39;</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;create&#39;</span>:
            <span style="color:#66d9ef">return</span> psql<span style="color:#f92672">.</span>insert_user(data)
        <span style="color:#66d9ef">elif</span> data[<span style="color:#e6db74">&#39;type&#39;</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;update&#39;</span>:
            <span style="color:#66d9ef">return</span> psql<span style="color:#f92672">.</span>alter_user(data)
        <span style="color:#66d9ef">elif</span> data[<span style="color:#e6db74">&#39;type&#39;</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;update_password&#39;</span>:
            <span style="color:#66d9ef">return</span> psql<span style="color:#f92672">.</span>alter_password(data)
        <span style="color:#66d9ef">elif</span> data[<span style="color:#e6db74">&#39;type&#39;</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;show_all&#39;</span>:
            <span style="color:#66d9ef">return</span> psql<span style="color:#f92672">.</span>show_all_user()
        <span style="color:#66d9ef">elif</span> data[<span style="color:#e6db74">&#39;type&#39;</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;show_one&#39;</span>:
            <span style="color:#66d9ef">return</span> psql<span style="color:#f92672">.</span>show_one_user(data)
        <span style="color:#66d9ef">elif</span> data[<span style="color:#e6db74">&#39;type&#39;</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;delete_user&#39;</span>:
            <span style="color:#66d9ef">return</span> psql<span style="color:#f92672">.</span>delete_user(data)
</code></pre></div><h2 id="resumo">Resumo</h2>
<p>Nesse passo fizemos uma pequena alteração na API, inserindo uma nova informação no payload que será o ponto crucial para a identificação da ação que deve ser feita no banco de dados. Criamos o database_worker onde há as funções de interação/manipulação do banco de dados, onde foi feito um CRUD. Foi explicado um pouco sobre o uso do UNIX Timestap para gravação de data-hora no banco de dados. Criamos o rabbit_worker, que é o responsável por identificar o que está sendo solicitado através da tag, pegar as informações recebidas e utiliza-la nas funções contidas no database_worker. Por fim, é publicado na fila auxiliar uma mensagem de response, onde o usuário receberá essa informação já processada.</p>
]]></content>
        </item>
        
        <item>
            <title>Microservice Project – Step 7</title>
            <link>https://patrickpiccini.github.io/posts/microservice_project_step07/</link>
            <pubDate>Thu, 14 Jul 2022 09:01:57 -0300</pubDate>
            
            <guid>https://patrickpiccini.github.io/posts/microservice_project_step07/</guid>
            <description>Table of Contents  Config Requeriments Docker-Compose Dockerfile Main.py Resumo   Agora vamos para o próximo nível da nossa aplicação. Como já temos a API pré-configurada com as filas e as tabelas do banco criados, começaremos a criar os microservices para consumi-las. A arquitetura do serviço será bem semelhante ao que criamos na API, contendo requirements, dockerfile, docker-compose, pasta de config e mais algumas coisas.
Na pasta raiz da aplicação MS-Application, vamos criar os seguintes arquivos:</description>
            <content type="html"><![CDATA[<p><img src="/images/microservice_project/microservices.png" alt="microservices"></p>
<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#config">Config</a></li>
<li><a href="#requeriments">Requeriments</a></li>
<li><a href="#docker-compose">Docker-Compose</a></li>
<li><a href="#dockerfile">Dockerfile</a></li>
<li><a href="#mainpy">Main.py</a></li>
<li><a href="#resumo">Resumo</a></li>
</ul>
<hr>
<p>Agora vamos para o próximo nível da nossa aplicação. Como já temos a API pré-configurada com as filas e as tabelas do banco criados, começaremos a criar os microservices para consumi-las. A arquitetura do serviço será bem semelhante ao que criamos na API, contendo <em>requirements</em>, <em>dockerfile</em>, <em>docker-compose</em>, pasta de <em>config</em> e mais algumas coisas.</p>
<p>Na pasta raiz da aplicação MS-Application, vamos criar os seguintes arquivos:</p>
<pre><code class="language-Estrutura" data-lang="Estrutura">MS-application
└───MS1
    │   docker-compose-microservice1.yml
    │   Dockerfile
    │   main.py
    │   requirements.txt
    │
    ├───config
    │       database_connection.py
    │       rabbitmq_connection.py
    │       __init__.py
</code></pre><h2 id="config">Config</h2>
<p>Na pasta <strong>config</strong> , os arquivos <em>database_connection.py</em> e <em>rabbitmq_connection.py</em> são exatamente as mesmas configurações dos arquivos contido na API, então apenas vamos copiar aos arquivos da API.</p>
<h2 id="requeriments">Requeriments</h2>
<p>No arquivo <em>requeriments.txt</em> ficarão todas as instalações de bibliotecas e framework que serão utilizados na aplicação do microservices. As bibliotecas devem ficar separadas por linha, visto que usaremos um comando para uma instalação recursiva.</p>
<pre><code class="language-requirements" data-lang="requirements">requirements.txt
   psycopg2-binary
   argon2-cffi
   flask
   pika
</code></pre><p>Comando para instalação:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">pip install -r requeriments.txt
</code></pre></div><h2 id="docker-compose">Docker-Compose</h2>
<p>No arquivo <em>docker-compose-microservice1.yml,</em> configuraremos a inicialização da imagem do serviço. Será feito o Build da imagem que criaremos posteriormente, apontado a Network que criamos juntamente aos serviços logo no início do projeto.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-docker" data-lang="docker">version: <span style="color:#e6db74">&#34;3.7&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>services:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>  microservice1:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    build: .<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    networks:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      - internal-network<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>networks:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    internal-network:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>        external: true<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><h2 id="dockerfile">Dockerfile</h2>
<p>No arquivo Dockerfile iremos configurar a imagem de nosso primeiro microservices, contendo as variáveis de ambiente adequadas para o serviço. Diferente da imagem do python que usamos na API, no microservice precisaremos instalar a imagem completa do python, sendo ela: python:3.8.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-docker" data-lang="docker"><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> python:3.8</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> . /app/<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENV</span> HOST<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;10.0.0.25&#39;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENV</span> HOST_DATABASE<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;10.5.0.11&#39;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /app</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> pip install --upgrade pip<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> pip install -r requirements.txt<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">CMD</span> python main.py<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><h2 id="mainpy">Main.py</h2>
<p>O arquivo <em>main.py</em> será responsável por interceptar as mensagens enviadas para a fila de usuário.</p>
<p>Primeiramente, devemos importar os arquivos de conexão com o postgres e rabbit. Após isso, criaremos a classe <em>Main(),</em> onde no método <em>__init__,</em> chamaremos as conexões com os servidores.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> config.database_connection <span style="color:#f92672">import</span> ConnectionDatabase
<span style="color:#f92672">from</span> config.rabbitmq_connection <span style="color:#f92672">import</span> ConnectionRabbitMq
<span style="color:#f92672">from</span> rabbitmq_controller.rabbit_worker <span style="color:#f92672">import</span> RabbitWorker

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Main</span>():

    <span style="color:#66d9ef">def</span> __init__(self):
        self<span style="color:#f92672">.</span>PSQL <span style="color:#f92672">=</span> ConnectionDatabase()
        self<span style="color:#f92672">.</span>RMQ <span style="color:#f92672">=</span> ConnectionRabbitMq()
        self<span style="color:#f92672">.</span>RMQ_WORKER <span style="color:#f92672">=</span> RabbitWorker()
</code></pre></div><p>Feito isso, criaremos um método chamado <em>consume_queue,</em> que consumirá a fila que desejamos. Nesse caso será <em>user,</em> e posteriormente o consumo disparará uma função para o processamento do dado recebido da fila. Nesse momento não iremos criar a função de processamento, porem iremos apenas nomeá-la no lugar correto.</p>
<p>Com o comando <em>basic_consume</em> consumiremos a fila <em>user</em>, no on_message_callback será disparado a função para o processamento da informação recebida na fila.</p>
<p>Com o comando <em>start_consuming,</em> é processado o evento de I/O até que todos as mensagens sejam processadas.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">consume_queue</span>(self):
        self<span style="color:#f92672">.</span>RMQ<span style="color:#f92672">.</span>channel<span style="color:#f92672">.</span>basic_qos(prefetch_count<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
        self<span style="color:#f92672">.</span>RMQ<span style="color:#f92672">.</span>channel<span style="color:#f92672">.</span>basic_consume(queue<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;user&#39;</span>, on_message_callback<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>RMQ_WORKER<span style="color:#f92672">.</span>callback)

        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;     [⇄] Waiting for messages. To exit press CTRL+C&#39;</span>)
        self<span style="color:#f92672">.</span>RMQ<span style="color:#f92672">.</span>channel<span style="color:#f92672">.</span>start_consuming()
</code></pre></div><p>Finalizaremos com a chamada do método <em>consume_queue</em> para inicializar o serviço.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:

    MA <span style="color:#f92672">=</span> Main()
    MA<span style="color:#f92672">.</span>consume_queue()
</code></pre></div><h2 id="resumo">Resumo</h2>
<p>Nesse Step criamos nosso primeiro microservices para o processamento dos dados recebidos através da fila de usuário. Copiamos os arquivos de conexão <em>database_connection.py</em> e <em>rabbitmq_connection.py</em> da API, visto que é a mesma conexão que precisaremos fazer nos microservices. Também criamos o arquivo <em>main.py</em> que será o responsável por inicializar o serviço e disparar o método <em>consume_queue,</em> que como o próprio nome diz, irá consumir a fila de usuários.</p>
]]></content>
        </item>
        
        <item>
            <title>Microservice Project – Step 6</title>
            <link>https://patrickpiccini.github.io/posts/microservice_project_step06/</link>
            <pubDate>Thu, 07 Jul 2022 09:01:56 -0300</pubDate>
            
            <guid>https://patrickpiccini.github.io/posts/microservice_project_step06/</guid>
            <description>Table of Contents  Queues Consumo da classe RabbitQueue e ConnectionDatabase Routes Resumo da Funcionalidade   Nessa etapa, criaremos as filas que necessitamos para a comunicação com os microservices. Iremos instanciar a classe de configuração do Rabbit para inicializar juntamente com a API, estabelecendo uma conexão, e criando automaticamente as filas para consumo. Veremos também como funciona o recurso RPC, que irei detalhar posteriormente como funciona. Também, será explicado cada funcionalidade da criação da fila do rabbit que utilizaremos.</description>
            <content type="html"><![CDATA[<p><img src="/images/microservice_project/microservices.png" alt="microservices"></p>
<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#queues">Queues</a></li>
<li><a href="#consumo-da-classe-rabbitqueue-e-connectiondatabase">Consumo da classe RabbitQueue e ConnectionDatabase</a></li>
<li><a href="#routes">Routes</a></li>
<li><a href="#resumo-da-funcionalidade">Resumo da Funcionalidade</a></li>
</ul>
<hr>
<p>Nessa etapa, criaremos as filas que necessitamos para a comunicação com os microservices. Iremos instanciar a classe de configuração do Rabbit para inicializar juntamente com a API, estabelecendo uma conexão, e criando automaticamente as filas para consumo. Veremos também como funciona o recurso RPC, que irei detalhar posteriormente como funciona. Também, será explicado cada funcionalidade da criação da fila do rabbit que utilizaremos. Por fim, mostrarei no manager, a parte visual de como irá ficar nossas filas. No final dessa etapa, será resumido como funcionará o código, por uma visão geral.</p>
<p>Dentro da pasta API, crie uma subpasta chamada rabbitmq_controller com o arquivo rabbit_queues.py.</p>
<pre><code class="language-Estrutura" data-lang="Estrutura">MS-application
└───API
    │   docker-compose-api.yml
    │   Dockerfile
    │   requirements.txt
    │   server.py
    │
    ├───config
    │       database_connection.py
    │       rabbitmq_connection.py
    │       redis_connection.py
    │       __init__.py
    │
    └───rabbitmq_controller
            rabbit_queues.py
            __init__.py
</code></pre><h2 id="queues">Queues</h2>
<p>O que iremos criar será algo relativamente simples. Como vamos ter os microservices <em>users</em> e <em>orders,</em> nossa API terá que se comunicar com eles de alguma maneira. Para isso, utilizaremos o message broker do rabbit. A ideia é termos duas filas para comunicação entre API/Serviço, porém existe um pequeno detalhe, como em alguns casos que iremos fazer uma consulta no banco de dados, desejando enviar um response ao usuário. Nas filas do rabbit existe um sistema de ACK para confirmação de entrega de mensagens ao destinatário, porém é algo simples, não podendo ter uma personalização da mensagem de confirmação.</p>
<p>O que precisaremos fazer, será utilizar um recurso chamado Remote Procedure Call (RPC). Que consiste em um remetente enviar uma mensagem e aguardar o destinatário processar a informação, para que depois possa retornar uma resposta. Resumindo, uma comunicação assíncrona. Sendo assim, será necessária uma fila auxiliar para transmitir esse response. Abaixo há uma ilustração da arquitetura que iremos criar.</p>
<p><img src="/images/microservice_project/img29.png" alt="img27"></p>
<p>Agora que temos a arquitetura do que precisamos construir, podemos começar.</p>
<p>Primeiramente precisamos fazer a sequência de imports das bibliotecas, e importar a classe da configuração do rabbit, que fizemos no passo anterior.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> pika<span style="color:#f92672">,</span> uuid<span style="color:#f92672">,</span> threading<span style="color:#f92672">,</span> time
<span style="color:#f92672">from</span> config.rabbitmq_connection <span style="color:#f92672">import</span> RabbitConnection
</code></pre></div><p>Logo após, vamos criar uma classe chamada <em>RabbitQueue(),</em> contendo duas variáveis que iremos utilizar posteriormente.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">RabbitQueue</span>():
    internal_lock <span style="color:#f92672">=</span> threading<span style="color:#f92672">.</span>Lock()
    queue <span style="color:#f92672">=</span> {}
</code></pre></div><p>No método __init__.py vamos ter crias o seguinte atributo. Primeiro precisamos instanciar a classe de conexão com o servidor Rabbit para posteriormente criar as filas. Por enquanto precisamos saber só disso, os demais atributos irão ser abordados posteriormente.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">def</span> __init__(self) :
        self<span style="color:#f92672">.</span>RMQ <span style="color:#f92672">=</span> RabbitConnection()
        result <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>RMQ<span style="color:#f92672">.</span>channel<span style="color:#f92672">.</span>queue_declare(queue<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>, exclusive<span style="color:#f92672">=</span>True)
        self<span style="color:#f92672">.</span>callback_queue <span style="color:#f92672">=</span> result<span style="color:#f92672">.</span>method<span style="color:#f92672">.</span>queue
        self<span style="color:#f92672">.</span>_create_process_thread()
</code></pre></div><p>Agora, criaremos um método chamado <em>create_queues()</em>, pra criar as filas que precisamos consumir. Para isso será utilizado a o atributo channel, da classe de conexão, e a função queue_declare, para declarar as filas.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">create_queues</span>(self):
        self<span style="color:#f92672">.</span>RMQ<span style="color:#f92672">.</span>channel<span style="color:#f92672">.</span>queue_declare(queue<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;user&#39;</span>)
        self<span style="color:#f92672">.</span>RMQ<span style="color:#f92672">.</span>channel<span style="color:#f92672">.</span>queue_declare(queue<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;order&#39;</span>)
        
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;     [✓] Queues created successful!&#39;</span>)
</code></pre></div><p>Vamos criar agora, o método chamado _<em>create_process_thread(),</em> ele será responsável por criar uma thread de processamento, fazendo com que o consumo de diferentes processos seja independente.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_create_process_thread</span>(self):
        thread <span style="color:#f92672">=</span> threading<span style="color:#f92672">.</span>Thread(target<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>_process_data_events)
        thread<span style="color:#f92672">.</span>setDaemon(True)
        thread<span style="color:#f92672">.</span>start()
</code></pre></div><p>No método <em>rpc_async()</em>, terá como parâmetros o <strong>payload</strong> , que será passado a informação que será lançado na fila, e o parâmetro <strong>route,</strong> que será o nome da fila que será utilizada.</p>
<p>Nesse método faremos a configuração da fila de controle, que citei anteriormente. Para isso, será criado um ID para fila, utilizando a biblioteca <em>uuid.</em></p>
<p>No with, será verificado a variável <em>internal_lock</em> que criamos, nela é atribuído um bloqueio primitivo. Uma vez que um thread adquiriu um bloqueio, as tentativas subsequentes de adquiri-lo bloqueiam, até que ele seja liberado. Após isso, será passada a <em>route</em> com o nome da rota, e como propriedade há um <em>reply_to</em>, que é um recurso que permite que clientes RPC (solicitação/resposta) evitem declarar uma fila de resposta por solicitação, comumente usados para nomear uma fila de retorno de chamada. Nele é passado o atributo <em>callback_queue</em> que foi criado no __init__.</p>
<p>Também há o <em>correlation_id</em>, que é útil para correlacionar respostas RPC com solicitações. É passado o id criado anteriormente, que será o nome da fila de controle.</p>
<p>E por fim, o body, contendo a informação passada através do payload.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">rpc_async</span>(self, payload, route):
        corr_id <span style="color:#f92672">=</span> str(uuid<span style="color:#f92672">.</span>uuid4())
        self<span style="color:#f92672">.</span>queue[corr_id] <span style="color:#f92672">=</span> None
        <span style="color:#66d9ef">with</span> self<span style="color:#f92672">.</span>internal_lock:
            self<span style="color:#f92672">.</span>RMQ<span style="color:#f92672">.</span>channel<span style="color:#f92672">.</span>basic_publish(exchange<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;&#39;</span>,
                                       routing_key<span style="color:#f92672">=</span>route,
                                       properties<span style="color:#f92672">=</span>pika<span style="color:#f92672">.</span>BasicProperties(
                                           reply_to<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>callback_queue,
                                           correlation_id<span style="color:#f92672">=</span>corr_id,
                                       ),
                                       body<span style="color:#f92672">=</span>payload)
        <span style="color:#66d9ef">return</span> corr_id       
</code></pre></div><p>No método <em>_on_response()</em> será apenas armazenado o response da fila em um dicionário, passado como key, a ID que foi criado no metodo <em>rpc_async,</em> e no value o body do response.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_on_response</span>(self, ch, method, props, body):
        <span style="color:#e6db74">&#34;&#34;&#34;On response we simply store the result in a local dictionary.&#34;&#34;&#34;</span>
        self<span style="color:#f92672">.</span>queue[props<span style="color:#f92672">.</span>correlation_id] <span style="color:#f92672">=</span> body        
</code></pre></div><p>O método <em>_process_data_events(),</em> será responsável por ser uma espécie de vigia de eventos da fila de controle, e marcar um ACK ao evento, para consumi-lo.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_process_data_events</span>(self):
        self<span style="color:#f92672">.</span>RMQ<span style="color:#f92672">.</span>channel<span style="color:#f92672">.</span>basic_consume(
            queue<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>callback_queue,
            on_message_callback<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>_on_response, 
            auto_ack<span style="color:#f92672">=</span>True,
        )

        <span style="color:#66d9ef">while</span> True:
            <span style="color:#66d9ef">with</span> self<span style="color:#f92672">.</span>internal_lock:
                self<span style="color:#f92672">.</span>RMQ<span style="color:#f92672">.</span>connection<span style="color:#f92672">.</span>process_data_events()
                time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">0.1</span>)
</code></pre></div><h2 id="consumo-da-classe-rabbitqueue-e-connectiondatabase">Consumo da classe RabbitQueue e ConnectionDatabase</h2>
<p>Agora, só precisamos apontar a classe <strong>RabbitQueue</strong> no arquivo <em>server.py</em> para que possamos começar a consumir as filas que criamos.</p>
<p>Antes de tudo, devemos importar todas as bibliotecas que precisaremos.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> json<span style="color:#f92672">,</span>time
<span style="color:#f92672">from</span> flask <span style="color:#f92672">import</span> Flask, request
<span style="color:#f92672">from</span> config.database_connection <span style="color:#f92672">import</span> ConnectionDatabase
<span style="color:#f92672">from</span> rabbitmq_controller.rabbit_queues <span style="color:#f92672">import</span> RabbitQueue
</code></pre></div><p>Fora da classe <em>Api_server</em> iremos instanciar <strong>RabbitQueue</strong> que criamos, a uma variável chamada <em>rabbit_queues</em>. Ela ficará fora da classe pois queremos que ela seja vista globalmente no arquivo. Dentro da classe <em>Api_server,</em> criaremos o construtor __init__ e chamaremos o método <em>create_queues,</em> para criar as filas, e também iremos chamar a classe <strong>ConnectionDatabase</strong> ,criada no Step5. Isso será responsável por se conectar aos dois servidores de serviço e criar as tabelas no banco, e filas no rabbit.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">rabbit_queues <span style="color:#f92672">=</span> RabbitQueue()

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Api_server</span>():
    app <span style="color:#f92672">=</span> Flask(__name__)
    
    ConnectionDatabase()
    rabbit_queues<span style="color:#f92672">.</span>create_queues()
</code></pre></div><p>Uma pergunta que você pode estar se questionando é &quot;porque não criar o atributo <em>app</em> e a criação das filas do rabbitdentro de um __init__?&quot;.</p>
<p>Bom, na maioria dos projetos que podem ser encontrado na internet relacionada ao Flask, você simplesmente irá se deparar com um arquivo com uma rota chamando uma função abaixo, sem segredos em relação a isso. Podemos compreender que o Flask não foi feito para seguir os padrões de Orientação a Objetos, tanto que é, que se você tentar colocar um &quot;self&quot;, na def abaixo da rota, simplesmente não irá funcionar. Visto isso, apenas atribui a estrutura de rotas e funções dentro de uma classe como uma boa prática, porém, não é necessário fazer isso caso você não queira.</p>
<p>Agora, respondendo à pergunta, o simples fato de colocar um &quot;self&quot; antes do <em>app</em> ou da <em>criação das filas</em>, já faria com que todo o código parasse de funcionar, visto que no marcador @ não iria identificar o &quot;self.app&quot; que foi criado no init.</p>
<h2 id="routes">Routes</h2>
<p>Na chamada das routes, precisaremos invocar o método <em>rpc_async</em> para que possamos enviar o playload para a fila desejada. Para isso, utilizarei o mesmo exemplo que foi utilizado no Step4, com a rota /user/create_user/.</p>
<p>Chamaremos o método <em>rpc_async,</em> passando como parâmetros o payload recebido na requisição, e a string &quot;user&quot;, que será a fila que será enviada a mensagem. Tudo isso será atribuído para uma variável chamada <em>corr_id,</em> que terá como return o <em>correlation_id</em>. Após isso, ficará sendo verificado o atributo <em>queue,</em> da classe <strong>RabbitQueue,</strong> se contêm alguma informação. Caso tenha, essa informação será retornada ao usuário.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#a6e22e">@app.route</span>(<span style="color:#e6db74">&#34;/user/create_user/&#34;</span>, methods<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;POST&#39;</span>])
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">create_user</span>():
        <span style="color:#66d9ef">if</span> request<span style="color:#f92672">.</span>method <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;POST&#39;</span>:
            payload <span style="color:#f92672">=</span> request<span style="color:#f92672">.</span>get_json()

            corr_id <span style="color:#f92672">=</span> rabbit_queues<span style="color:#f92672">.</span>rpc_async(json<span style="color:#f92672">.</span>dumps(payload),<span style="color:#e6db74">&#34;user&#34;</span>)
            <span style="color:#66d9ef">while</span> rabbit_queues<span style="color:#f92672">.</span>queue[corr_id] <span style="color:#f92672">is</span> None:
                time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">0.1</span>)

            <span style="color:#66d9ef">return</span> {<span style="color:#e6db74">&#39;Status&#39;</span>: <span style="color:#ae81ff">200</span>, <span style="color:#e6db74">&#39;Message&#39;</span>: json<span style="color:#f92672">.</span>loads(rabbit_queues<span style="color:#f92672">.</span>queue[corr_id])}
        <span style="color:#66d9ef">else</span>:
            <span style="color:#66d9ef">return</span> {<span style="color:#e6db74">&#39;Status&#39;</span>: <span style="color:#ae81ff">404</span>, <span style="color:#e6db74">&#39;Message&#39;</span>: <span style="color:#e6db74">&#39;Erro no envio do method&#39;</span>}
</code></pre></div><h2 id="resumo-da-funcionalidade">Resumo da Funcionalidade</h2>
<p>E chegamos ao fim do envio de mensagens a fila. Como podem perceber, são muitas coisas divergentes sendo processadas, enviadas e recebidas ao mesmo tempo, podendo ser um pouco complexo de entender inicialmente. Basta montar o condigo na ordem que foi mostrada acima, e olhá-lo de uma visão panorâmica, que as peças se encaixarão.</p>
<p>Para facilitar um pouco mais, vou resumir em tópicos o que vai acontecer quando enviarmos uma mensagem para alguma fila.</p>
<ol>
<li>Será chamado o método <strong>rpc_async</strong> passando a mensagem e a fila que deverá ser enviada.</li>
<li>No <strong>__init__</strong> da classe <strong>RabbitQueue,</strong> estabelecemos uma conexão com servidor Rabbit, e declaramos um <strong>callback_queue</strong> exclusivamente para receber resposta da fila de controle. É criada uma thead que ficará monitorando a fila de controle.</li>
<li>No <strong>rpc_async</strong> é onde será feita a solicitação RPC.</li>
<li>Dentro do <strong>rpc_async</strong> é gerado um <strong>correlation_id</strong> exclusivo e o salvamos. O método <strong>_on_response</strong> usará esse valor para criar um dicionário, que será atribuído a <em>key.</em></li>
<li>Também no método <strong>rpc_async,</strong> publicamos a mensagem com duas propriedades, <em>reply_to</em> e <em>correlation_id</em>.</li>
<li>O <strong>callback_queue</strong> será marcado para que possamos receber respostas RPC.</li>
<li>O <strong>_process_data_events</strong> , terá a função de ficar monitorando a fila de controle para poder gravar o response do parâmetro <em>on_message_callback</em>, passado para o <strong>_on_response</strong>.</li>
<li>No <strong>_on_response</strong> , será montado um dicionário, que irá conter o <em>correlation_id</em> e o <em>body</em> capturado da fila de controle. O body será o response da fila.</li>
<li>Por fim, no arquivo <em>server.py,</em> será verificado se a variável <em>queue</em> contém alguma informação para ser repassada como response da requisição a API.</li>
</ol>
<p>Agora que já fizemos tanto a parte de conexão e criação das tabelas do banco de dados, quanto a conexão e criação das filas do rabbit, vou fazer um teste inicializando a API, verificando se todas as coisas que criamos estão rodando como deveriam.</p>
<p>Como quero testar utilizando os servidores que já estão rodando na instância OCI, liberei as portas dos serviços para que eu possa fazer o teste localmente de meu computador.</p>
<p><img src="/images/microservice_project/img30.jpg" alt="img30"></p>
<p>Após rodar a API aparecerão algumas informações como a conexão com o rabbit e a criação das filas feitas, e também informações sobre o Flask.</p>
<p><img src="/images/microservice_project/img31.jpg" alt="img31"></p>
<p>Já na Manager do rabbit podemos ver a criação das filas <em>order</em> e <em>user</em>, juntamente com a fila de controle.</p>
<p><img src="/images/microservice_project/img32.jpg" alt="img32"></p>
<p>E no PgAdmin fiz um select para verificar se as tabelas foram criadas.</p>
<p><img src="/images/microservice_project/img33.jpg" alt="img33"></p>
<p><img src="/images/microservice_project/img34.jpg" alt="img34"></p>
]]></content>
        </item>
        
        <item>
            <title>Microservice Project – Step 5</title>
            <link>https://patrickpiccini.github.io/posts/microservice_project_step05/</link>
            <pubDate>Thu, 30 Jun 2022 18:01:55 -0300</pubDate>
            
            <guid>https://patrickpiccini.github.io/posts/microservice_project_step05/</guid>
            <description>Table of Contents  Postgres  Create_tables   Rabbit MQ Redis Resumo   Como visto no Step4, foi iniciado os primeiros passos para interagir com a API gateway, e foi criado as configurações para a inicialização do container, quando for subir para a OCI.
Nesse passo, mostrarei como configurar a conexão com os servidores do Rabbit, Redis e Postgres, e como planejei a arquitetura de pastas e módulos para ter uma aplicação organizada.</description>
            <content type="html"><![CDATA[<p><img src="/images/microservice_project/microservices.png" alt="microservices"></p>
<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#postgres">Postgres</a>
<ul>
<li><a href="#create%5C_tables">Create_tables</a></li>
</ul>
</li>
<li><a href="#rabbit-mq">Rabbit MQ</a></li>
<li><a href="#redis">Redis</a></li>
<li><a href="#resumo">Resumo</a></li>
</ul>
<hr>
<p>Como visto no Step4, foi iniciado os primeiros passos para interagir com a API gateway, e foi criado as configurações para a inicialização do container, quando for subir para a OCI.</p>
<p>Nesse passo, mostrarei como configurar a conexão com os servidores do Rabbit, Redis e Postgres, e como planejei a arquitetura de pastas e módulos para ter uma aplicação organizada.</p>
<p>Dentro da pasta API, devemos criar uma subpasta chamada config com os seguintes arquivos:</p>
<pre><code class="language-Estrutura" data-lang="Estrutura">MS-application
└───API
    │   docker-compose-api.yml
    │   Dockerfile
    │   requirements.txt
    │   server.py
    │
    ├───config
    │       database_connection.py
    │       rabbitmq_connection.py
    │       redis_connection.py
    │       __init__.py
</code></pre><h2 id="postgres">Postgres</h2>
<p>Antes de continuar, deve-se ter certeza de que executou todas as instalações das bibliotecas, contidas no arquivo <em>requeriments.txt.</em></p>
<p>Para começarmos, devemos importar os módulos _psycopg2_e <em>os,</em> que iremos utilizar para a conexão.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> psycopg2<span style="color:#f92672">,</span> os
</code></pre></div><p>Como teremos que apontar o host do servidor Postgres para nossa aplicação, na criação do Dockerfile foi criado uma variável de ambiente chamada HOST_DATABASE, contendo o ip privado da instância da OCI. Porém, essa variável de ambiente só será utilizada em Produção. Sendo assim, criei uma variável dentro do arquivo <em>database_connection.py</em> contendo o ip público, somente para fins de desenvolvimento em Homologação, utilizando os serviços que já estão rodando.</p>
<p>Já que nos conectaremos a um banco de dados, essa deve ser uma das primeiras coisas que deve acontecer quando a API for inicializada. Para isso, criaremos uma classe chamada <em>ConnectionDatabase(),</em> onde em seu <em>__init__</em> iremos fazer esse processo de conexão.</p>
<p>Dentro da função connect da biblioteca psycopg2, vamos colocar os parâmetros <em>host,</em> que serão o ip da instancia OCI, <em>port</em> contendo a numeração padrão da porta postgres (já foi liberada a porta no OCI para a conexão externa), <em>batabase</em>, contendo o nome do banco, <em>user</em> e <em>password,</em> contendo usuário e senha que foi colocado na imagem que subimos do postgres.</p>
<p>Após o apontamento dos parâmetros obrigatórios para a conexão, criaremos um atributo chamado <em>cursor,</em> que será o responsável por executar qualquer interação com o banco de dados. Logo abaixo há um método <em>create_tables</em>, que criaremos logo em seguida. Para finalizar, tudo isso está dentro de um try-except, para caso haja alguma falha na conexão, seja lançado um except com o erro.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># HOST_DATABSE = os.environ[&#39;HOST_DATABASE&#39;]</span>
HOST_DATABSE <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;144.22.193.219&#39;</span>

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ConnectionDatabase</span>():

    <span style="color:#66d9ef">def</span> __init__(self):
        <span style="color:#66d9ef">try</span>:
            self<span style="color:#f92672">.</span>connection  <span style="color:#f92672">=</span> psycopg2<span style="color:#f92672">.</span>connect(
                host<span style="color:#f92672">=</span>HOST_DATABSE,
                port<span style="color:#f92672">=</span><span style="color:#ae81ff">5432</span>,
                database<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;baseapplication&#34;</span>,
                user<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;postgres&#34;</span>,
                password<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;postgres&#34;</span>)
            self<span style="color:#f92672">.</span>cursor <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>connection<span style="color:#f92672">.</span>cursor()
            <span style="color:#75715e"># start tables</span>
            self<span style="color:#f92672">.</span>create_tables()
            <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;[✓] Connected to Postgres&#39;</span>)
        <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> error:
            <span style="color:#66d9ef">print</span>(f<span style="color:#e6db74">&#39;[X] CONNECTING POSTGRES ERROR: {error}&#39;</span>)
</code></pre></div><h3 id="create_tables">Create_tables</h3>
<p>Antes de começar a fazer a função que criará as tabelas, vamos analisar o que precisará ser feito com o modelo ER abaixo:</p>
<p><img src="/images/microservice_project/img27.png" alt="img27"></p>
<p>Iremos criar uma estrutura simples. Serão duas tabelas, <em>users</em> e <em>orders</em>. Nelas conterão seus atributos, com seus determinados tipos. Note que na tabela orders, iremos herdar um atributo da tabela user, que será o <em>user_id</em>, onde na tabela user é a PrimaryKey. Já na tabela orders, o atributo herdado é o <em>user_id</em>, que será tratado como uma chave estrangeira (ForeignKey).</p>
<p>Em relação a cardinalidade vamos ter 1 usuário pode ter vários orders, e 1 order pode ter somente um usuário, representados pelos símbolos abaixo.</p>
<p><img src="/images/microservice_project/img28.jpg" alt="img28"></p>
<p>Após essa análise, devemos criar o método <em>create­_table, e criar as tabelas.</em> Para executar comandos SQL através da biblioteca, basta escrever em uma string o comando SQL que deseja executar, e passar como parâmetro para função <em>execute.</em> Visto isso, primeiramente criaremos um select da versão do Postgres, para que toda a vez que seja iniciado a conexão, seja mostrado a versão. Logo após, devemos criar um atributo contendo toda a query de criação das duas tabelas, baseada do modelo ER visto anteriormente. Sendo assim, como método já foi chamado no <em>__init__,</em> será criado as tabelas ao instanciar a classe <strong>ConnectionDatabase</strong>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">create_tables</span>(self):
        self<span style="color:#f92672">.</span>cursor<span style="color:#f92672">.</span>execute(<span style="color:#e6db74">&#34;SELECT version();&#34;</span>)
        record <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>cursor<span style="color:#f92672">.</span>fetchone()
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;[✓] You are connected to - &#34;</span>, record)

        create_table_query <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;&#39;
</span><span style="color:#e6db74">            CREATE TABLE IF NOT EXISTS users (
</span><span style="color:#e6db74">                user_id SERIAL NOT NULL,
</span><span style="color:#e6db74">                nick_name varchar(50) UNIQUE NOT NULL,
</span><span style="color:#e6db74">                password varchar(256) NOT NULL,
</span><span style="color:#e6db74">                full_name varchar(50) NOT NULL,
</span><span style="color:#e6db74">                cpf varchar(11) NOT NULL,
</span><span style="color:#e6db74">                email varchar(50) NOT NULL,
</span><span style="color:#e6db74">                phone_number varchar(50) NOT NULL,
</span><span style="color:#e6db74">                created_at TIMESTAMP,
</span><span style="color:#e6db74">                updated_at TIMESTAMP,
</span><span style="color:#e6db74">                PRIMARY KEY (user_id)
</span><span style="color:#e6db74">            );
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">            CREATE TABLE IF NOT EXISTS orders (
</span><span style="color:#e6db74">                order_id SERIAL NOT NULL,
</span><span style="color:#e6db74">                user_id integer NOT NULL,
</span><span style="color:#e6db74">                item_description varchar(256) NOT NULL,
</span><span style="color:#e6db74">                item_quantity integer NOT NULL,
</span><span style="color:#e6db74">                item_price integer NOT NULL,
</span><span style="color:#e6db74">                total_value integer NOT NULL,
</span><span style="color:#e6db74">                created_at TIMESTAMP,
</span><span style="color:#e6db74">                updated_at TIMESTAMP,
</span><span style="color:#e6db74">                PRIMARY KEY (order_id),
</span><span style="color:#e6db74">                FOREIGN KEY(user_id) REFERENCES users(user_id)
</span><span style="color:#e6db74">            );&#39;&#39;&#39;</span>
        
        self<span style="color:#f92672">.</span>cursor<span style="color:#f92672">.</span>execute(create_table_query)
        self<span style="color:#f92672">.</span>connection<span style="color:#f92672">.</span>commit()
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;[✓] Created tables on DataBase&#39;</span>)
</code></pre></div><h2 id="rabbit-mq">Rabbit MQ</h2>
<p>O Rabbit é um message borker open source fácil e leve de ser implementado, tanto local, quanto em nuvem. O rabbit suporta vários tipos de protocolo de mensagens, para haver facilidade na comunicação entre aplicações. Existem muitos outros recursos, porém, não irei detalhar eles nesse projeto.</p>
<p>Nesse momento, faremos somente a conexão com o servidor Rabbit, onde usaremos uma variável de ambiente como no postgres, no entanto ela será a HOST, contida no <strong>Dockerfile</strong>. Da mesma forma que na conexão do postgres, criei uma variável estática contendo o ip público, somente para desenvolver a aplicação local, utilizando o servidor que já estão rodando os serviços.</p>
<p>Começamos com a importação das bibliotecas necessárias e o apontamento da variável com o IP Público da instancia OCI.</p>
<p>import pika, os</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> pika<span style="color:#f92672">,</span> os

<span style="color:#75715e"># HOST_RABBIT = os.environ[&#39;HOST&#39;]</span>
HOST_DATABSE <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;144.22.193.219&#39;</span>
</code></pre></div><p>Agora iremos criar uma classe chamada <em>RabbitConnection(),</em> e faremos a conexão no método <em>__init__.</em> Utilizando o função de conexão da biblioteca pika chamada <em>BlockingConnection(),</em> passaremos como parâmetros, através do metodo <em>ConnectionParameters()</em> o host, contida na variável HOST_RABBIT, e a porta padrão 5672. Em seguida, será criado um atributo chamado <em>channel</em>, que será responsável por executar toda e qualquer interação com o servidor rabbit, tudo isso foi criado em um try-catch, para caso haja alguma falha na conexão, seja lançado um except com o erro</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">RabbitConnection</span>():

    <span style="color:#66d9ef">def</span> __init__(self) :
        <span style="color:#66d9ef">try</span>:
            self<span style="color:#f92672">.</span>connection <span style="color:#f92672">=</span> pika<span style="color:#f92672">.</span>BlockingConnection(
                pika<span style="color:#f92672">.</span>ConnectionParameters(host<span style="color:#f92672">=</span>HOST_RABBIT, port<span style="color:#f92672">=</span><span style="color:#ae81ff">5672</span>))
            self<span style="color:#f92672">.</span>channel <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>connection<span style="color:#f92672">.</span>channel()
            <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;[✓] Connected to RabbitMQ server&#39;</span>)
            
        <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> error:
            <span style="color:#66d9ef">print</span>(f<span style="color:#e6db74">&#39;[X] CONNECTING RABBIT MQ ERROR: {error}&#39;</span>)
</code></pre></div><h2 id="redis">Redis</h2>
<p>Redis é um armazenamento de estrutura de dados na memória de código aberto (licenciado BSD), usado como banco de dados, cache, agente de mensagens e mecanismo de streaming. Um dos serviços que se destaca é o cache, que iremos utilizar nessa aplicação.</p>
<p>Para criar a conexão com o servidor Redis, utilizaremos a variável de ambiente CACHE_REDIS_HOST, porém, para a fim de desenvolvimento, criarei uma variável local contendo o ip público da instancia.</p>
<p>Nessa configuração, iremos fazer algo um pouco diferente. Como o Redis e Flask conseguem trabalhar juntos ativamente, a configuração para a conexão ao servidor, será feita através do arquivo principal <em>server.py</em>. Contudo, será demonstrado como fazer isso no próximo passo.</p>
<p>No momento a configuração será a seguinte: Importar a biblioteca <em>os,</em> criar uma classe chamada <em>BaseConfig(),</em> e dentro dela, apontar as variáveis de ambiente contidas no Dockerfile, veja:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> os

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">BaseConfig</span>(object):
    CACHE_TYPE <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>environ[<span style="color:#e6db74">&#39;CACHE_TYPE&#39;</span>]
    CACHE_REDIS_HOST <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>environ[<span style="color:#e6db74">&#39;CACHE_REDIS_HOST&#39;</span>]
    CACHE_REDIS_PORT <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>environ[<span style="color:#e6db74">&#39;CACHE_REDIS_PORT&#39;</span>]
    CACHE_REDIS_DB <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>environ[<span style="color:#e6db74">&#39;CACHE_REDIS_DB&#39;</span>]
</code></pre></div><p>Como testarei localmente para homologação, criarei a mesma classe, porém, com atributos com valor estático do servidor.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">BaseConfig</span>(object):
    CACHE_TYPE <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;redis&#39;</span> 
    CACHE_REDIS_HOST <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;144.22.193.219&#39;</span>
    CACHE_REDIS_PORT <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;6379&#39;</span>
    CACHE_REDIS_DB <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</code></pre></div><h2 id="resumo">Resumo</h2>
<p>Nesse Step, criamos as conexões com os servidores Rabbit, Redis e Postgres que já estavam rodando a instancia da OCI. Criamos a conexão com o Postgres. Foi explanado o modelo de entidade relacional que posteriormente foi desenvolvido, criando as devidas tabelas planejadas. Vimos um breve resumo do que é o rabbit e criamos a conexão com o servidor que está rodando na OCI. E por fim, apontado a conexão com o Redis, porém não utilizaremos nesse momento.</p>
]]></content>
        </item>
        
        <item>
            <title>Microservice Project – Step 4</title>
            <link>https://patrickpiccini.github.io/posts/microservice_project_step04/</link>
            <pubDate>Thu, 23 Jun 2022 18:01:54 -0300</pubDate>
            
            <guid>https://patrickpiccini.github.io/posts/microservice_project_step04/</guid>
            <description>Table of Contents  Requirements Criação API Dockerfile Docker-Compose Resumo   Nesse passo, iremos começar a criar o rosto da API. Irei explicar como estruturei as rotas para a conexão utilizando Flask, e como funciona o disparo das funções das rotas. Criaremos a própria imagem para futuramente rodar a aplicação utilizando Dockerfile, juntamente a um Docker-Compose para subir as instancias Docker. Por fim, farei um teste de conexão localmente as rotas que criei.</description>
            <content type="html"><![CDATA[<p><img src="/images/microservice_project/microservices.png" alt="microservices"></p>
<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#requirements">Requirements</a></li>
<li><a href="#cria%C3%A7%C3%A3o-api">Criação API</a></li>
<li><a href="#dockerfile">Dockerfile</a></li>
<li><a href="#docker-compose">Docker-Compose</a></li>
<li><a href="#resumo">Resumo</a></li>
</ul>
<hr>
<p>Nesse passo, iremos começar a criar o rosto da API. Irei explicar como estruturei as rotas para a conexão utilizando Flask, e como funciona o disparo das funções das rotas. Criaremos a própria imagem para futuramente rodar a aplicação utilizando Dockerfile, juntamente a um Docker-Compose para subir as instancias Docker. Por fim, farei um teste de conexão localmente as rotas que criei.</p>
<p>No diretório raiz, criaremos a pasta API com os seguintes arquivos:</p>
<pre><code class="language-Estrutura" data-lang="Estrutura">MS-application
└───API
    │   docker-compose-api.yml
    │   Dockerfile
    │   requirements.txt
    │   server.py
</code></pre><h2 id="requirements">Requirements</h2>
<p>No arquivo <em>requeriments.txt</em> ficarão todas as instalações de bibliotecas e framework que serão utilizadas na aplicação da API. As bibliotecas devem ficar separadas por linha, visto que usaremos um comando para uma instalação recursiva.</p>
<pre><code class="language-requirements" data-lang="requirements">requirements.txt
   psycopg2-binary
   Flask-Caching
   threaded
   flask
   redis
   pika
   uuid
</code></pre><p>Comando para instalação:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">pip install -r requeriments.txt
</code></pre></div><h2 id="criação-api">Criação API</h2>
<p>Dentro o arquivo <em>server.py</em> iremos criar uma espécie de API-Gateway, onde ela será responsável apenas por distribuir as informações para as filas do rabbit. Cada rota terá sua funcionalidade, como <strong>create_user</strong> para criar um usuário, e <strong>show_all_user</strong> para mostrar todos os usuários. A mesma lógica será aplicada referente aos <strong>orders</strong> , como <strong>create_order, list_order</strong> e assim sucessivamente.</p>
<p>Mostrarei apenas a criação de uma das rotas, pois a estrutura será a mesma para todas as outras, basta alterar o nome da rota e função que será disparada após acessá-la.</p>
<p>Primeiro, deve-se importar o framework <strong>Flask</strong> juntamente a funcionalidade <strong>request.</strong></p>
<p>Devemos criar uma classe chamada <strong>Api_server</strong> e instanciar o Flask a variável <strong>app.</strong> Após isso, para definir uma rota iremos utilizar o @app.route(&quot;rota&quot;, method), onde apontaremos /user/create_user/ como destino, sendo o <strong>POST</strong> o único método que essa rota irá aceitar.</p>
<p>Abaixo da rota fica a função que será disparada após ser acessada, que nomearemos de <strong>create_user().</strong> Dentro da 'def', faremos uma verificação se o method é o mesmo que esperamos nessa função. Caso isso seja atendido, coloquei como teste, um return que apenas mostrará o que enviamos no corpo da requisição. Caso não atenda, será mostrado um erro referente ao método enviado.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> flask <span style="color:#f92672">import</span> Flask, request

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Api_server</span>():
    app <span style="color:#f92672">=</span> Flask(__name__)

    <span style="color:#a6e22e">@app.route</span>(<span style="color:#e6db74">&#34;/user/create_user/&#34;</span>, methods<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;POST&#39;</span>]) <span style="color:#75715e"># &lt;- rota que será acessada</span>
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">create_user</span>(): <span style="color:#75715e"># &lt;- metodo que será disparado ao acessar a rota acima </span>
        <span style="color:#66d9ef">if</span> request<span style="color:#f92672">.</span>method <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;POST&#39;</span>:
            payload <span style="color:#f92672">=</span> request<span style="color:#f92672">.</span>get_json()

            <span style="color:#66d9ef">return</span> {<span style="color:#e6db74">&#39;Status&#39;</span>: <span style="color:#ae81ff">200</span>, <span style="color:#e6db74">&#39;Message&#39;</span>: payload}
        <span style="color:#66d9ef">else</span>:
            <span style="color:#66d9ef">return</span> {<span style="color:#e6db74">&#39;Status&#39;</span>: <span style="color:#ae81ff">404</span>, <span style="color:#e6db74">&#39;Message&#39;</span>: <span style="color:#e6db74">&#39;Erro no envio do method&#39;</span>}
</code></pre></div><p>Para executar o servidor, nas ultimas linhas iremos instanciar a classe que criamos, e utilizaremos o comando app.run(host, porta), para definir o host e porta que irá rodar a API.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:

    APP <span style="color:#f92672">=</span> Api_server()
    APP<span style="color:#f92672">.</span>app<span style="color:#f92672">.</span>run(<span style="color:#e6db74">&#39;0.0.0.0&#39;</span>, <span style="color:#ae81ff">7000</span>)
</code></pre></div><p>Para testar, executei o arquivo <em>server.py</em> e enviei um JSON como corpo da requisição para a rota que criei anteriormente, juntamente ao método POST:</p>
<p><img src="/images/microservice_project/img25.jpg" alt="img25"></p>
<p><img src="/images/microservice_project/img26.jpg" alt="img26"></p>
<p>OBS: Criei todas as demais rotas, mas não irei exemplificar cada uma delas pois a funcionalidade é a mesma. Se tiverem curiosidade, basta ir ao repositório da aplicação e olhar as outras rotas.</p>
<h2 id="dockerfile">Dockerfile</h2>
<p>No arquivo <em>Dockerfile</em> iremos criar uma imagem personalizada, adequada a aplicação que criaremos:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-docker" data-lang="docker"><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> python:3.8-alpine                  &lt;- Imagem base utilizada</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> . /app/                            &lt;- cópia da pasta API para /app/<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENV</span> HOST<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;10.0.0.34&#39;</span>                    &lt;- ip privado <span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENV</span> HOST_DATABASE<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;10.5.0.11&#39;</span>           &lt;- ip <span style="color:#66d9ef">do</span> postgres<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENV</span> CACHE_TYPE<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;redis&#39;</span>                  &lt;- type <span style="color:#66d9ef">do</span> redis<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENV</span> CACHE_REDIS_HOST<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;10.0.0.25&#39;</span>        &lt;- ip <span style="color:#66d9ef">do</span> redis<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENV</span> CACHE_REDIS_PORT<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;6379&#39;</span>             &lt;- porta <span style="color:#66d9ef">do</span> redis<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENV</span> CACHE_REDIS_DB<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>

<span style="color:#66d9ef">EXPOSE</span><span style="color:#e6db74"> 7000                             &lt;- porta que será a API</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /app                            &lt;- diretório de trabalho</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> pip install --upgrade pip           &lt;- instalação <span style="color:#66d9ef">do</span> pip<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> pip install -r requirements.txt     &lt;- instalação das libs<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">CMD</span> python server.py                    &lt;- comando para iniciar a API<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><h2 id="docker-compose">Docker-Compose</h2>
<p>O Docker-Compose para subir a aplicação é bem simples. Terá apenas um service onde irá rodar o Dockerfile no '<em>build: . '</em>.A exposição da porta 7000, que será a porta da API, e apontamento da Network que foi criada no Docker-Compose, onde é preciso especificar que a rede que estará sendo utilizada é externa, na parte <em>external: true</em></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-docker" data-lang="docker">version: <span style="color:#e6db74">&#34;3.7&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>services:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>  api:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    build: .<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    ports:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      - <span style="color:#e6db74">&#34;7000:7000&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    networks:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      - internal-network<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>networks:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    internal-network:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>        external: true<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><h2 id="resumo">Resumo</h2>
<p>Nesse Step, criamos o arquivo <em>requeriments.txt</em> que é responsável por conter todas as bibliotecas que iremos utilizar. Foi explicado como funciona o sistema de rotas do Flask e também criamos uma rota como exemplificar. Por fim, desenvolvemos os arquivos Dockerfile e Docker-Compose, que serão responsáveis pela inicialização da API.</p>
]]></content>
        </item>
        
        <item>
            <title>Predição de Insuficiência Cardíaca</title>
            <link>https://patrickpiccini.github.io/posts/predicao_de_insuficiencia_cardiaca/</link>
            <pubDate>Tue, 21 Jun 2022 20:00:52 -0100</pubDate>
            
            <guid>https://patrickpiccini.github.io/posts/predicao_de_insuficiencia_cardiaca/</guid>
            <description>Table of Contents  DataSet Compreendendo o problema  Informações de atributo   Configuração Inicial Exploração Limpeza Discretização Visualização Quais atributos tem relação? Distribuição de algumas colunas do DataSet Calculo de Insuficiência Cardíaca Inicio de Treinamento de Modelos  Separação de Dados   Desision Tree  Medidas de seleção de atributo   Randon Fores Logistic Regression GaussianNB  Calculo do algoritmo   Matriz Confusão Cross-Validation Curva ROC Insigths   Projeto GitHub heart-failure-prediction</description>
            <content type="html"><![CDATA[<p><img src="/images/insuficiencia_cardiaca/img.jpg" alt="&ldquo;img&rdquo;"></p>
<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#dataset">DataSet</a></li>
<li><a href="#compreendendo-o-problema">Compreendendo o problema</a>
<ul>
<li><a href="#informa%C3%A7%C3%B5es-de-atributo">Informações de atributo</a></li>
</ul>
</li>
<li><a href="#configura%C3%A7%C3%A3o-inicial">Configuração Inicial</a></li>
<li><a href="#explora%C3%A7%C3%A3o">Exploração</a></li>
<li><a href="#limpeza">Limpeza</a></li>
<li><a href="#discretiza%C3%A7%C3%A3o">Discretização</a></li>
<li><a href="#visualiza%C3%A7%C3%A3o">Visualização</a></li>
<li><a href="#quais-atributos-tem-rela%C3%A7%C3%A3o">Quais atributos tem relação?</a></li>
<li><a href="#distribui%C3%A7%C3%A3o-de-algumas-colunas-do-dataset">Distribuição de algumas colunas do DataSet</a></li>
<li><a href="#calculo-de-insufici%C3%AAncia-cardiaca">Calculo de Insuficiência Cardíaca</a></li>
<li><a href="#inicio-de-treinamento-de-modelos">Inicio de Treinamento de Modelos</a>
<ul>
<li><a href="#separa%C3%A7%C3%A3o-de-dados">Separação de Dados</a></li>
</ul>
</li>
<li><a href="#---------desision-tree-train---------">Desision Tree</a>
<ul>
<li><a href="#medidas-de-sele%C3%A7%C3%A3o-de-atributo">Medidas de seleção de atributo</a></li>
</ul>
</li>
<li><a href="#---------randon-forest-train---------">Randon Fores</a></li>
<li><a href="#---------logistic-regression-train---------">Logistic Regression</a></li>
<li><a href="#---------gaussiannb-train---------">GaussianNB</a>
<ul>
<li><a href="#calculo-do-algoritmo">Calculo do algoritmo</a></li>
</ul>
</li>
<li><a href="#matriz-confus%C3%A3o">Matriz Confusão</a></li>
<li><a href="#cross-validation">Cross-Validation</a></li>
<li><a href="#curva-roc">Curva ROC</a></li>
<li><a href="#insigths">Insigths</a></li>
</ul>
<hr>
<h2 id="projeto-github">Projeto GitHub</h2>
<p><a href="https://github.com/patrickpiccini/heart-failure-prediction">heart-failure-prediction</a></p>
<p>Olá, meu nome é Patrick Piccini, e seja bem vindo a mais um projeto de Data Science.</p>
<p>O que iremos ver nesse Projeto:</p>
<ul>
<li>📚 DataSet</li>
<li>🧠 Compreendendo o problema</li>
<li>⛏ Analise Exploratoria de Dados</li>
<li>🎲 Manipulação de dados</li>
<li>📊 Visualização de dados</li>
<li>🧮 Algoritmos de Classificação</li>
<li>😱 Insigths</li>
</ul>
<h2 id="dataset">DataSet</h2>
<p><a href="https://www.kaggle.com/datasets/fedesoriano/heart-failure-prediction">Heart Failure Prediction Dataset - Kaggle</a></p>
<h2 id="compreendendo-o-problema">Compreendendo o problema</h2>
<p>As doenças cardiovasculares (DCVs) são a causa número 1 de morte em todo o mundo, levando cerca de 17,9 milhões de vidas a cada ano, o que representa 31% de todas as mortes em todo o mundo. Quatro das mortes por 5CVD são devido a ataques cardíacos e derrames, e um terço dessas mortes ocorre prematuramente em pessoas com menos de 70 anos de idade. A insuficiência cardíaca é um evento comum causado por DCV e este conjunto de dados contém 11 características que podem ser usadas para prever uma possível doença cardíaca.</p>
<p>Pessoas com doença cardiovascular ou com alto risco cardiovascular (devido à presença de um ou mais fatores de risco, como hipertensão, diabetes, hiperlipidemia ou doença já estabelecida) precisam de detecção e gerenciamento precoces, onde um modelo de aprendizado de máquina pode ser de grande ajuda.</p>
<p><img src="https://lh3.googleusercontent.com/LkeF783CO8iu1R8Q3fB-Kqo9L2x6FWcEYa-5NijcXqgNjaD3gCuixMwzW9ciVlikGNrdI1c1_uemz7xCeqV7I8DCKjl9ZmcKXt3ql9A4Bd-DmIfKZbDFp-yI8O0uvlorXYSbrkuL=s0" alt="&ldquo;img&rdquo;"></p>
<h3 id="informações-de-atributo">Informações de atributo</h3>
<ul>
<li><strong>Age:</strong> idade do paciente [anos]</li>
<li><strong>Sex:</strong> sexo do paciente [M: Masculino, F: Feminino]</li>
<li><strong>ChestPainType:</strong> tipo de dor no peito [TA: Angina Típica, ATA: Angina Atípica, NAP: Dor Não Anginosa, ASY: Assintomática]</li>
<li><strong>RestingBP:</strong> pressão arterial de repouso [mm Hg]</li>
<li><strong>Cholesterol:</strong> colesterol sérico [mm/dl]</li>
<li><strong>FastingBS:</strong> glicemia em jejum [1: se FastingBS &gt; 120 mg/dl, 0: caso contrário]</li>
<li><strong>RestingECG:</strong> resultados do eletrocardiograma de repouso [Normal: normal, ST: com anormalidade da onda ST-T (inversões da onda T e/ou elevação ou depressão do ST &gt; 0,05 mV), HVE: mostrando provável ou definitiva hipertrofia ventricular esquerda pelos critérios de Estes]</li>
<li><strong>MaxHR:</strong> frequência cardíaca máxima alcançada [Valor numérico entre 60 e 202]</li>
<li>**ExerciseAngina: angina induzida por exercício [S: Sim, N: Não]</li>
<li><strong>Oldpeak:</strong> pico antigo = ST [Valor numérico medido em depressão]</li>
<li><strong>ST_Slope:</strong> inclinação do segmento ST do exercício de pico [Up: upsloping, Flat: flat, Down: downsloping]</li>
<li><strong>HeartDisease:</strong> classe de saída [1: doença cardíaca, 0: normal]</li>
</ul>
<h2 id="configuração-inicial">Configuração Inicial</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> numpy <span style="color:#f92672">as</span> np 
<span style="color:#f92672">import</span> pandas <span style="color:#f92672">as</span> pd
<span style="color:#f92672">import</span> seaborn <span style="color:#f92672">as</span> sns
<span style="color:#f92672">from</span> sklearn <span style="color:#f92672">import</span> tree
<span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#f92672">as</span> plt
<span style="color:#f92672">from</span> sklearn.naive_bayes <span style="color:#f92672">import</span> GaussianNB
<span style="color:#f92672">from</span> sklearn.tree <span style="color:#f92672">import</span> DecisionTreeClassifier
<span style="color:#f92672">from</span> sklearn.model_selection <span style="color:#f92672">import</span> train_test_split, cross_val_score
<span style="color:#f92672">from</span> sklearn.linear_model <span style="color:#f92672">import</span> LogisticRegression
<span style="color:#f92672">from</span> sklearn.ensemble <span style="color:#f92672">import</span> RandomForestClassifier
<span style="color:#f92672">from</span> sklearn.metrics <span style="color:#f92672">import</span> accuracy_score,precision_score,recall_score,f1_score, classification_report, confusion_matrix, ConfusionMatrixDisplay, RocCurveDisplay, precision_recall_fscore_support

heart_df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_csv(<span style="color:#e6db74">&#39;./dataset/heart.csv&#39;</span>, sep<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;,&#39;</span>)
</code></pre></div><ul>
<li>Iremos renomear o nome das colunas para Português, onde facilitará na hora do entendimento da informação dos dados.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">columns <span style="color:#f92672">=</span> {
    <span style="color:#e6db74">&#39;Age&#39;</span>: <span style="color:#e6db74">&#39;Idade&#39;</span>,
    <span style="color:#e6db74">&#39;Sex&#39;</span>: <span style="color:#e6db74">&#39;Sexo&#39;</span>, 
    <span style="color:#e6db74">&#39;ChestPainType&#39;</span>: <span style="color:#e6db74">&#39;Tipo_Dor_Peito&#39;</span>, 
    <span style="color:#e6db74">&#39;RestingBP&#39;</span>: <span style="color:#e6db74">&#39;RepousoPA&#39;</span>, 
    <span style="color:#e6db74">&#39;Cholesterol&#39;</span>: <span style="color:#e6db74">&#39;Colesterol&#39;</span>, 
    <span style="color:#e6db74">&#39;FastingBS&#39;</span>: <span style="color:#e6db74">&#39;FastingBS&#39;</span>,
    <span style="color:#e6db74">&#39;RestingECG&#39;</span>: <span style="color:#e6db74">&#39;RestingECG&#39;</span>, 
    <span style="color:#e6db74">&#39;MaxHR&#39;</span>: <span style="color:#e6db74">&#39;Frequencia_Cardiaca_Max&#39;</span>, 
    <span style="color:#e6db74">&#39;ExerciseAngina&#39;</span>: <span style="color:#e6db74">&#39;Exercicio_Angina&#39;</span>, 
    <span style="color:#e6db74">&#39;Oldpeak&#39;</span>: <span style="color:#e6db74">&#39;Pico_Antigo&#39;</span>, 
    <span style="color:#e6db74">&#39;ST_Slope&#39;</span>: <span style="color:#e6db74">&#39;ST_Slope&#39;</span>,
    <span style="color:#e6db74">&#39;HeartDisease&#39;</span>: <span style="color:#e6db74">&#39;Doenca_Cardiaca&#39;</span>
}

heart_df <span style="color:#f92672">=</span> heart_df<span style="color:#f92672">.</span>rename(columns<span style="color:#f92672">=</span>columns)
heart_df<span style="color:#f92672">.</span>head(<span style="color:#ae81ff">5</span>)
</code></pre></div><p><img src="/images/insuficiencia_cardiaca/img1.png" alt="&ldquo;img1&rdquo;"></p>
<h2 id="exploração">Exploração</h2>
<ul>
<li>Verificaremos a quantidade de colunas e linhas existentes no DataSet.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;Colunas: </span><span style="color:#e6db74">%s</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">%</span> heart_df<span style="color:#f92672">.</span>shape[<span style="color:#ae81ff">1</span>])
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;Linhas: </span><span style="color:#e6db74">%s</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">%</span> heart_df<span style="color:#f92672">.</span>shape[<span style="color:#ae81ff">0</span>])
</code></pre></div><ul>
<li>Colunas: 12</li>
<li>Linhas: 918</li>
</ul>
<p>Com o comando <strong>&ldquo;describe&rdquo;</strong>, iremos obter um resumo de estatísticas descritivas do DataFrame. Isso inclui média, contagem, desvio padrão, percentis e valores mín.-máx. de todos os recursos. Com o <strong>&quot;.T&rdquo;</strong> apenas iremos rotacionar o resultado do <strong>&ldquo;describe&rdquo;</strong>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">heart_df<span style="color:#f92672">.</span>describe()<span style="color:#f92672">.</span>T
</code></pre></div><p><img src="/images/insuficiencia_cardiaca/img2.png" alt="&ldquo;img2&rdquo;"></p>
<p>Abaixo veremos mais algumas informações referentes a cada coluna do DataFrame.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">heart_df<span style="color:#f92672">.</span>info()
</code></pre></div><p><img src="/images/insuficiencia_cardiaca/img3.png" alt="&ldquo;img3&rdquo;"></p>
<h2 id="limpeza">Limpeza</h2>
<p>Percebemos que não existem valores NaN em nosso DataSet, porém, existem muitos valores do colesterol igual a 0 (Zero). Visto isso, para não perdermos informações, substituiremos os valores de 0 (Zero) para um valor &ldquo;Saudável&rdquo; sendo 130.</p>
<p>Para termos uma visualização de como irá influenciar a limpeza de dados, iremos salvar os dois estados da coluna colesterol, para posteriormente plotarmos um grafico.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">print</span>(heart_df<span style="color:#f92672">.</span>notna()<span style="color:#f92672">.</span>value_counts())
</code></pre></div><p><img src="/images/insuficiencia_cardiaca/img4.png" alt="&ldquo;img4&rdquo;"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">colesterol_0 <span style="color:#f92672">=</span> heart_df<span style="color:#f92672">.</span>Colesterol
heart_df<span style="color:#f92672">.</span>Colesterol <span style="color:#f92672">=</span> heart_df<span style="color:#f92672">.</span>Colesterol<span style="color:#f92672">.</span>replace(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">130</span>)
colesterol_no_0 <span style="color:#f92672">=</span> heart_df<span style="color:#f92672">.</span>Colesterol
</code></pre></div><h2 id="discretização">Discretização</h2>
<p>Formar conjuntos de idade para classificação.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;Idade máxima: &#39;</span>,heart_df<span style="color:#f92672">.</span>Idade<span style="color:#f92672">.</span>max())
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;Idade MINIMA: &#39;</span>,heart_df<span style="color:#f92672">.</span>Idade<span style="color:#f92672">.</span>min())
</code></pre></div><ul>
<li>Idade máxima:  77</li>
<li>Idade MINIMA:  28</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">bins <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">12</span>,<span style="color:#ae81ff">20</span>,<span style="color:#ae81ff">60</span>,<span style="color:#ae81ff">100</span>]
labels <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;crianca&#39;</span>,<span style="color:#e6db74">&#39;adolecente&#39;</span>,<span style="color:#e6db74">&#39;adulto&#39;</span>,<span style="color:#e6db74">&#39;idoso&#39;</span>]
conjuto_idade <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>cut(heart_df[<span style="color:#e6db74">&#39;Idade&#39;</span>]<span style="color:#f92672">.</span>to_numpy(), bins<span style="color:#f92672">=</span>bins, labels<span style="color:#f92672">=</span>labels)

heart_df[<span style="color:#e6db74">&#39;conjunto_idade&#39;</span>] <span style="color:#f92672">=</span> conjuto_idade

heart_df<span style="color:#f92672">.</span>head(<span style="color:#ae81ff">3</span>)
</code></pre></div><p><img src="/images/insuficiencia_cardiaca/img5.png" alt="&ldquo;img5&rdquo;"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">heart_df<span style="color:#f92672">.</span>conjunto_idade<span style="color:#f92672">.</span>value_counts()
</code></pre></div><p><img src="/images/insuficiencia_cardiaca/img6.png" alt="&ldquo;img6&rdquo;"></p>
<h1 id="visualização">Visualização</h1>
<p>Nesse passo da AED iremos plotar alguns gráficos onde consiguiremos ter uma análise das informações um pouco mais dinâmica, e com isso conseguiremos criar alguns insigths de nossas informações</p>
<ul>
<li>Iremos calcular a porcentagem de casos de pessoas com Insuficiência Cardíacas e sem Insuficiência Cardía</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;paciente com Insuficiência Cardíacas:&#34;</span>, heart_df<span style="color:#f92672">.</span>query(<span style="color:#e6db74">&#39;Doenca_Cardiaca == 1&#39;</span>)<span style="color:#f92672">.</span>shape[<span style="color:#ae81ff">0</span>])
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;paciente sem Insuficiência Cardíaca:&#34;</span>, heart_df<span style="color:#f92672">.</span>query(<span style="color:#e6db74">&#39;Doenca_Cardiaca == 0&#39;</span>)<span style="color:#f92672">.</span>shape[<span style="color:#ae81ff">0</span>])

labels <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">0</span>]
sizes <span style="color:#f92672">=</span> heart_df[<span style="color:#e6db74">&#39;Doenca_Cardiaca&#39;</span>]<span style="color:#f92672">.</span>value_counts()
explode <span style="color:#f92672">=</span> (<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0.1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>)

fig1, ax1 <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>subplots()
ax1<span style="color:#f92672">.</span>pie(sizes, labels<span style="color:#f92672">=</span>labels, autopct<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;</span><span style="color:#e6db74">%1.1f%%</span><span style="color:#e6db74">&#39;</span>,shadow<span style="color:#f92672">=</span>True, startangle<span style="color:#f92672">=</span><span style="color:#ae81ff">90</span> ,colors<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;#E74C3C&#39;</span>,<span style="color:#e6db74">&#39;#3498DB&#39;</span>])
ax1<span style="color:#f92672">.</span>axis(<span style="color:#e6db74">&#39;equal&#39;</span>)  <span style="color:#75715e"># Equal aspect ratio ensures that pie is drawn as a circle.</span>
plt<span style="color:#f92672">.</span>show()
</code></pre></div><ul>
<li>paciente com Insuficiência Cardíacas: 508</li>
<li>paciente sem Insuficiência Cardíaca: 410</li>
</ul>
<p><img src="/images/insuficiencia_cardiaca/img7.png" alt="&ldquo;img7&rdquo;"></p>
<h2 id="quais-atributos-tem-relação">Quais atributos tem relação?</h2>
<p>Através de uma HeatMap (Mapa de calor), verificaremos quais as relações que os atributos tem com a coluna alvo, que no nosso caso é a _DoencaCardiaca</p>
<p>Podemos ver que a Doença Cardíaca tem grande relação com uma &ldquo;Pico_Antigo&rdquo; alta e tambem uma relação com &ldquo;Idade&rdquo;. Há uma relação boa com &ldquo;&quot;,&ldquo;FastingBS&rdquo; e &ldquo;RepousoPA&rdquo;.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">10</span>,<span style="color:#ae81ff">6</span>))

sns<span style="color:#f92672">.</span>heatmap(heart_df<span style="color:#f92672">.</span>corr(), annot<span style="color:#f92672">=</span>True, cmap <span style="color:#f92672">=</span><span style="color:#e6db74">&#34;RdYlBu&#34;</span>)
plt<span style="color:#f92672">.</span>show()
</code></pre></div><p><img src="/images/insuficiencia_cardiaca/img8.png" alt="&ldquo;img8&rdquo;"></p>
<h2 id="distribuição-de-algumas-colunas-do-dataset">Distribuição de algumas colunas do DataSet</h2>
<p>Vendo os gráficos plotados, conseguimos perceber o volume de informações sobre determinado valor, de acordo com sua coluna.</p>
<p>Uma coisa que podemos notar no gráfico do colesterol, é que há uma grande quantidade de dados com o valor 0 ou negativo. Fazendo um pesquisa rápida na internet, entende-se que existe certo consenso de que valores do LDL-Colesterol (¨colesterol ruim”) menores que 40 mg/dl no sangue são considerados baixos, entretanto, estudos recentes não demonstraram efeitos colaterais graves mesmo quando esse valor foi reduzido até 25mg/dl. Sendo assim, esses dados zeros ou negativos certamente estão errados, e com isso, podemos tratá-los como Outliers.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">fig, axes <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>subplots(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">10</span>))
sns<span style="color:#f92672">.</span>kdeplot(heart_df[<span style="color:#e6db74">&#39;Idade&#39;</span>], ax <span style="color:#f92672">=</span> axes[<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>] ,shade<span style="color:#f92672">=</span>True, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;r&#39;</span>)
sns<span style="color:#f92672">.</span>kdeplot(heart_df[<span style="color:#e6db74">&#39;RepousoPA&#39;</span>], ax <span style="color:#f92672">=</span> axes[<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>], shade<span style="color:#f92672">=</span>True, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;rebeccapurple&#39;</span>)
sns<span style="color:#f92672">.</span>kdeplot(heart_df[<span style="color:#e6db74">&#39;Colesterol&#39;</span>], ax <span style="color:#f92672">=</span> axes[<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">2</span>], shade<span style="color:#f92672">=</span>True, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;g&#39;</span>)
sns<span style="color:#f92672">.</span>kdeplot(heart_df[<span style="color:#e6db74">&#39;Frequencia_Cardiaca_Max&#39;</span>], ax <span style="color:#f92672">=</span> axes[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>], shade<span style="color:#f92672">=</span>True, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;darkorange&#39;</span>)
sns<span style="color:#f92672">.</span>kdeplot(heart_df[<span style="color:#e6db74">&#39;Pico_Antigo&#39;</span>], ax <span style="color:#f92672">=</span> axes[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>], shade<span style="color:#f92672">=</span>True, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;blue&#39;</span>)
plt<span style="color:#f92672">.</span>show()
</code></pre></div><p><img src="/images/insuficiencia_cardiaca/img9.png" alt="&ldquo;img9&rdquo;"></p>
<p>Antes de continuarmos, vamos ver a diferença dos gráficos referente ao Colesterol, visto que tivemos alguns valores modificados no passo de Limpeza dos dados. Apenas relembrando, trocamos os valores 0 do colesterol, para um valor &ldquo;saudável&rdquo;, sendo esse 130.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">fig, axes <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>subplots(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">5</span>))
sns<span style="color:#f92672">.</span>kdeplot(colesterol_0, ax <span style="color:#f92672">=</span> axes[<span style="color:#ae81ff">0</span>], shade<span style="color:#f92672">=</span>True, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;r&#39;</span>)
sns<span style="color:#f92672">.</span>kdeplot(colesterol_no_0, ax <span style="color:#f92672">=</span> axes[<span style="color:#ae81ff">1</span>], shade<span style="color:#f92672">=</span>True, color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;g&#39;</span>)
plt<span style="color:#f92672">.</span>show()
</code></pre></div><p><img src="/images/insuficiencia_cardiaca/img10.png" alt="&ldquo;img10&rdquo;"></p>
<h2 id="calculo-de-insuficiência-cardíaca">Calculo de Insuficiência Cardíaca</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">fig, axes <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>subplots(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">2</span>, figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">10</span>))

sns<span style="color:#f92672">.</span>countplot(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Sexo&#34;</span>, hue<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Doenca_Cardiaca&#34;</span>, data<span style="color:#f92672">=</span>heart_df, ax<span style="color:#f92672">=</span>axes[<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>] ,palette<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;#3498DB&#39;</span>,<span style="color:#e6db74">&#39;#E74C3C&#39;</span>])
sns<span style="color:#f92672">.</span>countplot(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Tipo_Dor_Peito&#34;</span>, hue<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Doenca_Cardiaca&#34;</span>, data<span style="color:#f92672">=</span>heart_df, ax<span style="color:#f92672">=</span>axes[<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>] ,palette<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;#3498DB&#39;</span>,<span style="color:#e6db74">&#39;#E74C3C&#39;</span>])
sns<span style="color:#f92672">.</span>countplot(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;RestingECG&#34;</span>, hue<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Doenca_Cardiaca&#34;</span>, data<span style="color:#f92672">=</span>heart_df, ax<span style="color:#f92672">=</span>axes[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>] ,palette<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;#3498DB&#39;</span>,<span style="color:#e6db74">&#39;#E74C3C&#39;</span>])
sns<span style="color:#f92672">.</span>countplot(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;ST_Slope&#34;</span>, hue<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Doenca_Cardiaca&#34;</span>, data<span style="color:#f92672">=</span>heart_df, ax<span style="color:#f92672">=</span>axes[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>] ,palette<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;#3498DB&#39;</span>,<span style="color:#e6db74">&#39;#E74C3C&#39;</span>])
sns<span style="color:#f92672">.</span>countplot(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;conjunto_idade&#34;</span>, hue<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Doenca_Cardiaca&#34;</span>, data<span style="color:#f92672">=</span>heart_df, ax<span style="color:#f92672">=</span>axes[<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">0</span>] ,palette<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;#3498DB&#39;</span>,<span style="color:#e6db74">&#39;#E74C3C&#39;</span>])
plt<span style="color:#f92672">.</span>show()
</code></pre></div><p><img src="/images/insuficiencia_cardiaca/img11.png" alt="&ldquo;img11&rdquo;"></p>
<h3 id="grafico-sexo">Grafico Sexo</h3>
<p>odemos perceber que Homens tem maiores chances de ter Insuficiencia Cardíaca mesmo que tenham maior volume de dados. Já as Mulheres tem grandes chances de NÃO ter algum problema cardíaco. Nota-se que os valores de casos sem a doença chega a ser 3/4 do conjunto de Mulheres</p>
<h3 id="grafico-tipo-de-dor-no-peito">Grafico Tipo de dor no peito</h3>
<ul>
<li>TA: Angina Típica, ATA: Angina Atípica, NAP: Dor Não Anginosa, ASY: Assintomática</li>
</ul>
<p>Nota-se que de toda a classe Tipo_Dor_Peito a que mais se destaca é o classificador ASY, que representa uma dor Assintomática, em outras palavras, uma dor com poucos sintomas, ou pouco visivel. Vemos que o risco de ter insuficiência cardíaca é extremamente alta contendo esse tipo de dor.</p>
<p>No tipo TA, mesmo tendo um pequeno volume de dados, percebe-se que a quantidade de casos com e sem insuficiência é quase balanceado. Para esses casos deve-se ter mais atenção na hora dos diagnósticos para que o paciente não seja classificado sem a doença cardíaca.</p>
<p>Devemos perceber que nos tipos NAP e ATA temos um menor volume de dados contendo Insuficiência Cardíaca comparado com ASY e TA.</p>
<h3 id="restingecg">RestingECG</h3>
<ul>
<li>Resultados do eletrocardiograma de repouso
[Normal: normal, ST: com anormalidade da onda ST-T (inversões da onda T e/ou elevação ou depressão do ST &gt; 0,05 mV), HVE: mostrando provável ou definitiva hipertrofia ventricular esquerda pelos critérios de Estes]</li>
</ul>
<p>dentifica-se que a maioria dos pacientes, independente do resultado do eletrocardiograma, possuem chances de ter algum problema cardíaco.</p>
<h3 id="grafico-st_stope">Grafico ST_Stope</h3>
<ul>
<li>Exame de Teste de Esforço</li>
<li>ST_Slope: inclinação do segmento ST do exercício de pico [Up: upsloping, Flat: flat, Down: downsloping]</li>
</ul>
<p>Nos resultados do ST_Slope pessoas com segmento ST maiores(UP), não tendem a ter insuficiencia cardíaca, visto que os bastimentos estão com um BPM alto.</p>
<p>Se mesmo no Teste de esforço físico o segmento ST estiver sem muita variação(Flat), a tendência a ter insuficiência cardíaca é bem alta. A mesma coisa quando o segmento ST estiver baixo(Down).</p>
<h3 id="conjunto-idade">Conjunto Idade</h3>
<p>O conjunto de idade foi criado na parte de discretização justamente para categorizar cara pessoa por seu devido conjunto de idade sende eles:</p>
<ul>
<li>[Criança - 0 à 12</li>
<li>[Adolecente] - 12 à 20</li>
<li>[Adulto] - 20 à 60</li>
<li>[Idoso] - 60 à 100</li>
</ul>
<p>Como podemos perceber, no DataSet não ha nenhum registro de pessoas da categoria &ldquo;Criança&rdquo; e &ldquo;Adolecente&rdquo;. Nota-se que a 50% de de todos os Adultos tem alguma insuficiência cardíaca, e tambem cerca de 75% dos Idosos tambem foram diagnosticado com essa doença.</p>
<p>Iremos retirar a coluna de idade, visto que com a nova coluna de &ldquo;conjunto_idade&rdquo; poderemos utilizar facilmente no treinamento dos modelos.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">heart_df<span style="color:#f92672">.</span>drop(columns<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;Idade&#39;</span>], inplace<span style="color:#f92672">=</span>True)
</code></pre></div><h2 id="inicio-de-treinamento-de-modelos">Inicio de Treinamento de Modelos</h2>
<p><img src="https://i0.wp.com/memetizando.com.br/wp-content/uploads/2020/03/meme-eu-na-academia.gif" alt="&ldquo;gif&rdquo;"></p>
<h3 id="separação-de-dados">Separação de Dados</h3>
<p>Antes de começarmos a criar qualquer modelo, precisaremos separar os dados do Dataframe em dois grupos, um de Treino e outro de Teste.</p>
<ul>
<li>
<p>Dados de Treino
Os dados de treino são responsáveis por serem as informações que o Algoritmo de Machine Learnig usara para a criação de um modelo. No nosso caso utilizamos 70% do DataSet para o treinamento.</p>
</li>
<li>
<p>Dados de Teste
Os dados de teste são aplicados ao modelo criado, simulando previsões reais que o modelo realizará, fazendo com que seja verificado o desempenho real do modelo. Utilizaremos 30% do DataSet para Teste.</p>
</li>
<li>
<p>Separando dados de Treino e Teste para criação de modelos.</p>
</li>
<li>
<p>Alterando o type das informações para &lsquo;Category&rsquo;.</p>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">y <span style="color:#f92672">=</span> heart_df[<span style="color:#e6db74">&#39;Doenca_Cardiaca&#39;</span>]<span style="color:#f92672">.</span>values
heart_df<span style="color:#f92672">.</span>drop(columns<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;Doenca_Cardiaca&#39;</span>], inplace<span style="color:#f92672">=</span>True)

X <span style="color:#f92672">=</span> heart_df

X_train, X_test, y_train, y_test <span style="color:#f92672">=</span> train_test_split(X, y, test_size<span style="color:#f92672">=</span><span style="color:#ae81ff">0.3</span>, random_state<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, stratify<span style="color:#f92672">=</span>y)

<span style="color:#66d9ef">for</span> c <span style="color:#f92672">in</span> X_test<span style="color:#f92672">.</span>columns:
    <span style="color:#66d9ef">if</span> type(X_test[c]<span style="color:#f92672">.</span>iloc[<span style="color:#ae81ff">0</span>]) <span style="color:#f92672">==</span> str:
        X_test[c] <span style="color:#f92672">=</span> X_test[c]<span style="color:#f92672">.</span>astype(<span style="color:#e6db74">&#39;category&#39;</span>)
        X_test[c] <span style="color:#f92672">=</span> X_test[c]<span style="color:#f92672">.</span>cat<span style="color:#f92672">.</span>codes
        
<span style="color:#66d9ef">for</span> c <span style="color:#f92672">in</span> X_train<span style="color:#f92672">.</span>columns:
    <span style="color:#66d9ef">if</span> type(X_train[c]<span style="color:#f92672">.</span>iloc[<span style="color:#ae81ff">0</span>]) <span style="color:#f92672">==</span> str:
        X_train[c] <span style="color:#f92672">=</span> X_train[c]<span style="color:#f92672">.</span>astype(<span style="color:#e6db74">&#39;category&#39;</span>)
        X_train[c] <span style="color:#f92672">=</span> X_train[c]<span style="color:#f92672">.</span>cat<span style="color:#f92672">.</span>codes
</code></pre></div><h2 id="---------desision-tree-train---------">&mdash;&mdash;&ndash; Desision Tree Train &mdash;&mdash;&ndash;</h2>
<p><img src="https://c.tenor.com/sndiWcujL3kAAAAC/cyanide-and-happiness-ladder.gif" alt=""></p>
<p>O algoritmo Árvore de Decisão pertence à família de algoritmos de aprendizado SUPERVISIONADO. Ao contrário de outros algoritmos de aprendizado supervisionado, o algoritmo de árvore de decisão também pode ser usado para resolver problemas de regressão e classificação . O objetivo de usar uma Árvore de Decisão é criar um modelo de treinamento que possa ser usado para prever a classe ou valor da variável de destino aprendendo regras de decisão simples inferidas de dados anteriores (dados de treinamento). Em Árvores de Decisão, para prever um rótulo de classe para um registro, começamos da raiz da árvore. Comparamos os valores do atributo root com o atributo do registro. Com base na comparação, seguimos o ramo correspondente a esse valor e saltamos para o próximo nó.</p>
<h3 id="medidas-de-seleção-de-atributo">Medidas de seleção de atributo</h3>
<p>Se o conjunto de dados consiste em N atributos, decidir qual atributo colocar na raiz ou em diferentes níveis da árvore como nós internos é uma etapa complicada. Apenas selecionar aleatoriamente qualquer nó para ser a raiz não pode resolver o problema. Se seguirmos uma abordagem aleatória, isso pode nos dar resultados ruins com baixa precisão.</p>
<p>Nesses cassos usamos alguns critérios para fazer calculos diferentes na hora da distribuição, sendo algum deles:</p>
<p><img src="/images/insuficiencia_cardiaca/img12.png" alt="img12"></p>
<ul>
<li><em><strong>p(i/t)</strong></em>  &ndash;&gt; peso = quantia de indice da classe/ quantia todal de indices</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">tree_view <span style="color:#f92672">=</span> DecisionTreeClassifier(criterion<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;gini&#39;</span>,random_state<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, max_depth<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>)

<span style="color:#75715e"># .fit é o comando de treinamento(lembre de fitness. o que treina)</span>
model <span style="color:#f92672">=</span> tree_view<span style="color:#f92672">.</span>fit(X_train, y_train)
prediction_tree_train <span style="color:#f92672">=</span> model<span style="color:#f92672">.</span>predict(X_train)
accuracy <span style="color:#f92672">=</span> accuracy_score(y_train, prediction_tree_train)
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;Valor Acuracia: &#39;</span>,accuracy)
</code></pre></div><h4 id="valor-acuracia--0881619937694704">Valor Acuracia:  0.881619937694704</h4>
<h2 id="---------decision-tree-test---------">&mdash;&mdash;&ndash; Decision Tree Test &mdash;&mdash;&ndash;</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">tree_view_test <span style="color:#f92672">=</span> DecisionTreeClassifier(criterion<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;gini&#39;</span>,random_state<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, max_depth<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>)

prediction_tree_test <span style="color:#f92672">=</span> model<span style="color:#f92672">.</span>predict(X_test)
accuracy <span style="color:#f92672">=</span> accuracy_score(y_test, prediction_tree_test)
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;Valor Acuracia: &#39;</span>,accuracy)
</code></pre></div><h4 id="valor-acuracia--08297101449275363">Valor Acuracia:  0.8297101449275363</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">nome_features <span style="color:#f92672">=</span> X_test<span style="color:#f92672">.</span>columns

plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">24</span>,<span style="color:#ae81ff">11</span>))

plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;teste&#39;</span>)
tree<span style="color:#f92672">.</span>plot_tree(model, label<span style="color:#f92672">=</span>None, node_ids<span style="color:#f92672">=</span>True, rounded<span style="color:#f92672">=</span>True, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">9</span>, feature_names<span style="color:#f92672">=</span>nome_features, filled<span style="color:#f92672">=</span>True, class_names<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#39;0&#39;</span>,<span style="color:#e6db74">&#39;1&#39;</span>], proportion<span style="color:#f92672">=</span>True)
<span style="color:#75715e"># plt.savefig(&#39;decision_tree.png&#39;, format=&#39;png&#39;)</span>
plt<span style="color:#f92672">.</span>show()
</code></pre></div><p><img src="/images/insuficiencia_cardiaca/img13.png" alt="img13"></p>
<h2 id="---------randon-forest-train---------">&mdash;&mdash;&ndash; Randon Forest Train &mdash;&mdash;&ndash;</h2>
<p>O algoritmo Random Forest é um tipo de ensemble learning, método que gera muitos classificadores e combina o seu resultado.</p>
<p>No caso do Random Forest, ele gera vários decision trees, cada um com suas particularidades e combinada o resultado da classificação de todos eles. Essa combinação de modelos, torna ele um algoritmo muito mais poderoso do que o Decision Tree</p>
<p><img src="/images/insuficiencia_cardiaca/img14.png" alt="img14"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">SEED<span style="color:#f92672">=</span><span style="color:#ae81ff">42</span>
randon_forest <span style="color:#f92672">=</span> RandomForestClassifier(max_depth<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>, random_state <span style="color:#f92672">=</span> SEED)

model_rando_forest <span style="color:#f92672">=</span> randon_forest<span style="color:#f92672">.</span>fit(X_train, y_train)
prediction_rf_train <span style="color:#f92672">=</span> model_rando_forest<span style="color:#f92672">.</span>predict(X_train)

accuracy <span style="color:#f92672">=</span> accuracy_score(y_train, prediction_rf_train)
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;Valor Acuracia: &#39;</span>,accuracy)
</code></pre></div><h4 id="valor-acuracia--09003115264797508">Valor Acuracia:  0.9003115264797508</h4>
<h2 id="---------randon-rorest-test---------">&mdash;&mdash;&ndash; Randon Rorest Test &mdash;&mdash;&ndash;</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">prediction_rf <span style="color:#f92672">=</span> model_rando_forest<span style="color:#f92672">.</span>predict(X_test)

accuracy <span style="color:#f92672">=</span> accuracy_score(y_test, prediction_rf)
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;Valor Acuracia: &#39;</span>,accuracy)
</code></pre></div><h4 id="valor-acuracia--08623188405797102">Valor Acuracia:  0.8623188405797102</h4>
<h2 id="---------logistic-regression-train---------">&mdash;&mdash;&ndash; Logistic Regression Train &mdash;&mdash;&ndash;</h2>
<p>Regressão logística pode ser definido como uma técnica estatística que busca produzir (usando um conjunto de observações) um modelo que possibilita predizer os valores tomados por uma variável categórica.</p>
<p>Como no algoritmos da Regressão Logistica as variáveis são independentes, são analisados os resultados binários e sendo direcionada a uma das duas categorias. As variáveis independentes podem ser categóricas ou numéricas, mas a variável dependente é sempre categórica. Escrito assim:</p>
<p>P(Y=1|X) ou P(Y=0|X)</p>
<p>Isso pode ser usado para calcular a probabilidade de uma palavra ter uma conotação positiva ou negativa (0, 1 ou em uma escala intermediária). Ou pode ser usado para determinar o objeto contido em uma foto (árvore, flor, grama, etc.), com cada objeto dado uma probabilidade entre 0 e 1.</p>
<p><img src="/images/insuficiencia_cardiaca/img15.png" alt="img15"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">logistic_regression <span style="color:#f92672">=</span> LogisticRegression(max_iter <span style="color:#f92672">=</span> <span style="color:#ae81ff">1000</span> ,random_state <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>)
model_logistic_regression <span style="color:#f92672">=</span> logistic_regression<span style="color:#f92672">.</span>fit(X_train, y_train)
prediction_lr_train <span style="color:#f92672">=</span> model_logistic_regression<span style="color:#f92672">.</span>predict(X_train)

y_accuracy <span style="color:#f92672">=</span> accuracy_score(y_train, prediction_lr_train)
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Acurácia:&#34;</span>, y_accuracy)
</code></pre></div><h4 id="acurácia-08411214953271028">Acurácia: 0.8411214953271028</h4>
<h2 id="---------logistic-regression-test---------">&mdash;&mdash;&ndash; Logistic Regression Test &mdash;&mdash;&ndash;</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">prediction_lr_test <span style="color:#f92672">=</span> model_logistic_regression<span style="color:#f92672">.</span>predict(X_test)
y_accuracy <span style="color:#f92672">=</span> accuracy_score(y_test, prediction_lr_test)
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Acurácia:&#34;</span>, y_accuracy)
</code></pre></div><h4 id="acurácia-08405797101449275">Acurácia: 0.8405797101449275</h4>
<h2 id="---------gaussiannb-train---------">&mdash;&mdash;&ndash; GaussianNB Train &mdash;&mdash;&ndash;</h2>
<p>O Teorema de Bayes é usada para o cálculo da probabilidade de um evento dado que outro evento já ocorreu, o que é chamado de probabilidade condicional.</p>
<p>A grande questão do Teorema de Bayes é que eu preciso ter alguma informação anterior, ou seja, preciso saber que um determinado evento já ocorreu e qual a probabilidade desse evento.</p>
<h4 id="calculo-do-algoritmo">Calculo do algoritmo</h4>
<p><img src="/images/insuficiencia_cardiaca/img16.png" alt="img16"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">gnb <span style="color:#f92672">=</span> GaussianNB()
modelo_gaucianNB <span style="color:#f92672">=</span> gnb<span style="color:#f92672">.</span>fit(X_train, y_train)

preds_naivebaies_train <span style="color:#f92672">=</span> modelo_gaucianNB<span style="color:#f92672">.</span>predict(X_train)

y_accuracy <span style="color:#f92672">=</span> accuracy_score(y_train, preds_naivebaies_train)
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Acurácia:&#34;</span>, y_accuracy)
</code></pre></div><h4 id="acurácia-08426791277258567">Acurácia: 0.8426791277258567</h4>
<h2 id="---------gaussiannb-train----------1">&mdash;&mdash;&ndash; GaussianNB Train &mdash;&mdash;&ndash;</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">reds_naivebaies_teste <span style="color:#f92672">=</span> modelo_gaucianNB<span style="color:#f92672">.</span>predict(X_test)
y_accuracy <span style="color:#f92672">=</span> accuracy_score(y_test, reds_naivebaies_teste)
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Acurácia:&#34;</span>, y_accuracy)
</code></pre></div><h4 id="acurácia-08333333333333334">Acurácia: 0.8333333333333334</h4>
<p>Criação de objeto de classificadores</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">classifiers <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#39;Arvore&#39;</span>: DecisionTreeClassifier(random_state<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>, max_depth<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>),
               <span style="color:#e6db74">&#39;Random Forest&#39;</span>: RandomForestClassifier(max_depth<span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>, random_state <span style="color:#f92672">=</span> SEED),
               <span style="color:#e6db74">&#39;Naive Bayes&#39;</span>: GaussianNB(),
               <span style="color:#e6db74">&#39;Regressão Logistica&#39;</span>: LogisticRegression(max_iter <span style="color:#f92672">=</span> <span style="color:#ae81ff">1000</span> ,random_state <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>),
              }

<span style="color:#66d9ef">for</span> c <span style="color:#f92672">in</span> X_train<span style="color:#f92672">.</span>columns:
    <span style="color:#66d9ef">if</span> X_train[c]<span style="color:#f92672">.</span>dtype <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;object&#34;</span>:
        X_train[c] <span style="color:#f92672">=</span> X_train[c]<span style="color:#f92672">.</span>astype(<span style="color:#e6db74">&#39;category&#39;</span>)
        X_train[c] <span style="color:#f92672">=</span> X_train[c]<span style="color:#f92672">.</span>cat<span style="color:#f92672">.</span>codes  

<span style="color:#66d9ef">for</span> clf <span style="color:#f92672">in</span> classifiers<span style="color:#f92672">.</span>items():
    clf[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>fit(X_train, y_train)
    preds <span style="color:#f92672">=</span> clf[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>predict(X_test)
    score <span style="color:#f92672">=</span> accuracy_score(preds, y_test)
    <span style="color:#66d9ef">print</span>(f<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">------{clf[0]}------&#39;</span>)
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Acurácia:&#34;</span>,accuracy_score(y_test, preds))
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Precisão:&#34;</span>,precision_score(y_test, preds))
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Recall:&#34;</span>,recall_score(y_test, preds))
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;F1:&#34;</span>,f1_score(y_test, preds))
</code></pre></div><p><img src="/images/insuficiencia_cardiaca/img17.png" alt="img17"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">preds <span style="color:#f92672">=</span> []
clf_trained <span style="color:#f92672">=</span> []
names<span style="color:#f92672">=</span>[]
<span style="color:#66d9ef">for</span> clf <span style="color:#f92672">in</span> classifiers<span style="color:#f92672">.</span>items():
    clf_atual <span style="color:#f92672">=</span> clf[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>fit(X_train, y_train)
    clf_trained<span style="color:#f92672">.</span>append(clf_atual)

    pred_atual<span style="color:#f92672">=</span>clf[<span style="color:#ae81ff">1</span>]<span style="color:#f92672">.</span>predict(X_test)
    preds<span style="color:#f92672">.</span>append(pred_atual)
    names<span style="color:#f92672">.</span>append(clf[<span style="color:#ae81ff">0</span>])
    
    <span style="color:#66d9ef">print</span>(precision_recall_fscore_support(y_test, pred_atual, average<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;macro&#39;</span>))
</code></pre></div><p>(0.8289915966386554, 0.832855093256815, 0.8290616311094128, None)
(0.8611037056784858, 0.8598756575801052, 0.8604428358526719, None)
(0.8346729708431836, 0.8385142674956161, 0.8330176767676768, None)
(0.8409914404243028, 0.8450502152080345, 0.8401684653856278, None)</p>
<h3 id="matriz-confusão">Matriz Confusão</h3>
<p><img src="/images/insuficiencia_cardiaca/img18.png" alt="img18"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">fig, axs <span style="color:#f92672">=</span>  plt<span style="color:#f92672">.</span>subplots(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">2</span>, figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">10</span>))
position <span style="color:#f92672">=</span> [axs[<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span>],axs[<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">1</span>],axs[<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">0</span>],axs[<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">1</span>]]

<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(classifiers)):
    cm <span style="color:#f92672">=</span> confusion_matrix(y_test, preds[i], labels<span style="color:#f92672">=</span>clf_trained[i]<span style="color:#f92672">.</span>classes_)
    disp <span style="color:#f92672">=</span> ConfusionMatrixDisplay(confusion_matrix<span style="color:#f92672">=</span>cm, display_labels<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#34;Terá&#34;</span>, <span style="color:#e6db74">&#34;Não terá&#34;</span>])
    position[i]<span style="color:#f92672">.</span>set_title(names[i])
    disp<span style="color:#f92672">.</span>plot(ax<span style="color:#f92672">=</span>position[i])
    
plt<span style="color:#f92672">.</span>show()
</code></pre></div><p><img src="/images/insuficiencia_cardiaca/img19.png" alt="img19"></p>
<h2 id="cross-validation">Cross-Validation</h2>
<p>A escolha da validação cruzada correta depende do conjunto de dados com o qual você está lidando, e a escolha da validação cruzada em um conjunto de dados pode ou não se aplicar a outros conjuntos de dados. No entanto, existem alguns tipos de técnicas de validação cruzada que são as mais populares e amplamente utilizadas. Esses incluem:</p>
<ul>
<li>validação cruzada k-fold.</li>
<li>validação cruzada estratificada em k-fold A validação cruzada é dividir os dados de treinamento em algumas partes. Treinamos o modelo em algumas dessas peças e testamos nas demais.</li>
</ul>
<p><img src="/images/insuficiencia_cardiaca/img20.png" alt="img20"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> classifiers<span style="color:#f92672">.</span>items():
    scores_dt <span style="color:#f92672">=</span> cross_val_score(i[<span style="color:#ae81ff">1</span>], X_test, y_test, scoring<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;accuracy&#39;</span>, cv<span style="color:#f92672">=</span><span style="color:#ae81ff">5</span>)
    <span style="color:#66d9ef">print</span>(f<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">---- {i[0]} ----&#39;</span>)
    <span style="color:#66d9ef">print</span>(scores_dt)
</code></pre></div><p><img src="/images/insuficiencia_cardiaca/img21.png" alt="img21"></p>
<h2 id="curva-roc">Curva ROC</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">ax <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>gca()
<span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(classifiers)):
    clf <span style="color:#f92672">=</span> classifiers[names[i]]      
    rfc_disp <span style="color:#f92672">=</span> RocCurveDisplay<span style="color:#f92672">.</span>from_estimator(clf, X_test, y_test, ax<span style="color:#f92672">=</span>ax, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">0.7</span>)
plt<span style="color:#f92672">.</span>show()
    
clf2 <span style="color:#f92672">=</span> classifiers[<span style="color:#e6db74">&#39;Random Forest&#39;</span>]
svc_disp <span style="color:#f92672">=</span> RocCurveDisplay<span style="color:#f92672">.</span>from_estimator(clf2, X_test, y_test)
svc_disp<span style="color:#f92672">.</span>plot(ax<span style="color:#f92672">=</span>ax, alpha<span style="color:#f92672">=</span><span style="color:#ae81ff">0.8</span>)
plt<span style="color:#f92672">.</span>show()
</code></pre></div><p><img src="/images/insuficiencia_cardiaca/img22.png" alt="img22"></p>
<h2 id="insigths">Insigths</h2>
<p>Após toda a análise do problema e entendimento de algumas hipóteses vistas na etapa de Visualização, criamos o conjunto de treino e testes e aplicamos em diferentes algoritmos. Iniciamos o treinamento dos algoritmos com a tradicional Decision Tree, partindo para Random Forest, GussianNB e Logistic Regression. Para a precisão dos resultados dos treinamentos, aplicamos uma camada de Cross-Validation onde os modelos passaram por diferentes conjuntos de dados, resultando em score variados para validarmos a qualidade dos modelos.</p>
<p>Após essa validação, identificamos que o modelo Random Forest se destacou com uma Acurácia media de 0.88 e uma derivação de 0.05, sendo o melhor resultado da acurácia de todos os algoritmos.</p>
<p>Como estamos predizendo um problema de saúde, devemos ter o seguinte pensamento: caso o paciente vá a um médico é melhor que ele seja diagnosticado com uma doença cardíaca e previna, porem ele NÃO tem nenhum problema. Do que ele seja diagnosticado que não tem uma doença cardíaca, e, na verdade, ele TEM problema cardíaco.</p>
<p>Logo, compreendemos que em nossos algoritmos devem conter um BAIXO índice de falsos negativos(FN). Analisando a matriz confusão, nota-se que dentre os quatro algoritmos, apenas um se destaca por conter poucos falsos negativos(FN), a Random Forest. Nota-se que enquanto os outros modelos chegam a 30 ou 32 FN, a Random Forest chega diminuir quase pela metade, chegando aos 18 FN.</p>
<p>Para compararmos as probabilidades de acerto desses Falsos Negativos, devemos olhar para o maior Score de Recall, e novamente a Random Fores se destaca com seus 0.88 de assertividade.</p>
<p>Com isso, entendemos que para predizermos a insuficiência cardíaca de um paciente, podemos utilizar nosso modelo treinado com Random Forest visto que comparamos os resultados de suas predições, e também testamos a qualidade do modelo comprovando a sua eficácia em seus resultados.</p>
<p>Espero que tenha aproveitado todo o desenvolvimento do projeto, e que sua leitura tenha agregado conhecimentos.</p>
]]></content>
        </item>
        
        <item>
            <title>Microservice Project – Step 3</title>
            <link>https://patrickpiccini.github.io/posts/microservice_project_step03/</link>
            <pubDate>Thu, 16 Jun 2022 10:01:53 -0300</pubDate>
            
            <guid>https://patrickpiccini.github.io/posts/microservice_project_step03/</guid>
            <description>Table of Contents  Criação do Docker-Compose-Services Teste na OCI Resumo   Nesse próximo passo, parto do pressuposto que meu ambiente já está configurado e com todas as instalações feitas, assim, posso começar a criar as primeiras linhas de código.
Devemos começar criando uma pasta chamada MS-Application. Essa pasta será onde iremos criar todos os microsserviços, configuração de containers de serviço, e mais alguns detalhes, que serão mostrados no decorrer das publicações.</description>
            <content type="html"><![CDATA[<p><img src="/images/microservice_project/microservices.png" alt="microservices"></p>
<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#cria%C3%A7%C3%A3o-do-docker-compose-services">Criação do Docker-Compose-Services</a></li>
<li><a href="#teste-na-oci">Teste na OCI</a></li>
<li><a href="#resumo">Resumo</a></li>
</ul>
<hr>
<p>Nesse próximo passo, parto do pressuposto que meu ambiente já está configurado e com todas as instalações feitas, assim, posso começar a criar as primeiras linhas de código.</p>
<p>Devemos começar criando uma pasta chamada <em>MS-Application.</em> Essa pasta será onde iremos criar todos os microsserviços, configuração de containers de serviço, e mais alguns detalhes, que serão mostrados no decorrer das publicações.</p>
<p>Na raiz da pasta, criamos um arquivo chamado <em>docker-compose-services.yml.</em></p>
<pre><code class="language-Estrutura" data-lang="Estrutura">MS-Application
│   docker-compose-services.yml
</code></pre><h2 id="criação-do-docker-compose-services">Criação do Docker-Compose-Services</h2>
<p>Como vamos usar containers para praticamente tudo, será necessário que os servidores Rabbit, Redis, Postgres, e interfaces de manager sejam criadas separadamente em seus devidos containers. É necessária essa separação para que nenhum servidor dependa do outro para funcionar. Com isso, já temos os primeiros passos na criação da arquitetura de microsserviços.</p>
<p>Para inicializar esses serviços rapidamente, iremos desenvolver um Docker-Compose e configuraremos uma <em>Network</em>, onde posteriormente estarão todos os serviços dentro dessa mesma rede.</p>
<p>A rede foi nomeada de <em>internal-network,</em> nela, iremos configurar o endereço 10.5.0.0 sendo uma rede classe A, com uma máscara de rede /16. Também iremos definir o gateway da rede para 10.5.0.1.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-docker" data-lang="docker">version: <span style="color:#e6db74">&#34;3.7&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>networks:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>  network-service:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    driver: bridge<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    name: internal-network<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    ipam:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      config:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>        - subnet: 10.5.0.0/16<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>          gateway: 10.5.0.1<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>Nos serviços, iniciamos configurando o RabbitMQ. Utilizaremos a imagem <em>rabbitmq:3-management-alpine,</em> que é uma imagem mínima do Docker baseada no Alpine Linux com um índice de pacotes completo e apenas 5 MB de tamanho. Nas variáveis de ambiente é deixado com o valor padrão o user, password e host, que será utilizado posteriormente para conectar ao manager do rabbit. Nas portas, devemos colocar 15672 para o manager e 5672 para o servidor. E por fim, iremos configurar o contêiner para ficar dentro da Network que foi criada anteriormente, apontando também um ip estático para essa instancia.</p>
<p><a href="https://hub.docker.com/_/alpine">Alpine</a></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-docker" data-lang="docker">services:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>  rabbitmq:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    image: <span style="color:#e6db74">&#34;rabbitmq:3-management-alpine&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    environment:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      RABBITMQ_DEFAULT_USER: <span style="color:#e6db74">&#34;guest&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      RABBITMQ_DEFAULT_PASS: <span style="color:#e6db74">&#34;guest&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      RABBITMQ_DEFAULT_VHOST: <span style="color:#e6db74">&#34;/&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    ports:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      - <span style="color:#e6db74">&#34;15672:15672&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      - <span style="color:#e6db74">&#34;5672:5672&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    labels:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      NAME: <span style="color:#e6db74">&#34;rabbitmq1&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    networks:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      network-service:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>        ipv4_address: 10.5.0.10<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>A estrutura dos próximos serviços é bem semelhante a essa primeira, com apenas alguns detalhes como diferença. No Postgres, utilizaremos a imagem <em>postgres:13</em>, iremos indicar as variáveis padrões do user e password para conexão a instância, apontaremos a porta padrão 5432, criaremos um volume compartilhado de <em>.data</em> para <em>/data/,</em> configuraremosaNetwork com o ip estático, e um detalhe muito importante, será colocado o parâmetro <em>restart: Always</em> que fará com que a instância seja reiniciada caso pare de funcionar. Se for interrompido manualmente, ele será reiniciado somente quando o daemon do Docker for reiniciado ou o próprio contêiner for reiniciado manualmente.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-docker" data-lang="docker">  postgres:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    container_name: postgres_container<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    image: postgres:13<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    restart: always<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    environment:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      POSTGRES_USER: postgres<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      POSTGRES_PASSWORD: postgres<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      POSTGRES_DB: baseapplication<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    ports:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      - <span style="color:#e6db74">&#34;5432:5432&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    volumes:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      - ./data:/data/<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    networks:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      network-service:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>        ipv4_address: 10.5.0.11<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>Para ter uma parte visual do banco de dados, faremos a criação de uma instância com o PgAdmin, que poderemos conectar ao servidor do postgres via Web. Sendo assim, iremos utilizar a imagem <em>dpage/pgadmin4,</em> com as variáveis de e-mail e password para entrarmos na página web. Iremos apontar a porta de 16543/80 (external/internal), compartilharemos os volumes./data/:/data/ e ./postgres-backup:/var/lib/postgresql/backups, iremos configurar a network com um ip estático, e colaremos uma dependência no parâmetro <em>depends_on – postgres.</em> Isso fará com o a instância do PgAdmin só seja criada, após a criação da instância do postgres.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-docker" data-lang="docker">  pgadmin:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    container_name: pgadmin_container<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    image: dpage/pgadmin4<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    environment:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      PGADMIN_DEFAULT_EMAIL: admin@admin.com<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      PGADMIN_DEFAULT_PASSWORD: admin<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    ports:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      - <span style="color:#e6db74">&#34;16543:80&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    depends_on:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      - postgres<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    volumes:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      - ./data/:/data/<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      - ./postgres-backup:/var/lib/postgresql/backups<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    networks:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      network-service:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>        ipv4_address: 10.5.0.12<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>E para camada de cache, iremos criar uma instância com Redis utilizando a imagem <em>redis:alpine</em>, apontando a porta padrão 6379, e configurando a Network com um ip estático.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-docker" data-lang="docker">  redis:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    image: redis:alpine<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    container_name: redis-container<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    ports:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      - <span style="color:#e6db74">&#34;6379:6379&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    networks:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      network-service:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>        ipv4_address: 10.5.0.9<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>No final, teremos vários containers rodando dentro de uma Rede, tendo algo parecido com a seguinte imagem:</p>
<p><img src="/images/microservice_project/img16.jpg" alt="img16"></p>
<h2 id="teste-na-oci">Teste na OCI</h2>
<p>Agora que temos pronto o Docker-Compose com todos os serviços que utilizaremos, devemos fazer um teste dentro da VM que criamos na OCI. Para conseguir compartilhar o código, faço <em>um git commit</em> de minha pasta MS-Application, e dentro da instância OCI dou um <em>git pull</em> para baixar.</p>
<p>OBS: Não entrarei em detalhes nos comandos do git, caso tenha alguma dúvida especifica, consulte a documentação oficial: <a href="https://comandosgit.github.io/"><strong>https://comandosgit.github.io/</strong></a></p>
<p>Dentro a instância, inicio meus serviços com o comando <em>docker-compose -f docker-compose-services.yml up,</em> e passo o nome do arquivo que deverá ser iniciado.</p>
<p>Nesse momento começará a baixar as imagens dos contêineres.</p>
<p><img src="/images/microservice_project/img17.jpg" alt="img17"></p>
<p><img src="/images/microservice_project/img18.jpg" alt="img18"></p>
<p><img src="/images/microservice_project/img19.jpg" alt="img19"></p>
<p>Agora que está tudo rodando, pude fazer um teste me conectando ao manager do RabbitMQ pela Web. Porém como a aplicação está em cloud, é necessário que nas configurações da VNC do projeto, sejam expostas as portas que iremos utilizar para nos conectar externamente.</p>
<p><img src="/images/microservice_project/img20.jpg" alt="img20"></p>
<p>Na OCI, em Networking &gt; Virtual Cloud Networks &gt; sua_vnc &gt; Security List Details &gt; Ingress Rules. iremos adicionar as portas que utilizaremo</p>
<p><img src="/images/microservice_project/img21.jpg" alt="img21"></p>
<p><img src="/images/microservice_project/img22.jpg" alt="img22"></p>
<p>Após a liberação da porta, consegui ter acesso aos meus contêineres, tanto o do rabbit quando ao pgadmin, que também liberei a porta. Percebam que para me conectar aos meus contêineres, utilizo o ip public da VM que estou utilizando.</p>
<p><img src="/images/microservice_project/img23.jpg" alt="img23"></p>
<p><img src="/images/microservice_project/img24.jpg" alt="img24"></p>
<h2 id="resumo">Resumo</h2>
<p>Nesse Step, criamos o arquivo <em>docker-compose-services.yml</em> que é responsável por iniciar os servidores RabbitMQ, Postgres e Redis, juntamente as interfaces PgAdmin e RabbitManager. Foram liberadas as portas dos servidores para visualização externa, e também foi feito um teste acessando as interfaces externamente à OCI, tendo sucesso na conexão.</p>
]]></content>
        </item>
        
        <item>
            <title>Microservice Project – Step 2</title>
            <link>https://patrickpiccini.github.io/posts/microservice_project_step02/</link>
            <pubDate>Thu, 09 Jun 2022 10:01:52 -0300</pubDate>
            
            <guid>https://patrickpiccini.github.io/posts/microservice_project_step02/</guid>
            <description>Table of Contents  Entrar na Instancia via shell Instalar Docker Instalar Docker-Compose Instalar Git Resumo   Após Configurar a infraestrutura no Oracle Cloud, necessitamos fazer instalações de alguns programas que iremos utilizar. O Docker para a criação dos nossos containers de servidores e microsserviços, o Docker-Compose para facilitar a criação dos containers, e o Git, para versionamento de código.
Como desenvolvi os códigos fora de nossa VM da OCI, o Git é o fator principal para que todos os códigos sejam disponíveis facilmente.</description>
            <content type="html"><![CDATA[<p><img src="/images/microservice_project/microservices.png" alt="microservices"></p>
<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#entrar-na-instancia-via-shell">Entrar na Instancia via shell</a></li>
<li><a href="#instalar-docker">Instalar Docker</a></li>
<li><a href="#instalar-docker-compose">Instalar Docker-Compose</a></li>
<li><a href="#instalar-git">Instalar Git</a></li>
<li><a href="#resumo">Resumo</a></li>
</ul>
<hr>
<p>Após Configurar a infraestrutura no Oracle Cloud, necessitamos fazer instalações de alguns programas que iremos utilizar. O Docker para a criação dos nossos containers de servidores e microsserviços, o Docker-Compose para facilitar a criação dos containers, e o Git, para versionamento de código.</p>
<p>Como desenvolvi os códigos fora de nossa VM da OCI, o Git é o fator principal para que todos os códigos sejam disponíveis facilmente.</p>
<h2 id="entrar-na-instancia-via-shell">Entrar na Instancia via shell</h2>
<p>Logado no usuário <strong>devel_user</strong> , iniciei o cloud shell para conectar-se ao VM criada através do SSH Connection.</p>
<p>* Detalhe, essa conexão pode ser feita de qualquer terminal ou computador que tenha acesso ao SSH Connection, desde que se tenha cadastrado na hora da criação da VM a SSH-KEY da máquina que onde se conectará.</p>
<p>Com o comando <strong>ssh opc@&lt;ip_public&gt;</strong> entrei na máquina e comecei a fazer a instalação com o pacote de instalação Dandified YUM (DNF) no Oracle Linux 8.</p>
<h2 id="instalar-docker">Instalar Docker</h2>
<p>Com a sequência de comando abaixo, foi instalado o Docker na VM:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">dnf install -y dnf-utils zip unzip
dnf config-manager --add-repo<span style="color:#f92672">=</span>https://download.docker.com/linux/centos/docker-ce.repo
dnf remove -y runc
dnf install -y docker-ce --nobest
systemctl enable docker.service
systemctl start docker.service
systemctl status docker.service
docker version
</code></pre></div><p>Adicionar o usuário ao grupo docker para poder executar comandos Docker;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo usermod -aG docker opc
newgrp docker  
</code></pre></div><p>Vemos que Docker está rodando e pronto para ser usando.</p>
<p><img src="/images/microservice_project/img14.jpg" alt="img14"></p>
<h2 id="instalar-docker-compose">Instalar Docker-Compose</h2>
<p>Foi instalado o Docker-Compose na VM com os seguintes comandos:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo dnf -y install curl
curl -s https://api.github.com/repos/docker/compose/releases/latest|grep browser_download_url|grep docker-compose-linux-x86_64|cut -d <span style="color:#e6db74">&#39;&#34;&#39;</span> -f 4|wget -qi –
ls -1 docker-compose-linux-x86_64*
sha256sum -c docker-compose-linux-x86_64.sha256
chmod +x docker-compose-linux-x86_64
sudo mv docker-compose-linux-x86_64 /usr/local/bin/docker-compose
docker-compose version
</code></pre></div><p>Docker-Compose instalado com sucesso.</p>
<p><img src="/images/microservice_project/img15.jpg" alt="img15"></p>
<h2 id="instalar-git">Instalar Git</h2>
<p>Comandos para instalação do Git:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel -y
yum install gcc perl-ExtUtils-MakeMaker -y
cd /usr/local/
wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.35.1.tar.gz
tar zxvf git-2.35.1.tar.gz
cd git-2.35.1/
make prefix<span style="color:#f92672">=</span>/usr/local/git all
make prefix<span style="color:#f92672">=</span>/usr/local/git install
echo <span style="color:#e6db74">&#34;export PATH=</span>$PATH<span style="color:#e6db74">:/usr/local/git/bin&#34;</span> &gt;&gt; /etc/bashrc
source /etc/bashrc
</code></pre></div><h2 id="resumo">Resumo</h2>
<p>Nesse Step, nos conectamos a instância da OCI e instalamos algumas dependências para o nosso ambiente de produção. Instalamos o Docker, Docker-Compose e Git.</p>
]]></content>
        </item>
        
        <item>
            <title>Microservice Project – Step 1</title>
            <link>https://patrickpiccini.github.io/posts/microservice_project_step01/</link>
            <pubDate>Thu, 02 Jun 2022 13:00:52 -0200</pubDate>
            
            <guid>https://patrickpiccini.github.io/posts/microservice_project_step01/</guid>
            <description>Table of Contents  Criação do Compartment Criação de Usuário Criação de Grupo Criação de Policies Criação de SSH-KEY Criação de Instancia VM Resumo   Nesse primeiro passo, iremos configurar um ambiente OCI para rodar toda a aplicação em cloud.
Criação do Compartment Iremos criar um conpartiment.
No ícone de hamburguer na página inicial do OCI, iremos em &amp;gt; Identity &amp;gt; Security &amp;gt; compartments, e criaremos um compartimento com o nome Developmet.</description>
            <content type="html"><![CDATA[<p><img src="/images/microservice_project/microservices.png" alt="microservices"></p>
<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#cria%C3%A7%C3%A3o-do-compartment">Criação do Compartment</a></li>
<li><a href="#cria%C3%A7%C3%A3o-de-usu%C3%A1rio">Criação de Usuário</a></li>
<li><a href="#cria%C3%A7%C3%A3o-de-grupo">Criação de Grupo</a></li>
<li><a href="#cria%C3%A7%C3%A3o-de-policies">Criação de Policies</a></li>
<li><a href="#cria%C3%A7%C3%A3o-de-ssh-key">Criação de SSH-KEY</a></li>
<li><a href="#cria%C3%A7%C3%A3o-de-instancia-vm">Criação de Instancia VM</a></li>
<li><a href="#resumo">Resumo</a></li>
</ul>
<hr>
<p>Nesse primeiro passo, iremos configurar um ambiente OCI para rodar toda a aplicação em cloud.</p>
<h2 id="criação-do-compartment">Criação do Compartment</h2>
<p>Iremos criar um <em>conpartiment.</em></p>
<p>No ícone de hamburguer na página inicial do OCI, iremos em &gt; Identity &gt; Security &gt; compartments, e criaremos um compartimento com o nome <strong>Developmet</strong>.</p>
<p><img src="/images/microservice_project/img3.jpg" alt="img3"></p>
<h2 id="criação-de-usuário">Criação de Usuário</h2>
<p>Após isso, criaremos um usuário de desenvolvimento para ter acesso somente ao compartimento <strong>Developmet</strong>.</p>
<p>Novamente no menu lateral, em &gt; Identity &gt; Security &gt; users, iremos criar o usuário <strong>devel_user,</strong> com o tipo IAM USER. Esses usuários podem acessar os serviços do Oracle Cloud Infrastructure, mas nem todos os serviços do Cloud Platform. Os usuários do IAM são cenários de usuário atípico, como acesso de administrador de emergência.</p>
<p><img src="/images/microservice_project/img4.jpg" alt="img4"></p>
<p><img src="/images/microservice_project/img5.jpg" alt="img5"></p>
<h2 id="criação-de-grupo">Criação de Grupo</h2>
<p>No menu lateral, em &gt; Identity &gt; Security &gt; groups, criaremos um grupo com o nome de <strong>Developer_Group.</strong> Depois disso, iremos adicionar o usuário <strong>devel_user</strong> ao grupo clicando no botão &ldquo;Add user to Group&rdquo;.</p>
<p><img src="/images/microservice_project/img6.jpg" alt="img6"></p>
<h2 id="criação-de-policies">Criação de Policies</h2>
<p>Finalizando o processo de criação de usuário, grupo, e adição do usuário ao grupo, é necessário atribuir uma sequência de políticas de permissões ao grupo, para que assim, o grupo criado tenha acesso ao compartimento <em>Developer</em> para fazer as devidas interações.</p>
<p>Vamos em &gt; Identity &gt; Security &gt; Policies</p>
<p><img src="/images/microservice_project/img7.jpg" alt="img7"></p>
<p>Após ser direcionado a página de policies, selecionamos o compartimento <strong>Developmet</strong> para receber a política que criamos. Na policie, iremos permitir o Developer_Group (e todos seus usuários) a utilização de todos os recursos no compartimento OCI.</p>
<p><img src="/images/microservice_project/img8.jpg" alt="img8"></p>
<p>Também será criado uma outra policie no compartimento <strong>root</strong> , para liberar o acesso ao terminal cloud shell, através dos usuários do grupo <em>Developmet.</em> Isso deverá ser feito devido ao fato de que precisaremos de uma ssh-key disponibilizada pelo usuário para conseguir criar nossa instancia no OCI.</p>
<p><img src="/images/microservice_project/img9.jpg" alt="img9"></p>
<h2 id="criação-de-ssh-key">Criação de SSH-KEY</h2>
<p>Logado no usuário <em>devel_user,</em> conectaremos a Oracle Cloud Shell para adquirir uma ssh_key que posteriormente iremos utilizar. Para isso, vamos usar alguns simples comandos para a criação dessa chave.</p>
<p><img src="/images/microservice_project/img10.jpg" alt="img10"></p>
<pre><code class="language-cli" data-lang="cli">ssh-keygen – Para criação da chave

cat /home/your_user/.ssh/id_rsa.pub 
– Mostrará o conteúdo contido no arquivo id_rsa.pub,
  que foi criado com o comando anterior
</code></pre><p><img src="/images/microservice_project/img11.jpg" alt="img11"></p>
<h2 id="criação-de-instancia-vm">Criação de Instancia VM</h2>
<p>Ainda conectado ao usuário <em>devel_user</em> criaremos uma instância, que nada mais é que uma Virtual Machine. Em &gt; compute &gt; instances &gt; create instance._
<img src="/images/microservice_project/img12.jpg" alt="img12"></p>
<p>Ao criar uma instância na página de configuração da VM, devemos colar a ssh-key adquirida anteriormente no campo onde solicita essa chave. Isso é feito para que se consiga acessar a VM remotamente. As imagens do Oracle Linux, CentOS ou Ubuntu usam esse par de chaves SSH ao contrário de uma senha para autenticar um usuário.</p>
<p><img src="/images/microservice_project/img13.jpg" alt="img13"></p>
<p>OBS: A configuração da instância que irei utilizar, são disponibilizadas pelo serviço <em>Oracle Cloud – Free Tier,</em> sendo ela 1 VM de computação baseadas em AMD com 1/8 OCPU** e 1 GB de memória cada.</p>
<p>Para mais informações dos serviços Free Tier, acesse: <a href="https://www.oracle.com/br/cloud/free/">https://www.oracle.com/br/cloud/free/</a></p>
<h2 id="resumo">Resumo</h2>
<p>Nesse Step, começamos as criar o ambiente onde rodaremos nossa aplicação. Configuramos um compartment, usuário e grupo de usuário, que será o responsável pelo acesso ao desenvolvimento na instância OCI. Definimos algumas políticas de usuário. Também criamos uma ssh-key que utilizamos para a criação da instancia OCI.</p>
]]></content>
        </item>
        
        <item>
            <title>Um projeto completo de Microservices</title>
            <link>https://patrickpiccini.github.io/posts/microservice_project_introduction/</link>
            <pubDate>Thu, 02 Jun 2022 13:00:52 -0100</pubDate>
            
            <guid>https://patrickpiccini.github.io/posts/microservice_project_introduction/</guid>
            <description>Table of Contents  Entendimento do problema Objetivo Arquitetura do Projeto Completo   Há um tempo eu desejava entender melhor como os tão famosos microsserviços conseguem trabalhar individualmente, porém todos conectados. Foi então que decidi projetar uma pequena aplicação onde iria me aprofundar nesses conhecimentos, e que também me desafiaria a criar uma aplicação completa seguindo o Software Development Life Circle. Partindo desde a criação da ideia, até o deploy.</description>
            <content type="html"><![CDATA[<p><img src="/images/microservice_project/microservices.png" alt="microservices"></p>
<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#entendimento-do-problema">Entendimento do problema</a></li>
<li><a href="#objetivo">Objetivo</a></li>
<li><a href="#arquitetura-do-projeto-completo">Arquitetura do Projeto Completo</a></li>
</ul>
<hr>
<p>Há um tempo eu desejava entender melhor como os tão famosos microsserviços conseguem trabalhar individualmente, porém todos conectados. Foi então que decidi projetar uma pequena aplicação onde iria me aprofundar nesses conhecimentos, e que também me desafiaria a criar uma aplicação completa seguindo o <strong>Software Development Life Circle</strong>. Partindo desde a criação da ideia, até o deploy.</p>
<p>Isso pode ser representado conforme o seguinte fluxo:</p>
<p><img src="/images/microservice_project/img1.jpg" alt="img1"></p>
<p>Então, meu nome é Patrick Berlatto Piccini, e esse é meu projeto completo de microservices.</p>
<h2 id="entendimento-do-problema">Entendimento do problema</h2>
<p>Nesse projeto, utilizarei algumas ferramentas contidas na OCI (Oracle Claud Infraestructure) visto que, recentemente (Fevereiro 2022) passei na certificação &quot;Oracle Cloud Infrastructure Foundations 2021 Associate&quot;. Se você desejar seguir os passos da criação da aplicação e desenvolver junto comigo o código, é opcional utilizar o OCI.</p>
<p>Vamos começar&hellip;</p>
<h3 id="objetivo">Objetivo</h3>
<p>Criar duas aplicações básicas de microsserviços:</p>
<p>O primeiro deles deverá ser um cadastro de usuários, contendo as seguintes informações:</p>
<ul>
<li>create_user, show_all_user, show_one_user, edit_user, edit_password e delete_user</li>
</ul>
<p>Tabela de usuários &quot;users&quot; deverá conter os campos: user_id, nick_name, full_name, password, cpf, email, phone_number, created_at, updated_at.</p>
<p>O segundo será um serviço de OS (ordem de serviço) que deverá conter no cadastro, o user_id do usuário contido no banco de dados. Deverá ter as seguintes informações:</p>
<ul>
<li>order_id, user_id, item_description, item_quantity, item_price, total_value, created_at, updated_at.</li>
</ul>
<p>A arquitetura da aplicação será a seguinte: criaremos uma API que será responsável por distribuir as requisições através de um broker de mensagens chamado RabbitMQ, e também criar as filas e tabelas necessárias para a aplicação.</p>
<p>Nesse broker, terão duas filas onde a API fará a separação das mensagens e enviará ao seu devido destino, onde teremos dois microsserviços, uma para <em>usuários</em>, e outro para os <em>orders</em>. Cada microsserviço é conectado a um banco de dados Postgres onde serão armazenadas as informações dos <em>usuários</em> e dos <em>orders.</em></p>
<p>Juntamente a API, haverá uma camada de memória cache onde utilizaremos o Redis para fazer essa função. Então, caso uma requisição já tenha sido feita, a API irá verificar antes nos dados em Cache se já existe essa informação. Assim, o usuário terá o retorno muito mais rápido.</p>
<p><img src="/images/microservice_project/img2.jpg" alt="img2"></p>
<h2 id="arquitetura-do-projeto-completo">Arquitetura do Projeto Completo</h2>
<pre><code class="language-Estrutura" data-lang="Estrutura">MS-application
│   .gitignore
│   docker-compose-services.yml
│
├───API
│   │   docker-compose-api.yml
│   │   Dockerfile
│   │   requirements.txt
│   │   server.py
│   │
│   ├───config
│   │       database_connection.py
│   │       rabbitmq_connection.py
│   │       redis_connection.py
│   │       __init__.py
│   │
│   └───rabbitmq_controller
│           rabbit_queues.py
│           __init__.py
│
├───MS1
│   │   docker-compose-microservice1.yml
│   │   Dockerfile
│   │   main.py
│   │   requirements.txt
│   │
│   ├───config
│   │       database_connection.py
│   │       rabbitmq_connection.py
│   │       __init__.py
│   │
│   ├───criptografy
│   │       hash_password.py
│   │       __init__.py
│   │
│   ├───database_controller
│   │       postgres_worker.py
│   │       __init__.py
│   │
│   └───rabbitmq_controller
│           rabbit_worker.py
│			__init__.py
│
└───MS2
    │   docker-compose-microservice2.yml
    │   Dockerfile
    │   main.py
    │   requirements.txt
    │
    ├───config
    │       database_connection.py
    │       rabbitmq_connection.py
    │       __init__.py
    │
    ├───database_controller
    │       postgres_worker.py
    │       __init__.py
    │
    └───rabbitmq_controller
            rabbit_worker.py
            __init__.py
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Data Analytcs - Spotify Wrapped</title>
            <link>https://patrickpiccini.github.io/posts/spotify_wrapped/</link>
            <pubDate>Thu, 26 May 2022 09:00:50 -0300</pubDate>
            
            <guid>https://patrickpiccini.github.io/posts/spotify_wrapped/</guid>
            <description>Table of Contents  Projeto Spotify Wrapped  O que é spotify wrapped DataSet   Exploratory Data Analysis EDA Extração Exploração Limpeza de Dados Agregação  10 artistas mais escutados. 10 musicas mais escutadas.   Visualização Storytelling   Projeto Spotify Wrapped Recentemente venho estudando a área de Data Analytics, Data Science e as várias derivações de inteligência artificial, e descobri um grande interesse por esse mundo. Foi então que decidi iniciar um pequeno projeto onde eu possa praticar meus conhecimentos adquiridos, e também mostrar como o nosso cotidiano está repleto de tecnologia aplicada sobre inteligência artificial.</description>
            <content type="html"><![CDATA[<p><img src="/images/spotify_wrapped/data-analytics.jpg" alt="data-analytics"></p>
<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#projeto-spotify-wrapped">Projeto Spotify Wrapped</a>
<ul>
<li><a href="#o-que-%C3%A9-spotify-wrapped">O que é spotify wrapped</a></li>
<li><a href="#dataset">DataSet</a></li>
</ul>
</li>
<li><a href="#exploratory-data-analysis-eda">Exploratory Data Analysis EDA</a></li>
<li><a href="#extra%C3%A7%C3%A3o">Extração</a></li>
<li><a href="#explora%C3%A7%C3%A3o">Exploração</a></li>
<li><a href="#limpeza-de-dados">Limpeza de Dados</a></li>
<li><a href="#agrega%C3%A7%C3%A3o">Agregação</a>
<ul>
<li><a href="#abaixo-observaremos-os-10-artistas-mais-escutados">10 artistas mais escutados.</a></li>
<li><a href="#abaixo-observaremos-as-10-musicas-mais-escutadas">10 musicas mais escutadas.</a></li>
</ul>
</li>
<li><a href="#visualiza%C3%A7%C3%A3o">Visualização</a></li>
<li><a href="#storytelling">Storytelling</a></li>
</ul>
<hr>
<h2 id="projeto-spotify-wrapped">Projeto Spotify Wrapped</h2>
<p>Recentemente venho estudando a área de Data Analytics, Data Science e as várias derivações de inteligência artificial, e descobri um grande interesse por esse mundo. Foi então que decidi iniciar um pequeno projeto onde eu possa praticar meus conhecimentos adquiridos, e também mostrar como o nosso cotidiano está repleto de tecnologia aplicada sobre inteligência artificial.</p>
<p>O que iremos aprender:</p>
<ul>
<li>Extração</li>
<li>Exploração</li>
<li>Limpeza</li>
<li>Agregação</li>
<li>Storytelling</li>
</ul>
<h3 id="o-que-é-spotify-wrapped">O que é spotify wrapped</h3>
<p>Hoje, venho mostrar um projeto utilizando a plataforma de streaming de música mais utilizada no mundo, o Spotify. Iremos criar um recorço semelhante ao que o Spotify disponibiliza, chamada &ldquo;Spotify Wrapped&rdquo;, que nada mais é do que uma retrospectiva das músicas, artistas entro outros, mais ouvidos durante o seu ano.</p>
<p><img src="/images/spotify_wrapped/wrapped.png" alt="wrapped"></p>
<h3 id="dataset">DataSet</h3>
<p>Nesse projeto irei utilizar o meu DataSet pessoal de meu perfil do Spotify. Para conseguir as suas informações pessoais, basta ir nas <a href="https://www.spotify.com/br/account/privacy/">Configurações de Privacidade</a> da sua conta, e no final da página, seguir os passos para solicitação de seus dados. Dentro de alguns dias, você recebera por e-mail a confinação para baixas seus dados.</p>
<p><img src="/images/spotify_wrapped/steps.png" alt="steps"></p>
<h2 id="exploratory-data-analysis-eda">Exploratory Data Analysis (EDA)</h2>
<p>O que faremos hoje, será trabalha com um conceito primordial para o papel de um analista de dados, a análise Exploratória de dados(EAD).</p>
<ul>
<li>A EAD é um processo de analisar e resumir de forma detalhada um DataSet ou conjunto de dados. O objetivo é por várias técnicas, extrair informações precisas e claras, para a extração de <em>insights</em>.</li>
</ul>
<p>Antes de começar a analisar, importaremos as bibliotecas que iremos utilizar, e também carregar nosso dataset.</p>
<p>Como padrão, o spotify disponibiliza todas as informações em formato JSON, como observamos no exemplo abaixo:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="color:#f92672">&#34;endTime&#34;</span> : <span style="color:#e6db74">&#34;2021-04-29 03:33&#34;</span>,
  <span style="color:#f92672">&#34;artistName&#34;</span> : <span style="color:#e6db74">&#34;Tame Impala&#34;</span>,
  <span style="color:#f92672">&#34;trackName&#34;</span> : <span style="color:#e6db74">&#34;Let It Happen&#34;</span>,
  <span style="color:#f92672">&#34;msPlayed&#34;</span> : <span style="color:#ae81ff">345700</span>
}
</code></pre></div><h3 id="como-índices-temos">Como índices temos:</h3>
<ul>
<li>endTime - Data e hora em que o fluxo terminou no formato UTC (Fuso Horário Universal Coordenado).</li>
<li>artistName - Nome do &ldquo;criador&rdquo; para cada fluxo (por exemplo, o nome do artista se for uma faixa de música).</li>
<li>trackName - Nome dos itens ouvidos ou assistidos (por exemplo, título da faixa de música ou nome do vídeo).</li>
<li>msPlayed - “msPlayed”- Representa quantos milissegundos a faixa foi ouvida pelo usuário.</li>
</ul>
<h2 id="extração">Extração</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> pandas <span style="color:#f92672">as</span> pd
<span style="color:#f92672">import</span> seaborn <span style="color:#f92672">as</span> sns
<span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#f92672">as</span> plt
<span style="color:#f92672">from</span> datetime <span style="color:#f92672">import</span> timedelta, datetime

dataframe0 <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_json(<span style="color:#e6db74">&#39;./data-frame/StreamingHistory0.json&#39;</span>)
dataframe1 <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_json(<span style="color:#e6db74">&#39;./data-frame/StreamingHistory1.json&#39;</span>)
dataframe2 <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_json(<span style="color:#e6db74">&#39;./data-frame/StreamingHistory2.json&#39;</span>)
<span style="color:#66d9ef">print</span>(f<span style="color:#e6db74">&#34;dataframe0: {dataframe0.shape}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">dataframe1: {dataframe1.shape}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">dataframe2: {dataframe2.shape}&#34;</span>)
</code></pre></div><pre><code class="language-ipynb" data-lang="ipynb">dataframe0: (10000, 4)
dataframe1: (10000, 4)
dataframe2: (7154, 4)
</code></pre><p>Como quero fazer uma análise completa, irei concatenar dos dataframes, transformando-os apenas em um.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">sptf <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>concat([dataframe0,dataframe1,dataframe2], ignore_index<span style="color:#f92672">=</span>True)
<span style="color:#66d9ef">print</span>(f<span style="color:#e6db74">&#34;Novo DataFrame: {sptf.shape}&#34;</span>)
</code></pre></div><pre><code class="language-ipynb" data-lang="ipynb">Novo DataFrame: (27154, 4)
</code></pre><p>Como podemos ver, foi concatenado os 3 dataframes, somando um total de 27154 linhas, e 4 colunas.</p>
<p>O que faremos agora, é olhar para os dados que temos, e explorar essas informações que temos.</p>
<h2 id="exploração">Exploração</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">sptf<span style="color:#f92672">.</span>head()
</code></pre></div><p><img src="/images/spotify_wrapped/img1.png" alt="img1"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">sptf<span style="color:#f92672">.</span>columns
</code></pre></div><pre><code class="language-iptnb" data-lang="iptnb">Index(['endTime', 'artistName', 'trackName', 'msPlayed'], dtype='object')
</code></pre><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">sptf<span style="color:#f92672">.</span>dtypes
</code></pre></div><pre><code class="language-ipynb" data-lang="ipynb">endTime       object
artistName    object
trackName     object
msPlayed       int64
dtype: object
</code></pre><p>Nas colunas que são <em>object</em> podemos pressupor serem textos, e na coluna que é <em>int64</em> um número inteiro.</p>
<ul>
<li>Estatísticas descritivas.</li>
</ul>
<p>Para termos uma visão mais panorâmica do nosso DataSet podemos utilizar o comando describe(). Com ele conseguimos extrair as informações básicas como quantidade, média, minha e máxima, alguns percentuais e std. Esse comando visa, gerar estatísticas descritivas de nosso DataSet. Também pode ser aplicado individualmente com apenas uma coluna.</p>
<p>Como ha apenas o msPlayer como um valor numérico, todos esses cálculos serão feitos apenas pobre ele.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">sptf<span style="color:#f92672">.</span>describe()
</code></pre></div><p><img src="/images/spotify_wrapped/img2.png" alt="img2"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">sptf<span style="color:#f92672">.</span>min()
</code></pre></div><pre><code class="language-ipynb" data-lang="ipynb">endTime                        2021-04-29 03:33
artistName                      #TeuFuturo Cast
trackName      Som de chuva - dormir, relaxar  
msPlayed                                      0
dtype: object
</code></pre><p>Como podemos notar acima, o valor mínimo de msPlayed é 0(Zero), então vamos verificar se essas informações estão corretas.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">msPlayed_zero <span style="color:#f92672">=</span> sptf<span style="color:#f92672">.</span>query(<span style="color:#e6db74">&#39;msPlayed &lt;= 0&#39;</span>)
msPlayed_zero<span style="color:#f92672">.</span>head(<span style="color:#ae81ff">10</span>)
</code></pre></div><p><img src="/images/spotify_wrapped/img3.png" alt="img3"></p>
<p>Após uma pequena análise, podemos notar que as músicas que tem o valor 0(zero), são musicas que não tiveram o seu tempo escutado contabilizado. Com isso, caso seja feita alguma análise mais complexa futuramente, esses valores podem ser considerados <em>outliers</em>.</p>
<p>O que são <em>outliers</em>:
São valores que os diferencia drasticamente de todos os outros, ou que fogem do padrão dos valores, podendo causar anomalias nos resultados de algoritmos mais complexos, como uma Regressão Linear.</p>
<p>Vejamos isso em um grafico scatter em um  diagrama de caixa:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">6</span>))
plt<span style="color:#f92672">.</span>scatter(sptf[<span style="color:#e6db74">&#39;msPlayed&#39;</span>], sptf[<span style="color:#e6db74">&#39;msPlayed&#39;</span>])
plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#39;msPlayed&#39;</span>)
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;scatter:&#39;</span>)
plt<span style="color:#f92672">.</span>show()

sns<span style="color:#f92672">.</span>boxplot(y<span style="color:#f92672">=</span>sptf[<span style="color:#e6db74">&#39;msPlayed&#39;</span>])
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;boxplot:&#39;</span>)
plt<span style="color:#f92672">.</span>show()
</code></pre></div><h2 id="graf1imagesspotify_wrappedgraf1png"><img src="/images/spotify_wrapped/graf1.png" alt="graf1"></h2>
<p><img src="/images/spotify_wrapped/graf2.png" alt="graf2"></p>
<p>Verificando os gráficos, podemos notar uma coisa estranha. Existe um valor extremamente distante de todos os outros, um outlier. Porem como são os meus dados do Spotify, me questionei &ldquo;Será que tem uma música muito a mais que todas as outras?&quot;. Foi aí que fui investigar, e descobri que havia realmente escutado toda essa quantia de horas.</p>
<h3 id="mas-esses-outliers-não-vão-desbalancear-toda-a-minha-análise">Mas esses outliers não vão desbalancear toda a minha análise?</h3>
<p><img src="https://i.pinimg.com/originals/f1/85/3a/f1853a77c203e8bb4e6615ae7b62d325.gif" alt="img"></p>
<p>De certa forma sim, porem às vezes as informações que precisamos estão nesses outliers, e é o nosso caso.</p>
<p>Outra coisa que percebi, é que os dados que o spotify disponibilizou não estão 100% corretos. Pude ver músicas que já ouvido muitas vezes com o msPlayed ZERADO!</p>
<p>Vacilou heim Spotfy&hellip;</p>
<p>Mas tudo bem, deixamos passar dessa vez :D.</p>
<h2 id="limpeza-de-dados">Limpeza de Dados</h2>
<p>Agora que entendemo os dados que iremos trabalhar, muitas vezes nos deparamos com informações inconsistentes. Então devemos executar uma série de limpeza ou alteração dessas informações.</p>
<ul>
<li>Para verificar as linas com NaN use:</li>
</ul>
<p>Caso tenhamos valores valorem omissos como None, numpy.NaN, ou até mesmo Vazio, conseguimos identificá-los através do comando <em>notna()</em>, onde nos retorna a própria tabela, porem com os valores boleanos, representando se há ou não um valor NaN naquele índice.</p>
<ul>
<li>True  - Não tem NaN</li>
<li>False - Tem NaN</li>
</ul>
<p>Iremos calcular a quantia total de informações NaN, e como podemos ver, não ha nenhum valor NaN.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">sptf<span style="color:#f92672">.</span>notna()<span style="color:#f92672">.</span>value_counts()
</code></pre></div><pre><code class="language-ipynb" data-lang="ipynb">endTime  artistName  trackName  msPlayed
True     True        True       True        27154
dtype: int64
</code></pre><p>Como não temos nenhum dado NaN, o que podemos fazer é retirar todas as músicas que tenha o msPlayed menor ou igual a 0(zero).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">sptf <span style="color:#f92672">=</span> sptf<span style="color:#f92672">.</span>query(<span style="color:#e6db74">&#39;msPlayed &gt; 0&#39;</span>)

<span style="color:#75715e"># musica com menos tempo escutado</span>
sptf<span style="color:#f92672">.</span>query(<span style="color:#e6db74">&#39;msPlayed &lt;= 10&#39;</span>)
</code></pre></div><p><img src="/images/spotify_wrapped/img4.png" alt="img4"></p>
<h2 id="agregação">Agregação</h2>
<p>Na parte de agregação, buscamos resumir os dados através de métricas e estatísticas como soma, media, etc. para extrair insigths.</p>
<ul>
<li>Insigths - É a capacidade de tirar conclusões sobre os dados</li>
</ul>
<p>O que precisaremos fazer é buscar as músicas mais ouvidas e também os artistas mais ouvidos.</p>
<h4 id="abaixo-observaremos-os-10-artistas-mais-escutados">Abaixo observaremos os 10 artistas mais escutados.</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">artistas <span style="color:#f92672">=</span> sptf[[<span style="color:#e6db74">&#39;artistName&#39;</span>,<span style="color:#e6db74">&#39;msPlayed&#39;</span>]]<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#39;artistName&#39;</span>)<span style="color:#f92672">.</span>agg(<span style="color:#e6db74">&#39;sum&#39;</span>)<span style="color:#f92672">.</span>reset_index()
artistas <span style="color:#f92672">=</span> artistas<span style="color:#f92672">.</span>sort_values(by<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;msPlayed&#39;</span> ,ascending<span style="color:#f92672">=</span>False)
artistas_top_10 <span style="color:#f92672">=</span> artistas[:<span style="color:#ae81ff">10</span>]
artistas_top_10
</code></pre></div><p><img src="/images/spotify_wrapped/img5.png" alt="img5"></p>
<h4 id="abaixo-observaremos-as-10-musicas-mais-escutadas">Abaixo observaremos as 10 musicas mais escutadas.</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">musicas <span style="color:#f92672">=</span> sptf<span style="color:#f92672">.</span>sort_values(by<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;msPlayed&#39;</span> ,ascending<span style="color:#f92672">=</span>False)
musicas_top_10 <span style="color:#f92672">=</span> musicas[:<span style="color:#ae81ff">10</span>]
musicas_top_10
</code></pre></div><p><img src="/images/spotify_wrapped/img6.png" alt="img6"></p>
<p>Vamos também criar mais uma coluna como as posição do ranking.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">positions <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;1º&#39;</span>,<span style="color:#e6db74">&#39;2º&#39;</span>,<span style="color:#e6db74">&#39;3º&#39;</span>,<span style="color:#e6db74">&#39;4º&#39;</span>,<span style="color:#e6db74">&#39;5º&#39;</span>,<span style="color:#e6db74">&#39;6º&#39;</span>,<span style="color:#e6db74">&#39;7º&#39;</span>,<span style="color:#e6db74">&#39;8º&#39;</span>,<span style="color:#e6db74">&#39;9º&#39;</span>,<span style="color:#e6db74">&#39;10º&#39;</span>]

artistas_top_10[<span style="color:#e6db74">&#39;position&#39;</span>] <span style="color:#f92672">=</span> positions
musicas_top_10[<span style="color:#e6db74">&#39;position&#39;</span>] <span style="color:#f92672">=</span> positions
</code></pre></div><p>Com isso, já temos tudo que precisamos para fazer uma aplicação parecida com Spotify Wrapped.</p>
<h2 id="visualização">Visualização</h2>
<p>Na etapa de visualização, é buscado criar gráficos que melhor representem os insights, gerados por agregação.</p>
<p>Para ficar um pouco mais fácil para pessoas leigas verem essas informações, iremos plotar um barplot.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">chart <span style="color:#f92672">=</span> sns<span style="color:#f92672">.</span>barplot(data<span style="color:#f92672">=</span>artistas_top_10,  x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;artistName&#39;</span>,y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;msPlayed&#39;</span>)
chart<span style="color:#f92672">.</span>set_xticklabels(chart<span style="color:#f92672">.</span>get_xticklabels(), rotation<span style="color:#f92672">=</span><span style="color:#ae81ff">90</span>)
chart<span style="color:#f92672">.</span>set(title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Top 10 Artistas&#39;</span>)
artistas_top_10
</code></pre></div><h2 id="img7imagesspotify_wrappedimg7png"><img src="/images/spotify_wrapped/img7.png" alt="img7"></h2>
<p><img src="/images/spotify_wrapped/graf3.png" alt="graf3"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">chart <span style="color:#f92672">=</span> sns<span style="color:#f92672">.</span>barplot(data<span style="color:#f92672">=</span>musicas_top_10, x<span style="color:#f92672">=</span>positions,y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;msPlayed&#39;</span>)
chart<span style="color:#f92672">.</span>set_xticklabels(chart<span style="color:#f92672">.</span>get_xticklabels(), size<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
chart<span style="color:#f92672">.</span>set(title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Top 10 Músicas&#39;</span>)
musicas_top_10
</code></pre></div><h2 id="img8imagesspotify_wrappedimg8png"><img src="/images/spotify_wrapped/img8.png" alt="img8"></h2>
<p><img src="/images/spotify_wrapped/graf4.png" alt="graf4"></p>
<h2 id="storytelling">Storytelling</h2>
<p>Na etapa de storytelling, buscamos organizar as conclusões que temos dos dados, através de um formato de história, para facilitar a transmissão do conhecimento.</p>
<p>Baseado nos dados disponibilizados pelo Spotify, foi extraído os 10 artistas mais estucados, e as 10 musicas mais escutadas no último ano, sendo que:</p>
<ul>
<li>1 Podcast</li>
<li>1 Autio Relaxante</li>
<li>8 Músicas de diversos gêneros</li>
</ul>
<p>Nota-se que o usuário tem um gosto musical muito diversificado. Também podemos supor que o usuário possa ter alguma dificuldade para dormir, visto que a segunda música mais ouvida é relacionada ao relaxamento profundo para dormir mais facilmente. Também pode-se perceber que o usuário gosta de conhecimentos gerais, visto que escuta um Podcast com o foco na diversidade.</p>
<p>Portanto, recomenda-se aumentar a relação do usurário com a plataforma, recomendando novos podcast, com o formato semelhante ao que já escuta. Novos sons relaxantes para manter a qualidade do sono ainda melhor, e o anúncio de novos lançamentos do artista &ldquo;Pineapple StormTv&rdquo;, sendo que ocupa duas posições de músicas mais ouvidas e está no Top 3 artistas mais escutados.</p>
]]></content>
        </item>
        
        <item>
            <title>Email com Google Authentication – Refresh Token</title>
            <link>https://patrickpiccini.github.io/posts/google_auth-refresh-token/</link>
            <pubDate>Sun, 22 May 2022 18:00:00 -0300</pubDate>
            
            <guid>https://patrickpiccini.github.io/posts/google_auth-refresh-token/</guid>
            <description>Table of Contents  Introdução  Pré-requisitos   Step 1 – Instalação de bibliotecas Step 2 – Leitura do token.json Step 3 – Função refresh_token Step 4 – Função request_refresh_token Step 5 – Execução Código Completo Conclusão Referências   Introdução Nesse artigo irei continuar o assunto abordado na publicação Email com Google Authentication.
Visto que no primeiro estágio fizemos apenas uma autenticação, nos deparamos com a criação de um arquivo chamado token.</description>
            <content type="html"><![CDATA[<p><img src="/images/google-auth/refresh_token.png" alt="refresh_token"></p>
<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#introdu%C3%A7%C3%A3o">Introdução</a>
<ul>
<li><a href="#pr%C3%A9-requisitos">Pré-requisitos</a></li>
</ul>
</li>
<li><a href="#step-1--instala%C3%A7%C3%A3o-de-bibliotecas">Step 1 – Instalação de bibliotecas</a></li>
<li><a href="#step-2--leitura-do-tokenjson">Step 2 – Leitura do token.json</a></li>
<li><a href="#step-3--fun%C3%A7%C3%A3o-refresh%5C_token">Step 3 – Função refresh_token</a></li>
<li><a href="#step-4--fun%C3%A7%C3%A3o-request%5C_refresh%5C_token">Step 4 – Função request_refresh_token</a></li>
<li><a href="#step-5--execu%C3%A7%C3%A3o">Step 5 – Execução</a></li>
<li><a href="#c%C3%B3digo-completo">Código Completo</a></li>
<li><a href="#conclus%C3%A3o">Conclusão</a></li>
<li><a href="#refer%C3%AAncias">Referências</a></li>
</ul>
<hr>
<h2 id="introdução">Introdução</h2>
<p>Nesse artigo irei continuar o assunto abordado na publicação <a href="https://patrickpiccini.github.io/posts/google-auth/">Email com Google Authentication</a>.</p>
<p>Visto que no primeiro estágio fizemos apenas uma autenticação, nos deparamos com a criação de um arquivo chamado <em>token.json.</em> Nele, está contido uma sequência de informações, sendo elas um token de autenticação, algumas informações do usuário autenticado, e uma data de expiração. Então, quando o usuário utilizar a aplicação que criamos, ele não utilizará mais o arquivo <em>credentias.json</em>, mas sim as informações contidas no <em>token.json.</em></p>
<p>As informações contidas do <em>token.json</em> serão semelhantes aos dados abaixo.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
    <span style="color:#f92672">&#34;scopes&#34;</span>: [<span style="color:#e6db74">&#34;https://mail.google.com/&#34;</span>],
    <span style="color:#f92672">&#34;token_uri&#34;</span>: <span style="color:#e6db74">&#34;https://oauth2.googleapis.com/token&#34;</span>,
    <span style="color:#f92672">&#34;expiry&#34;</span>: <span style="color:#e6db74">&#34;2022-05-21T00:49:13.081000Z&#34;</span>,
    <span style="color:#f92672">&#34;token&#34;</span>: <span style="color:#e6db74">&#34;ya29.a0ARrdaM_Egt-trkKacPEcWEzCC9Lejs7DTo8VnPYRu&#34;</span>,
    <span style="color:#f92672">&#34;client_id&#34;</span>: <span style="color:#e6db74">&#34;725031891889-0533ns1pin5753k.apps.googleusercontent.com&#34;</span>,
    <span style="color:#f92672">&#34;client_secret&#34;</span>: <span style="color:#e6db74">&#34;GOCSPX-VlvdZsYe-0GXpkctKmK&#34;</span>,
    <span style="color:#f92672">&#34;refresh_token&#34;</span>: <span style="color:#e6db74">&#34;1//0h0y8XEIbzPbiCgYIARAAGBESNwF-C7yWA9JaFT_fACew&#34;</span>
}
</code></pre></div><p>Como podemos notar, nesse token que nos é retornado há uma data de expiração. Caso o usuário fique enviando vários e-mails durante o dia, terá que passar pela tela de autenticação inumeras vezes, sendo que a Google disponibiliza apenas 4 horas de validade para cada token.</p>
<p>Visto isso, utilizaremos uma informação contida no <em>token.json</em> chamada refresh_token. Com ela, conseguimos criar um novo token de acesso, sem que o usuário precise passar pela tela do browser.</p>
<h3 id="pré-requisitos">Pré-requisitos</h3>
<ul>
<li>
<p><a href="https://www.python.org/downloads/">Python</a> 2.6 ou superior;</p>
</li>
<li>
<p>Gerenciamento de pacotes <a href="https://pypi.org/project/pip/">PIP</a>;</p>
</li>
<li>
<p>Ter criado o código baseado no primeiro artigo publicado (<a href="https://patrickpiccini.github.io/posts/google-auth/">Email com Google Authentication</a>).</p>
</li>
</ul>
<h3 id="step-1--instalação-de-bibliotecas">Step 1 – Instalação de bibliotecas</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pip install --upgrade jsonlib DateTime requests
</code></pre></div><h3 id="step-2--leitura-do-tokenjson">Step 2 – Leitura do token.json</h3>
<p>Para entender quando iremos criar um novo token de acesso, nos basear pela data de expiração contida no arquivo. Será necessário apontarmos uma variável chamada <em>date_time_now</em>, que irá conter a data/hora atual. Após isso, iremos ler esse <em>token.json,</em> e verificar se a data/hora atual é maior que a data de expiração. Caso sejam, invocaremos uma função chamada de <em>refresh_token.</em></p>
<p>Todas as informações lidas do arquivo <em>token.json</em> serão atribuída à variável <em>Info_json,</em> que passaremos como parâmetro para a nova função criada.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(<span style="color:#e6db74">&#39;token.json&#39;</span>):
        <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;token.json&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>) <span style="color:#66d9ef">as</span> verify:
            info_json <span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>load(verify)

            <span style="color:#66d9ef">if</span> date_time_now <span style="color:#f92672">&gt;</span> info_json[<span style="color:#e6db74">&#39;expiry&#39;</span>]:
                refresh_token(info_json)

        creds <span style="color:#f92672">=</span> Credentials<span style="color:#f92672">.</span>from_authorized_user_file(
            <span style="color:#e6db74">&#39;token.json&#39;</span>, SCOPES)
</code></pre></div><h3 id="step-3--função-refresh_token">Step 3 – Função refresh_token</h3>
<p>A função refresh_token será responsável por requisitar à API do Google um novo token de acesso. Dentro dessa função será feita toda a manipulação de requisição de um novo token, adição de horas de expiração, e escrita das novas informações dentro do arquivo já existente <em>token.json.</em></p>
<p>Primeiramente precisaremos criar o corpo da requisição, seguindo alguns padrões exigidos.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">refresh_token</span>(info_json):
    <span style="color:#66d9ef">try</span>:
        refresh_token_obj <span style="color:#f92672">=</span> {
            <span style="color:#e6db74">&#34;client_id&#34;</span>: str(info_json[<span style="color:#e6db74">&#34;client_id&#34;</span>])<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;u&#39;&#34;</span>, <span style="color:#e6db74">&#34;&#39;&#34;</span>),
            <span style="color:#e6db74">&#34;client_secret&#34;</span>: str(info_json[<span style="color:#e6db74">&#34;client_secret&#34;</span>])<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;u&#39;&#34;</span>, <span style="color:#e6db74">&#34;&#39;&#34;</span>),
            <span style="color:#e6db74">&#34;refresh_token&#34;</span>: str(info_json[<span style="color:#e6db74">&#34;refresh_token&#34;</span>])<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;u&#39;&#34;</span>, <span style="color:#e6db74">&#34;&#39;&#34;</span>), 
            <span style="color:#e6db74">&#34;grant_type&#34;</span>: <span style="color:#e6db74">&#34;refresh_token&#34;</span>
        }
</code></pre></div><p>Logo abaixo, vamos reservar uma variável chamada <em>refresh_credentials</em>. para ela, posteriormente atribuiremos uma nova função nomeada de <em>request_refresh_token</em>, passando como parâmetro as informações que criamos na variável <em>refresh_token_obj.</em></p>
<p>Após isso, a função <em>request_refresh_token</em> retornará um response. Iremos carregar as informações em formato json na variável <em>refresh_toke_obj.</em> Separaremos mais duas informações, uma variável contendo a soma do horário atual + 4 horas, visto que o token é válido por quatro horas, e também o token de acesso retornado da requisição <em>refresh_credentials.</em></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">   refresh_credentials <span style="color:#f92672">=</span> request_refresh_token(refresh_token_obj)

        refresh_toke_obj <span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>loads(refresh_credentials<span style="color:#f92672">.</span>text)
        expiry_time_refresh_token <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>now() <span style="color:#f92672">+</span> timedelta(hours<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>)
        access_token <span style="color:#f92672">=</span> refresh_toke_obj[<span style="color:#e6db74">&#39;access_token&#39;</span>]
</code></pre></div><p>Por fim, uma exception da função caso ocorra falha em alguma dessas informações que manipulamos.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> error:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;Erro criacao de refresh_token.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">{}&#39;</span><span style="color:#f92672">.</span>format(str(error)))
</code></pre></div><h3 id="step-4--função-request_refresh_token">Step 4 – Função request_refresh_token</h3>
<p>O que abordaremos agora será a função itada anteriormente, <em>a request_refresh_token.</em> Nela, iremos apenas fazer uma requisição post para a url <a href="https://oauth2.googleapis.com/token">https://oauth2.googleapis.com/token</a>, passando as informações que montamos na variável <em>refresh_token_obj</em> anteriormente.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">request_refresh_token</span>(refresh_token_obj):
    <span style="color:#66d9ef">try</span>:
        <span style="color:#66d9ef">return</span> requests<span style="color:#f92672">.</span>post(<span style="color:#e6db74">&#39;https://oauth2.googleapis.com/token&#39;</span>, data<span style="color:#f92672">=</span>refresh_token_obj)
</code></pre></div><p>Assim, finalizaremos com uma sequência de possíveis exceções que podem ocorrem na requisição.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">except</span> requests<span style="color:#f92672">.</span>exceptions<span style="color:#f92672">.</span>Timeout <span style="color:#66d9ef">as</span> e:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;Request Timeout exception:</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">{}&#39;</span><span style="color:#f92672">.</span>format(v))
        <span style="color:#66d9ef">return</span>
    <span style="color:#66d9ef">except</span> requests<span style="color:#f92672">.</span>exceptions<span style="color:#f92672">.</span>TooManyRedirects <span style="color:#66d9ef">as</span> e:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;Request too many redirects exception:</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">{}&#39;</span><span style="color:#f92672">.</span>format(str(e)))
        <span style="color:#66d9ef">return</span>
    <span style="color:#66d9ef">except</span> requests<span style="color:#f92672">.</span>exceptions<span style="color:#f92672">.</span>RequestException <span style="color:#66d9ef">as</span> e:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;Request exception:</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">{}&#39;</span><span style="color:#f92672">.</span>format(str(e)))
        <span style="color:#66d9ef">return</span>
</code></pre></div><h3 id="step-5--execução">Step 5 – Execução</h3>
<p>O funcionamento será o mesmo mostrado no artigo <a href="https://patrickpiccini.github.io/posts/google-auth/">Email com Google Authentication</a>.
Executando o arquivo <em>SendEmail.py,</em> abrirá uma página de seleção de usuário para autenticação.</p>
<p><img src="/images/google-auth/img1.png" alt="img1"></p>
<p>Como meu aplicativo não foi publicado, irá aparecer uma tela de verificação para aceitar o acesso as informações confidenciais da conta do google que desejamos autenticar.</p>
<p><img src="/images/google-auth/img2.png" alt="img2"></p>
<p><img src="/images/google-auth/img3.png" alt="img3"></p>
<p><img src="/images/google-auth/img4.png" alt="img4"></p>
<p>Após isso, a conexão será autenticada e o email será enviado ao destinatário.</p>
<p><img src="/images/google-auth/img5.png" alt="img5"></p>
<p>Depois de o usuário passar por esse estágio de autenticação, não precisará mais refazer todos esses passos, visto que a atualização que fizemos no código já irá gerar novos tokens automaticamente.</p>
<h3 id="código-completo">Código Completo</h3>
<p><a href="https://github.com/patrickpiccini/email-google-auth-2">Code - Email com Google Authentication – Refresh Token</a></p>
<h2 id="conclusão">Conclusão</h2>
<p>Nesse artigo abordamos a segunda etapa para aplicação de autenticação utilizando Gmail API. Foi mostrado como verificar a validade do token de acesso através da data de expiração. Caso esse token esteja expirado, criamos duas novas funções chamadas de <em>refresh_token</em> e <em>request_refresh_token</em>, responsáveis por requisitar um novo token de acesso, e inseri-lo no arquivo <em>token.json</em> com uma nova data de expiração. Assim, o usuário não precisará ficar passando pelas telas de Login com o Google diversas vezes ao dia. Tudo isso a nova atualização no código fará em back-end para o usuário.</p>
<p>Reforçando o que citei no artigo anterior: Existem outros métodos de autenticação de usuário, e diferentes formas de desenvolver o código para a autenticação, basta saber fazer a procura certa no google que encontrará.</p>
<p>Espero que tenha gostado dessa publicação, e que possa usá-la de alguma forma em seu dia a dia.</p>
<h3 id="referências">Referências</h3>
<p><a href="https://support.google.com/accounts/answer/6010255?p=less-secure-apps&amp;hl=pt-BR&amp;visit_id=637824317526826001-2187211079&amp;rd=1">Apps menos seguros e a Conta do Google</a>);</p>
<p><a href="https://developers.google.com/workspace/guides/create-project">Create a Google Cloud project</a>;</p>
<p><a href="https://developers.google.com/workspace/guides/create-credentials">Create access credentials</a>;</p>
<p><a href="https://developers.google.com/gmail/api/quickstart/python">Python Quickstart</a>;</p>
<p><a href="https://developers.google.com/gmail/api/guides/sending">Sending Email</a>.</p>
]]></content>
        </item>
        
        <item>
            <title>Email com Google Authentication</title>
            <link>https://patrickpiccini.github.io/posts/google-auth/</link>
            <pubDate>Tue, 12 Apr 2022 21:00:50 -0300</pubDate>
            
            <guid>https://patrickpiccini.github.io/posts/google-auth/</guid>
            <description>Table of Contents  Introdução  Pré-Requisitos Arquitetura   Step 1 – Criar credenciais Step 2 – Instalação de bibliotecas Step 3 – Criação de código de autenticação Step 4 – Criação do código de envio de e-mail Step 5 – Execução Código Completo Conclusão Referências   Introdução Nesse artigo irei abordar uma situação que recentemente a Google publicou referente ao login a conta Google, utilizando somente o usuário e senha para se conectar em apps de terceiros.</description>
            <content type="html"><![CDATA[<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#introdu%C3%A7%C3%A3o">Introdução</a>
<ul>
<li><a href="#pr%C3%A9-requisitos">Pré-Requisitos</a></li>
<li><a href="#a-aplica%C3%A7%C3%A3o-ter%C3%A1-a-seguinte-arquitetura">Arquitetura</a></li>
</ul>
</li>
<li><a href="#step-1--criar-credenciais">Step 1 – Criar credenciais</a></li>
<li><a href="#step-2--instala%C3%A7%C3%A3o-de-bibliotecas">Step 2 – Instalação de bibliotecas</a></li>
<li><a href="#step-3--cria%C3%A7%C3%A3o-de-c%C3%B3digo-de-autentica%C3%A7%C3%A3o">Step 3 – Criação de código de autenticação</a></li>
<li><a href="#step-4--cria%C3%A7%C3%A3o-do-c%C3%B3digo-de-envio-de-e-mail">Step 4 – Criação do código de envio de e-mail</a></li>
<li><a href="#step-5--execu%C3%A7%C3%A3o">Step 5 – Execução</a></li>
<li><a href="#c%C3%B3digo-completo">Código Completo</a></li>
<li><a href="#conclus%C3%A3o">Conclusão</a></li>
<li><a href="#refer%C3%AAncias">Referências</a></li>
</ul>
<hr>
<h2 id="introdução">Introdução</h2>
<p>Nesse artigo irei abordar uma situação que recentemente a Google publicou referente ao login a conta Google, utilizando somente o usuário e senha para se conectar em apps de terceiros. Segue um trecho da publicação:</p>
<p><em>- &ldquo;Para proteger sua conta, o Google vai deixar de oferecer suporte para o uso de apps ou dispositivos de terceiros que solicitam login na Conta do Google usando apenas seu nome de usuário e senha. Essa mudança será válida a partir de 30 de maio de 2022. Continue lendo para mais informações&rdquo; -</em> <a href="https://support.google.com/accounts/answer/6010255?p=less-secure-apps&amp;hl=pt-BR&amp;visit_id=637824317526826001-2187211079&amp;rd=1"><em>Apps menos seguros e a Conta do Google</em></a>.)</p>
<p>Tendo em vista que muitas aplicações do mercado utilizam esse método simples de login (usuário e senha), criei esse pequeno artigo explicando e desenvolvendo um método de autenticação a conta do google, através das APIs que o Google disponibiliza. Fazendo com que não haja a necessidade de liberar nas configurações da conta a opção de &ldquo;permitir apps menos seguros&rdquo;</p>
<p><strong>Obs</strong>: Os exemplos de códigos apresentados nesse artigo foram todos baseados nas documentações oficiais da Google, porém refartados, trazendo a clareza e a simplicidade no desenvolvimento da aplicação.</p>
<p>Para usar a Gmail API é necessário ter uma conta na Google Cloud Plataform, onde o cadastro pode ser feito <a href="https://console.cloud.google.com/freetrial/signup/tos?_ga=2.255782728.1788355950.1649683957-1725700722.1640005169&amp;_gac=1.61556062.1649692396.CjwKCAjwo8-SBhAlEiwAopc9W-9WErTEtw9O2DIPMgtBZHRMMb8iu52gwJgAgy-YPZidJP80yxSCahoCk94QAvD_BwE">AQUI</a>.</p>
<h3 id="pré-requisitos">Pré-Requisitos</h3>
<ul>
<li>
<p><a href="https://www.python.org/downloads/">Python</a> 2.6 ou superior;</p>
</li>
<li>
<p>Gerenciamento de pacotes <a href="https://pypi.org/project/pip/">PIP</a>;</p>
</li>
<li>
<p>Um projeto na Google Cloud Platform com GmailAPI ativada. Para criar um projeto e ativar uma API, consulte <a href="https://developers.google.com/workspace/guides/create-project">Criar um projeto e ativar a API</a>.</p>
</li>
</ul>
<h4 id="a-aplicação-terá-a-seguinte-arquitetura">A aplicação terá a seguinte arquitetura:</h4>
<pre><code>Aplication
    ↳ GoogleAuthenticator.py
    ↳ SendEmail.py
    ↳ credentials.json
</code></pre><h3 id="step-1--criar-credenciais">Step 1 – Criar credenciais</h3>
<p>Para comunicação da aplicação e a API, deve ser baixado as credenciais de acesso, obtida em <strong>≡</strong> <em>&gt; APIs &amp; Services &gt; Credentials,</em> depois em Click <em>Create credentials &gt; API key.</em></p>
<p>Para visualizar a documentação oficial acesse <a href="https://developers.google.com/workspace/guides/create-credentials">Create access credentials</a>.</p>
<h3 id="step-2--instalação-de-bibliotecas">Step 2 – Instalação de bibliotecas</h3>
<p>Instalar a biblioteca do Google Client.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib pybase64 email-to
</code></pre></div><h3 id="step-3--criação-de-código-de-autenticação">Step 3 – Criação de código de autenticação</h3>
<p>Criar um arquivo <em>GoogleAuthenticator.py</em>.</p>
<p>Ao abrir o arquivo, deve-se fazer uma sequência de importações das bibliotecas instaladas.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> os.path
<span style="color:#f92672">from</span> google.auth.transport.requests <span style="color:#f92672">import</span> Request
<span style="color:#f92672">from</span> google.oauth2.credentials <span style="color:#f92672">import</span> Credentials
<span style="color:#f92672">from</span> google_auth_oauthlib.flow <span style="color:#f92672">import</span> InstalledAppFlow
<span style="color:#f92672">from</span> googleapiclient.discovery <span style="color:#f92672">import</span> build
<span style="color:#f92672">from</span> googleapiclient.errors <span style="color:#f92672">import</span> HttpError
</code></pre></div><p>Abaixo das importações, deverá ser criado uma definition que será chamara para ocorrer a autenticação. Nela deve conter como parâmetros, <em>client_secret_file</em>(arquivo baixado contendo as credenciais de acesso), <em>api_service_name</em>(nome do serviço de API), <em>api version</em>(versão da API) e <em>scopes</em>(é responsável por solicitar o acesso as APIs do Google).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">authenticator</span>(client_secret_file, api_service_name, api_version, <span style="color:#f92672">*</span>scopes):
    CLIENT_SECRET_FILE <span style="color:#f92672">=</span> client_secret_file
    API_SERVICE_NAME <span style="color:#f92672">=</span> api_service_name
    API_VERSION <span style="color:#f92672">=</span> api_version
    SCOPES <span style="color:#f92672">=</span> [scope <span style="color:#66d9ef">for</span> scope <span style="color:#f92672">in</span> scopes[<span style="color:#ae81ff">0</span>]]

    credentials <span style="color:#f92672">=</span> None
</code></pre></div><p>A lógica será bem simples. Primeiro deve-se verificar se existe no diretório atual o arquivo <em>token.json,</em> que é responsável por conter em seu corpo, todas informações de um usuário já autenticado pela aplicação. Caso não exista, o código ira ler um arquivo chamado <em>credentials.json,</em> que dentro dele há as credenciais para a autenticação, como <em>client_id, client_secret</em> entre outras. Ambos os arquivos são atribuídos a variável <strong>&ldquo;credentials&rdquo;</strong> que será usado na chamada da API posteriormente.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(<span style="color:#e6db74">&#39;DocGoogle/token.json&#39;</span>):
        credentials <span style="color:#f92672">=</span> Credentials<span style="color:#f92672">.</span>from_authorized_user_file(
            <span style="color:#e6db74">&#39;DocGoogle/token.json&#39;</span>, SCOPES)
    
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> credentials <span style="color:#f92672">or</span> <span style="color:#f92672">not</span> credentials<span style="color:#f92672">.</span>valid:
        <span style="color:#66d9ef">if</span> credentials <span style="color:#f92672">and</span> credentials<span style="color:#f92672">.</span>expired <span style="color:#f92672">and</span> credentials<span style="color:#f92672">.</span>refresh_token:
            credentials<span style="color:#f92672">.</span>refresh(Request())
        <span style="color:#66d9ef">else</span>:
            flow <span style="color:#f92672">=</span> InstalledAppFlow<span style="color:#f92672">.</span>from_client_secrets_file(
                CLIENT_SECRET_FILE, SCOPES)
            credentials <span style="color:#f92672">=</span> flow<span style="color:#f92672">.</span>run_local_server(port<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>)

</code></pre></div><p>Após a autenticação, iremos salvar as credenciais do usuário autenticado no arquivo <em>token.json</em>, para que nas próximas vezes que a aplicação for usada, não necessite passar pelo processo de autenticação novamente.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">        <span style="color:#75715e"># Save the credentials for the next run</span>
        <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;DocGoogle/token.json&#39;</span>, <span style="color:#e6db74">&#39;w&#39;</span>) <span style="color:#66d9ef">as</span> token:
            token<span style="color:#f92672">.</span>write(credentials<span style="color:#f92672">.</span>to_json())
</code></pre></div><p>Agora, é necessário fazer uma chamada a API do google com os arquivos <em>token.json</em> ou <em>credential.json</em> que está na variável <strong>&ldquo;credentials&rdquo;</strong> como citado anteriormente. Com a função <em>build</em> será construído um Resource Object para interagir com a API, e assim, retorne a confirmação ou rejeição do acesso. Caso ocorra um erro na chamada a API, será disparado um except para o tratamento do erro.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">try</span>:
        <span style="color:#75715e"># Call the Gmail API</span>
        service <span style="color:#f92672">=</span> build(API_SERVICE_NAME, API_VERSION, credentials<span style="color:#f92672">=</span>credentials)
        <span style="color:#66d9ef">print</span>(API_SERVICE_NAME, <span style="color:#e6db74">&#39;service created successfully&#39;</span>)
        <span style="color:#66d9ef">return</span> service

    <span style="color:#66d9ef">except</span> HttpError <span style="color:#66d9ef">as</span> error:
        <span style="color:#75715e"># TO DO(developer) - Handle errors from gmail API.</span>
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;An error occurred: {}&#39;</span><span style="color:#f92672">.</span>format(error))
</code></pre></div><h3 id="step-4--criação-do-código-de-envio-de-e-mail">Step 4 – Criação do código de envio de e-mail</h3>
<p>Criar um arquivo <em>SendEmail.py</em>.</p>
<p>Ao abrir o arquivo, deve-se fazer uma sequência de importações das bibliotecas instaladas.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> base64
<span style="color:#f92672">from</span> quickstart <span style="color:#f92672">import</span> authenticator
<span style="color:#f92672">from</span> email.mime.text <span style="color:#f92672">import</span> MIMEText
<span style="color:#f92672">from</span> googleapiclient.errors <span style="color:#f92672">import</span> HttpError
</code></pre></div><p>Nota-se que foi importado a <em>def authenticator</em> do arquivo <em>GoogleAuthenticator.py .</em></p>
<p>É criado as variáveis <em>CLIENT_SECRET_FILE</em> que é atribuído o arquivo credential.json, <em>API_NAME</em> contendo o nome da aplicação, <em>API VERSION</em> com a versão, e <em>SCOPES</em> com a url para a solicitação a API. Tudo isso é passado como parâmetro para a <em>def euthenticator.</em></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">CLIENT_SECRET_FILE <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;DocGoogle/credentials.json&#39;</span>
API_NAME <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;gmail&#39;</span>
API_VERSION <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;v1&#39;</span>
SCOPES <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;https://mail.google.com/&#39;</span>]

service <span style="color:#f92672">=</span> authenticator(CLIENT_SECRET_FILE, API_NAME, API_VERSION, SCOPES)
</code></pre></div><p>Apenas com essa parte já se consegue criar uma autenticação apenas executando o arquivo <em>SendEmail.py,</em> porém como o objetivo é enviar um email com o usuario autenticado, continuarei mostrando o final do código.</p>
<p>Agora é necessário criar os campos para envio de email como, Titulo, Mensagem, Remetente e Destinatário.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">message <span style="color:#f92672">=</span> MIMEText(<span style="color:#e6db74">&#39;Python Mail test using API Google&#39;</span>)
message[<span style="color:#e6db74">&#39;from&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;your_email@gmail.com&#34;</span>
message[<span style="color:#e6db74">&#39;to&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;recipient@gmail.com&#39;</span>
message[<span style="color:#e6db74">&#39;subject&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;API Google&#39;</span>
raw_string <span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>urlsafe_b64encode(message<span style="color:#f92672">.</span>as_bytes())<span style="color:#f92672">.</span>decode()
</code></pre></div><p>Nesse momento é executado o envio do email passando o response da autenticação que está contida na variavel <em>service</em>, e os demais dados preenchidos. Todas essas informações foram codificadas em base64 para facilitar a transferência na Internet.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">try</span>:
    message <span style="color:#f92672">=</span> service<span style="color:#f92672">.</span>users()<span style="color:#f92672">.</span>messages()<span style="color:#f92672">.</span>send(userId<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;me&#39;</span>, body<span style="color:#f92672">=</span>{<span style="color:#e6db74">&#39;raw&#39;</span>: raw_string})<span style="color:#f92672">.</span>execute()
    <span style="color:#66d9ef">print</span> (<span style="color:#e6db74">&#39;Message Id: {}&#39;</span>)<span style="color:#f92672">.</span>format(message[<span style="color:#e6db74">&#39;id&#39;</span>])
<span style="color:#66d9ef">except</span> HttpError <span style="color:#66d9ef">as</span> error:
     <span style="color:#66d9ef">print</span> (<span style="color:#e6db74">&#39;An error occurred: {}&#39;</span>)<span style="color:#f92672">.</span>format(error)

</code></pre></div><h3 id="step-5--execução">Step 5 – Execução</h3>
<p>Executando o arquivo <em>SendEmail.py,</em> abrirá uma página de seleção de usuário para autenticação.</p>
<p><img src="/images/google-auth/img1.png" alt="img1"></p>
<p>Como meu aplicativo não foi publicado, irá aparecer uma tela de verificação para aceitar o acesso as informações confidenciais da conta do google que desejamos autenticar.</p>
<p><img src="/images/google-auth/img2.png" alt="img2"></p>
<p><img src="/images/google-auth/img3.png" alt="img3"></p>
<p><img src="/images/google-auth/img4.png" alt="img4"></p>
<p>Após isso, a conexão será autenticada e o email será enviado ao destinatário.</p>
<p><img src="/images/google-auth/img5.png" alt="img5"></p>
<h2 id="código-completo">Código Completo</h2>
<p><a href="https://github.com/patrickpiccini/email-google-auth">Code - Email com Google Authentication</a></p>
<h2 id="conclusão">Conclusão</h2>
<p>Nesse artigo foi abordado uma técnica básica de autenticação de usuário do google para aplicações de terceiros. Com apenas as ferramentas disponibilizadas pela Google como o GmailAPI e bibliotecas python. No decorrer do desenvolvimento percebe-se a estrutura que foi utilizada é fácil para ser implementada em qualquer aplicação, basta adaptá-la a regra de negócio.</p>
<p>Existem outros métodos de autenticação de usuário, e diferentes formas de desenvolver o código para a autenticação, basta saber fazer a procura certa no google que encontrará.</p>
<p>Espero que tenha gostado dessa publicação, e que possa usá-la de alguma forma em seu dia a dia.</p>
<h3 id="referências">Referências</h3>
<p><a href="https://support.google.com/accounts/answer/6010255?p=less-secure-apps&amp;hl=pt-BR&amp;visit_id=637824317526826001-2187211079&amp;rd=1">Apps menos seguros e a Conta do Google</a>);</p>
<p><a href="https://developers.google.com/workspace/guides/create-project">Create a Google Cloud project</a>;</p>
<p><a href="https://developers.google.com/workspace/guides/create-credentials">Create access credentials</a>;</p>
<p><a href="https://developers.google.com/gmail/api/quickstart/python">Python Quickstart</a>;</p>
<p><a href="https://developers.google.com/gmail/api/guides/sending">Sending Email</a>.</p>
]]></content>
        </item>
        
    </channel>
</rss>
