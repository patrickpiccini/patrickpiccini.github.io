<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Patrick Piccini</title>
        <link>https://patrickpiccini.github.io/posts/</link>
        <description>Recent content in Posts on Patrick Piccini</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
        <lastBuildDate>Thu, 16 Jun 2022 10:01:53 -0300</lastBuildDate>
        <atom:link href="https://patrickpiccini.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Microservice Project – Step 3</title>
            <link>https://patrickpiccini.github.io/posts/microservice_project_step03/</link>
            <pubDate>Thu, 16 Jun 2022 10:01:53 -0300</pubDate>
            
            <guid>https://patrickpiccini.github.io/posts/microservice_project_step03/</guid>
            <description>Table of Contents  Criação do Docker-Compose-Services Teste na OCI Resumo   Nesse próximo passo, parto do pressuposto que meu ambiente já está configurado e com todas as instalações feitas, assim, posso começar a criar as primeiras linhas de código.
Devemos começar criando uma pasta chamada MS-Application. Essa pasta será onde iremos criar todos os microsserviços, configuração de containers de serviço, e mais alguns detalhes, que serão mostrados no decorrer das publicações.</description>
            <content type="html"><![CDATA[<p><img src="/images/microservice_project/microservices.png" alt="microservices"></p>
<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#cria%C3%A7%C3%A3o-do-docker-compose-services">Criação do Docker-Compose-Services</a></li>
<li><a href="#teste-na-oci">Teste na OCI</a></li>
<li><a href="#resumo">Resumo</a></li>
</ul>
<hr>
<p>Nesse próximo passo, parto do pressuposto que meu ambiente já está configurado e com todas as instalações feitas, assim, posso começar a criar as primeiras linhas de código.</p>
<p>Devemos começar criando uma pasta chamada <em>MS-Application.</em> Essa pasta será onde iremos criar todos os microsserviços, configuração de containers de serviço, e mais alguns detalhes, que serão mostrados no decorrer das publicações.</p>
<p>Na raiz da pasta, criamos um arquivo chamado <em>docker-compose-services.yml.</em></p>
<pre><code class="language-Estrutura" data-lang="Estrutura">MS-Application
│   docker-compose-services.yml
</code></pre><h2 id="criação-do-docker-compose-services">Criação do Docker-Compose-Services</h2>
<p>Como vamos usar containers para praticamente tudo, será necessário que os servidores Rabbit, Redis, Postgres, e interfaces de manager sejam criadas separadamente em seus devidos containers. É necessária essa separação para que nenhum servidor dependa do outro para funcionar. Com isso, já temos os primeiros passos na criação da arquitetura de microsserviços.</p>
<p>Para inicializar esses serviços rapidamente, iremos desenvolver um Docker-Compose e configuraremos uma <em>Network</em>, onde posteriormente estarão todos os serviços dentro dessa mesma rede.</p>
<p>A rede foi nomeada de <em>internal-network,</em> nela, iremos configurar o endereço 10.5.0.0 sendo uma rede classe A, com uma máscara de rede /16. Também iremos definir o gateway da rede para 10.5.0.1.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-docker" data-lang="docker">version: <span style="color:#e6db74">&#34;3.7&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>networks:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>  network-service:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    driver: bridge<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    name: internal-network<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    ipam:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      config:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>        - subnet: 10.5.0.0/16<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>          gateway: 10.5.0.1<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>Nos serviços, iniciamos configurando o RabbitMQ. Utilizaremos a imagem <em>rabbitmq:3-management-alpine,</em> que é uma imagem mínima do Docker baseada no Alpine Linux com um índice de pacotes completo e apenas 5 MB de tamanho. Nas variáveis de ambiente é deixado com o valor padrão o user, password e host, que será utilizado posteriormente para conectar ao manager do rabbit. Nas portas, devemos colocar 15672 para o manager e 5672 para o servidor. E por fim, iremos configurar o contêiner para ficar dentro da Network que foi criada anteriormente, apontando também um ip estático para essa instancia.</p>
<p><a href="https://hub.docker.com/_/alpine">Alpine</a></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-docker" data-lang="docker">services:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>  rabbitmq:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    image: <span style="color:#e6db74">&#34;rabbitmq:3-management-alpine&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    environment:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      RABBITMQ_DEFAULT_USER: <span style="color:#e6db74">&#34;guest&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      RABBITMQ_DEFAULT_PASS: <span style="color:#e6db74">&#34;guest&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      RABBITMQ_DEFAULT_VHOST: <span style="color:#e6db74">&#34;/&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    ports:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      - <span style="color:#e6db74">&#34;15672:15672&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      - <span style="color:#e6db74">&#34;5672:5672&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    labels:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      NAME: <span style="color:#e6db74">&#34;rabbitmq1&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    networks:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      network-service:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>        ipv4_address: 10.5.0.10<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>A estrutura dos próximos serviços é bem semelhante a essa primeira, com apenas alguns detalhes como diferença. No Postgres, utilizaremos a imagem <em>postgres:13</em>, iremos indicar as variáveis padrões do user e password para conexão a instância, apontaremos a porta padrão 5432, criaremos um volume compartilhado de <em>.data</em> para <em>/data/,</em> configuraremosaNetwork com o ip estático, e um detalhe muito importante, será colocado o parâmetro <em>restart: Always</em> que fará com que a instância seja reiniciada caso pare de funcionar. Se for interrompido manualmente, ele será reiniciado somente quando o daemon do Docker for reiniciado ou o próprio contêiner for reiniciado manualmente.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-docker" data-lang="docker">  postgres:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    container_name: postgres_container<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    image: postgres:13<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    restart: always<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    environment:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      POSTGRES_USER: postgres<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      POSTGRES_PASSWORD: postgres<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      POSTGRES_DB: baseapplication<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    ports:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      - <span style="color:#e6db74">&#34;5432:5432&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    volumes:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      - ./data:/data/<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    networks:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      network-service:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>        ipv4_address: 10.5.0.11<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>Para ter uma parte visual do banco de dados, faremos a criação de uma instância com o PgAdmin, que poderemos conectar ao servidor do postgres via Web. Sendo assim, iremos utilizar a imagem <em>dpage/pgadmin4,</em> com as variáveis de e-mail e password para entrarmos na página web. Iremos apontar a porta de 16543/80 (external/internal), compartilharemos os volumes./data/:/data/ e ./postgres-backup:/var/lib/postgresql/backups, iremos configurar a network com um ip estático, e colaremos uma dependência no parâmetro <em>depends_on – postgres.</em> Isso fará com o a instância do PgAdmin só seja criada, após a criação da instância do postgres.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-docker" data-lang="docker">  pgadmin:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    container_name: pgadmin_container<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    image: dpage/pgadmin4<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    environment:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      PGADMIN_DEFAULT_EMAIL: admin@admin.com<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      PGADMIN_DEFAULT_PASSWORD: admin<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    ports:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      - <span style="color:#e6db74">&#34;16543:80&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    depends_on:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      - postgres<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    volumes:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      - ./data/:/data/<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      - ./postgres-backup:/var/lib/postgresql/backups<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    networks:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      network-service:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>        ipv4_address: 10.5.0.12<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>E para camada de cache, iremos criar uma instância com Redis utilizando a imagem <em>redis:alpine</em>, apontando a porta padrão 6379, e configurando a Network com um ip estático.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-docker" data-lang="docker">  redis:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    image: redis:alpine<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    container_name: redis-container<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    ports:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      - <span style="color:#e6db74">&#34;6379:6379&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    networks:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>      network-service:<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>        ipv4_address: 10.5.0.9<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>No final, teremos vários containers rodando dentro de uma Rede, tendo algo parecido com a seguinte imagem:</p>
<p><img src="/images/microservice_project/img16.jpg" alt="img16"></p>
<h2 id="teste-na-oci">Teste na OCI</h2>
<p>Agora que temos pronto o Docker-Compose com todos os serviços que utilizaremos, devemos fazer um teste dentro da VM que criamos na OCI. Para conseguir compartilhar o código, faço <em>um git commit</em> de minha pasta MS-Application, e dentro da instância OCI dou um <em>git pull</em> para baixar.</p>
<p>OBS: Não entrarei em detalhes nos comandos do git, caso tenha alguma dúvida especifica, consulte a documentação oficial: <a href="https://comandosgit.github.io/"><strong>https://comandosgit.github.io/</strong></a></p>
<p>Dentro a instância, inicio meus serviços com o comando <em>docker-compose -f docker-compose-services.yml up,</em> e passo o nome do arquivo que deverá ser iniciado.</p>
<p>Nesse momento começará a baixar as imagens dos contêineres.</p>
<p><img src="/images/microservice_project/img17.jpg" alt="img17"></p>
<p><img src="/images/microservice_project/img18.jpg" alt="img18"></p>
<p><img src="/images/microservice_project/img19.jpg" alt="img19"></p>
<p>Agora que está tudo rodando, pude fazer um teste me conectando ao manager do RabbitMQ pela Web. Porém como a aplicação está em cloud, é necessário que nas configurações da VNC do projeto, sejam expostas as portas que iremos utilizar para nos conectar externamente.</p>
<p><img src="/images/microservice_project/img20.jpg" alt="img20"></p>
<p>Na OCI, em Networking &gt; Virtual Cloud Networks &gt; sua_vnc &gt; Security List Details &gt; Ingress Rules. iremos adicionar as portas que utilizaremo</p>
<p><img src="/images/microservice_project/img21.jpg" alt="img21"></p>
<p><img src="/images/microservice_project/img22.jpg" alt="img22"></p>
<p>Após a liberação da porta, consegui ter acesso aos meus contêineres, tanto o do rabbit quando ao pgadmin, que também liberei a porta. Percebam que para me conectar aos meus contêineres, utilizo o ip public da VM que estou utilizando.</p>
<p><img src="/images/microservice_project/img23.jpg" alt="img23"></p>
<p><img src="/images/microservice_project/img24.jpg" alt="img24"></p>
<h2 id="resumo">Resumo</h2>
<p>Nesse Step, criamos o arquivo <em>docker-compose-services.yml</em> que é responsável por iniciar os servidores RabbitMQ, Postgres e Redis, juntamente as interfaces PgAdmin e RabbitManager. Foram liberadas as portas dos servidores para visualização externa, e também foi feito um teste acessando as interfaces externamente à OCI, tendo sucesso na conexão.</p>
]]></content>
        </item>
        
        <item>
            <title>Microservice Project – Step 2</title>
            <link>https://patrickpiccini.github.io/posts/microservice_project_step02/</link>
            <pubDate>Thu, 09 Jun 2022 10:01:52 -0300</pubDate>
            
            <guid>https://patrickpiccini.github.io/posts/microservice_project_step02/</guid>
            <description>Table of Contents  Entrar na Instancia via shell Instalar Docker Instalar Docker-Compose Instalar Git Resumo   Após Configurar a infraestrutura no Oracle Cloud, necessitamos fazer instalações de alguns programas que iremos utilizar. O Docker para a criação dos nossos containers de servidores e microsserviços, o Docker-Compose para facilitar a criação dos containers, e o Git, para versionamento de código.
Como desenvolvi os códigos fora de nossa VM da OCI, o Git é o fator principal para que todos os códigos sejam disponíveis facilmente.</description>
            <content type="html"><![CDATA[<p><img src="/images/microservice_project/microservices.png" alt="microservices"></p>
<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#entrar-na-instancia-via-shell">Entrar na Instancia via shell</a></li>
<li><a href="#instalar-docker">Instalar Docker</a></li>
<li><a href="#instalar-docker-compose">Instalar Docker-Compose</a></li>
<li><a href="#instalar-git">Instalar Git</a></li>
<li><a href="#resumo">Resumo</a></li>
</ul>
<hr>
<p>Após Configurar a infraestrutura no Oracle Cloud, necessitamos fazer instalações de alguns programas que iremos utilizar. O Docker para a criação dos nossos containers de servidores e microsserviços, o Docker-Compose para facilitar a criação dos containers, e o Git, para versionamento de código.</p>
<p>Como desenvolvi os códigos fora de nossa VM da OCI, o Git é o fator principal para que todos os códigos sejam disponíveis facilmente.</p>
<h2 id="entrar-na-instancia-via-shell">Entrar na Instancia via shell</h2>
<p>Logado no usuário <strong>devel_user</strong> , iniciei o cloud shell para conectar-se ao VM criada através do SSH Connection.</p>
<p>* Detalhe, essa conexão pode ser feita de qualquer terminal ou computador que tenha acesso ao SSH Connection, desde que se tenha cadastrado na hora da criação da VM a SSH-KEY da máquina que onde se conectará.</p>
<p>Com o comando <strong>ssh opc@&lt;ip_public&gt;</strong> entrei na máquina e comecei a fazer a instalação com o pacote de instalação Dandified YUM (DNF) no Oracle Linux 8.</p>
<h2 id="instalar-docker">Instalar Docker</h2>
<p>Com a sequência de comando abaixo, foi instalado o Docker na VM:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">dnf install -y dnf-utils zip unzip
dnf config-manager --add-repo<span style="color:#f92672">=</span>https://download.docker.com/linux/centos/docker-ce.repo
dnf remove -y runc
dnf install -y docker-ce --nobest
systemctl enable docker.service
systemctl start docker.service
systemctl status docker.service
docker version
</code></pre></div><p>Adicionar o usuário ao grupo docker para poder executar comandos Docker;</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo usermod -aG docker opc
newgrp docker  
</code></pre></div><p>Vemos que Docker está rodando e pronto para ser usando.</p>
<p><img src="/images/microservice_project/img14.jpg" alt="img14"></p>
<h2 id="instalar-docker-compose">Instalar Docker-Compose</h2>
<p>Foi instalado o Docker-Compose na VM com os seguintes comandos:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo dnf -y install curl
curl -s https://api.github.com/repos/docker/compose/releases/latest|grep browser_download_url|grep docker-compose-linux-x86_64|cut -d <span style="color:#e6db74">&#39;&#34;&#39;</span> -f 4|wget -qi –
ls -1 docker-compose-linux-x86_64*
sha256sum -c docker-compose-linux-x86_64.sha256
chmod +x docker-compose-linux-x86_64
sudo mv docker-compose-linux-x86_64 /usr/local/bin/docker-compose
docker-compose version
</code></pre></div><p>Docker-Compose instalado com sucesso.</p>
<p><img src="/images/microservice_project/img15.jpg" alt="img15"></p>
<h2 id="instalar-git">Instalar Git</h2>
<p>Comandos para instalação do Git:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel -y
yum install gcc perl-ExtUtils-MakeMaker -y
cd /usr/local/
wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.35.1.tar.gz
tar zxvf git-2.35.1.tar.gz
cd git-2.35.1/
make prefix<span style="color:#f92672">=</span>/usr/local/git all
make prefix<span style="color:#f92672">=</span>/usr/local/git install
echo <span style="color:#e6db74">&#34;export PATH=</span>$PATH<span style="color:#e6db74">:/usr/local/git/bin&#34;</span> &gt;&gt; /etc/bashrc
source /etc/bashrc
</code></pre></div><h2 id="resumo">Resumo</h2>
<p>Nesse Step, nos conectamos a instância da OCI e instalamos algumas dependências para o nosso ambiente de produção. Instalamos o Docker, Docker-Compose e Git.</p>
]]></content>
        </item>
        
        <item>
            <title>Microservice Project – Step 1</title>
            <link>https://patrickpiccini.github.io/posts/microservice_project_step01/</link>
            <pubDate>Thu, 02 Jun 2022 13:00:52 -0200</pubDate>
            
            <guid>https://patrickpiccini.github.io/posts/microservice_project_step01/</guid>
            <description>Table of Contents  Criação do Compartment Criação de Usuário Criação de Grupo Criação de Policies Criação de SSH-KEY Criação de Instancia VM Resumo   Nesse primeiro passo, iremos configurar um ambiente OCI para rodar toda a aplicação em cloud.
Criação do Compartment Iremos criar um conpartiment.
No ícone de hamburguer na página inicial do OCI, iremos em &amp;gt; Identity &amp;gt; Security &amp;gt; compartments, e criaremos um compartimento com o nome Developmet.</description>
            <content type="html"><![CDATA[<p><img src="/images/microservice_project/microservices.png" alt="microservices"></p>
<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#cria%C3%A7%C3%A3o-do-compartment">Criação do Compartment</a></li>
<li><a href="#cria%C3%A7%C3%A3o-de-usu%C3%A1rio">Criação de Usuário</a></li>
<li><a href="#cria%C3%A7%C3%A3o-de-grupo">Criação de Grupo</a></li>
<li><a href="#cria%C3%A7%C3%A3o-de-policies">Criação de Policies</a></li>
<li><a href="#cria%C3%A7%C3%A3o-de-ssh-key">Criação de SSH-KEY</a></li>
<li><a href="#cria%C3%A7%C3%A3o-de-instancia-vm">Criação de Instancia VM</a></li>
<li><a href="#resumo">Resumo</a></li>
</ul>
<hr>
<p>Nesse primeiro passo, iremos configurar um ambiente OCI para rodar toda a aplicação em cloud.</p>
<h2 id="criação-do-compartment">Criação do Compartment</h2>
<p>Iremos criar um <em>conpartiment.</em></p>
<p>No ícone de hamburguer na página inicial do OCI, iremos em &gt; Identity &gt; Security &gt; compartments, e criaremos um compartimento com o nome <strong>Developmet</strong>.</p>
<p><img src="/images/microservice_project/img3.jpg" alt="img3"></p>
<h2 id="criação-de-usuário">Criação de Usuário</h2>
<p>Após isso, criaremos um usuário de desenvolvimento para ter acesso somente ao compartimento <strong>Developmet</strong>.</p>
<p>Novamente no menu lateral, em &gt; Identity &gt; Security &gt; users, iremos criar o usuário <strong>devel_user,</strong> com o tipo IAM USER. Esses usuários podem acessar os serviços do Oracle Cloud Infrastructure, mas nem todos os serviços do Cloud Platform. Os usuários do IAM são cenários de usuário atípico, como acesso de administrador de emergência.</p>
<p><img src="/images/microservice_project/img4.jpg" alt="img4"></p>
<p><img src="/images/microservice_project/img5.jpg" alt="img5"></p>
<h2 id="criação-de-grupo">Criação de Grupo</h2>
<p>No menu lateral, em &gt; Identity &gt; Security &gt; groups, criaremos um grupo com o nome de <strong>Developer_Group.</strong> Depois disso, iremos adicionar o usuário <strong>devel_user</strong> ao grupo clicando no botão &ldquo;Add user to Group&rdquo;.</p>
<p><img src="/images/microservice_project/img6.jpg" alt="img6"></p>
<h2 id="criação-de-policies">Criação de Policies</h2>
<p>Finalizando o processo de criação de usuário, grupo, e adição do usuário ao grupo, é necessário atribuir uma sequência de políticas de permissões ao grupo, para que assim, o grupo criado tenha acesso ao compartimento <em>Developer</em> para fazer as devidas interações.</p>
<p>Vamos em &gt; Identity &gt; Security &gt; Policies</p>
<p><img src="/images/microservice_project/img7.jpg" alt="img7"></p>
<p>Após ser direcionado a página de policies, selecionamos o compartimento <strong>Developmet</strong> para receber a política que criamos. Na policie, iremos permitir o Developer_Group (e todos seus usuários) a utilização de todos os recursos no compartimento OCI.</p>
<p><img src="/images/microservice_project/img8.jpg" alt="img8"></p>
<p>Também será criado uma outra policie no compartimento <strong>root</strong> , para liberar o acesso ao terminal cloud shell, através dos usuários do grupo <em>Developmet.</em> Isso deverá ser feito devido ao fato de que precisaremos de uma ssh-key disponibilizada pelo usuário para conseguir criar nossa instancia no OCI.</p>
<p><img src="/images/microservice_project/img9.jpg" alt="img9"></p>
<h2 id="criação-de-ssh-key">Criação de SSH-KEY</h2>
<p>Logado no usuário <em>devel_user,</em> conectaremos a Oracle Cloud Shell para adquirir uma ssh_key que posteriormente iremos utilizar. Para isso, vamos usar alguns simples comandos para a criação dessa chave.</p>
<p><img src="/images/microservice_project/img10.jpg" alt="img10"></p>
<pre><code class="language-cli" data-lang="cli">ssh-keygen – Para criação da chave

cat /home/your_user/.ssh/id_rsa.pub 
– Mostrará o conteúdo contido no arquivo id_rsa.pub,
  que foi criado com o comando anterior
</code></pre><p><img src="/images/microservice_project/img11.jpg" alt="img11"></p>
<h2 id="criação-de-instancia-vm">Criação de Instancia VM</h2>
<p>Ainda conectado ao usuário <em>devel_user</em> criaremos uma instância, que nada mais é que uma Virtual Machine. Em &gt; compute &gt; instances &gt; create instance._
<img src="/images/microservice_project/img12.jpg" alt="img12"></p>
<p>Ao criar uma instância na página de configuração da VM, devemos colar a ssh-key adquirida anteriormente no campo onde solicita essa chave. Isso é feito para que se consiga acessar a VM remotamente. As imagens do Oracle Linux, CentOS ou Ubuntu usam esse par de chaves SSH ao contrário de uma senha para autenticar um usuário.</p>
<p><img src="/images/microservice_project/img13.jpg" alt="img13"></p>
<p>OBS: A configuração da instância que irei utilizar, são disponibilizadas pelo serviço <em>Oracle Cloud – Free Tier,</em> sendo ela 1 VM de computação baseadas em AMD com 1/8 OCPU** e 1 GB de memória cada.</p>
<p>Para mais informações dos serviços Free Tier, acesse: <a href="https://www.oracle.com/br/cloud/free/">https://www.oracle.com/br/cloud/free/</a></p>
<h2 id="resumo">Resumo</h2>
<p>Nesse Step, começamos as criar o ambiente onde rodaremos nossa aplicação. Configuramos um compartment, usuário e grupo de usuário, que será o responsável pelo acesso ao desenvolvimento na instância OCI. Definimos algumas políticas de usuário. Também criamos uma ssh-key que utilizamos para a criação da instancia OCI.</p>
]]></content>
        </item>
        
        <item>
            <title>Um projeto completo de Microservices</title>
            <link>https://patrickpiccini.github.io/posts/microservice_project_introduction/</link>
            <pubDate>Thu, 02 Jun 2022 13:00:52 -0100</pubDate>
            
            <guid>https://patrickpiccini.github.io/posts/microservice_project_introduction/</guid>
            <description>Table of Contents  Entendimento do problema Objetivo Arquitetura do Projeto Completo   Há um tempo eu desejava entender melhor como os tão famosos microsserviços conseguem trabalhar individualmente, porém todos conectados. Foi então que decidi projetar uma pequena aplicação onde iria me aprofundar nesses conhecimentos, e que também me desafiaria a criar uma aplicação completa seguindo o Software Development Life Circle. Partindo desde a criação da ideia, até o deploy.</description>
            <content type="html"><![CDATA[<p><img src="/images/microservice_project/microservices.png" alt="microservices"></p>
<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#entendimento-do-problema">Entendimento do problema</a></li>
<li><a href="#objetivo">Objetivo</a></li>
<li><a href="#arquitetura-do-projeto-completo">Arquitetura do Projeto Completo</a></li>
</ul>
<hr>
<p>Há um tempo eu desejava entender melhor como os tão famosos microsserviços conseguem trabalhar individualmente, porém todos conectados. Foi então que decidi projetar uma pequena aplicação onde iria me aprofundar nesses conhecimentos, e que também me desafiaria a criar uma aplicação completa seguindo o <strong>Software Development Life Circle</strong>. Partindo desde a criação da ideia, até o deploy.</p>
<p>Isso pode ser representado conforme o seguinte fluxo:</p>
<p><img src="/images/microservice_project/img1.jpg" alt="img1"></p>
<p>Então, meu nome é Patrick Berlatto Piccini, e esse é meu projeto completo de microservices.</p>
<h2 id="entendimento-do-problema">Entendimento do problema</h2>
<p>Nesse projeto, utilizarei algumas ferramentas contidas na OCI (Oracle Claud Infraestructure) visto que, recentemente (Fevereiro 2022) passei na certificação &quot;Oracle Cloud Infrastructure Foundations 2021 Associate&quot;. Se você desejar seguir os passos da criação da aplicação e desenvolver junto comigo o código, é opcional utilizar o OCI.</p>
<p>Vamos começar&hellip;</p>
<h3 id="objetivo">Objetivo</h3>
<p>Criar duas aplicações básicas de microsserviços:</p>
<p>O primeiro deles deverá ser um cadastro de usuários, contendo as seguintes informações:</p>
<ul>
<li>create_user, show_all_user, show_one_user, edit_user, edit_password e delete_user</li>
</ul>
<p>Tabela de usuários &quot;users&quot; deverá conter os campos: user_id, nick_name, full_name, password, cpf, email, phone_number, created_at, updated_at.</p>
<p>O segundo será um serviço de OS (ordem de serviço) que deverá conter no cadastro, o user_id do usuário contido no banco de dados. Deverá ter as seguintes informações:</p>
<ul>
<li>order_id, user_id, item_description, item_quantity, item_price, total_value, created_at, updated_at.</li>
</ul>
<p>A arquitetura da aplicação será a seguinte: criaremos uma API que será responsável por distribuir as requisições através de um broker de mensagens chamado RabbitMQ, e também criar as filas e tabelas necessárias para a aplicação.</p>
<p>Nesse broker, terão duas filas onde a API fará a separação das mensagens e enviará ao seu devido destino, onde teremos dois microsserviços, uma para <em>usuários</em>, e outro para os <em>orders</em>. Cada microsserviço é conectado a um banco de dados Postgres onde serão armazenadas as informações dos <em>usuários</em> e dos <em>orders.</em></p>
<p>Juntamente a API, haverá uma camada de memória cache onde utilizaremos o Redis para fazer essa função. Então, caso uma requisição já tenha sido feita, a API irá verificar antes nos dados em Cache se já existe essa informação. Assim, o usuário terá o retorno muito mais rápido.</p>
<p><img src="/images/microservice_project/img2.jpg" alt="img2"></p>
<h2 id="arquitetura-do-projeto-completo">Arquitetura do Projeto Completo</h2>
<pre><code class="language-Estrutura" data-lang="Estrutura">MS-application
│   .gitignore
│   docker-compose-services.yml
│
├───API
│   │   docker-compose-api.yml
│   │   Dockerfile
│   │   requirements.txt
│   │   server.py
│   │
│   ├───config
│   │       database_connection.py
│   │       rabbitmq_connection.py
│   │       redis_connection.py
│   │       __init__.py
│   │
│   └───rabbitmq_controller
│           rabbit_queues.py
│           __init__.py
│
├───MS1
│   │   docker-compose-microservice1.yml
│   │   Dockerfile
│   │   main.py
│   │   requirements.txt
│   │
│   ├───config
│   │       database_connection.py
│   │       rabbitmq_connection.py
│   │       __init__.py
│   │
│   ├───criptografy
│   │       hash_password.py
│   │       __init__.py
│   │
│   ├───database_controller
│   │       postgres_worker.py
│   │       __init__.py
│   │
│   └───rabbitmq_controller
│           rabbit_worker.py
│			__init__.py
│
└───MS2
    │   docker-compose-microservice2.yml
    │   Dockerfile
    │   main.py
    │   requirements.txt
    │
    ├───config
    │       database_connection.py
    │       rabbitmq_connection.py
    │       __init__.py
    │
    ├───database_controller
    │       postgres_worker.py
    │       __init__.py
    │
    └───rabbitmq_controller
            rabbit_worker.py
            __init__.py
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Data Analytcs - Spotify Wrapped</title>
            <link>https://patrickpiccini.github.io/posts/spotify_wrapped/</link>
            <pubDate>Thu, 26 May 2022 09:00:50 -0300</pubDate>
            
            <guid>https://patrickpiccini.github.io/posts/spotify_wrapped/</guid>
            <description>Table of Contents  Projeto Spotify Wrapped  O que é spotify wrapped DataSet   Exploratory Data Analysis EDA Extração Exploração Limpeza de Dados Agregação  10 artistas mais escutados. 10 musicas mais escutadas.   Visualização Storytelling   Projeto Spotify Wrapped Recentemente venho estudando a área de Data Analytics, Data Science e as várias derivações de inteligência artificial, e descobri um grande interesse por esse mundo. Foi então que decidi iniciar um pequeno projeto onde eu possa praticar meus conhecimentos adquiridos, e também mostrar como o nosso cotidiano está repleto de tecnologia aplicada sobre inteligência artificial.</description>
            <content type="html"><![CDATA[<p><img src="/images/spotify_wrapped/data-analytics.jpg" alt="data-analytics"></p>
<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#projeto-spotify-wrapped">Projeto Spotify Wrapped</a>
<ul>
<li><a href="#o-que-%C3%A9-spotify-wrapped">O que é spotify wrapped</a></li>
<li><a href="#dataset">DataSet</a></li>
</ul>
</li>
<li><a href="#exploratory-data-analysis-eda">Exploratory Data Analysis EDA</a></li>
<li><a href="#extra%C3%A7%C3%A3o">Extração</a></li>
<li><a href="#explora%C3%A7%C3%A3o">Exploração</a></li>
<li><a href="#limpeza-de-dados">Limpeza de Dados</a></li>
<li><a href="#agrega%C3%A7%C3%A3o">Agregação</a>
<ul>
<li><a href="#abaixo-observaremos-os-10-artistas-mais-escutados">10 artistas mais escutados.</a></li>
<li><a href="#abaixo-observaremos-as-10-musicas-mais-escutadas">10 musicas mais escutadas.</a></li>
</ul>
</li>
<li><a href="#visualiza%C3%A7%C3%A3o">Visualização</a></li>
<li><a href="#storytelling">Storytelling</a></li>
</ul>
<hr>
<h2 id="projeto-spotify-wrapped">Projeto Spotify Wrapped</h2>
<p>Recentemente venho estudando a área de Data Analytics, Data Science e as várias derivações de inteligência artificial, e descobri um grande interesse por esse mundo. Foi então que decidi iniciar um pequeno projeto onde eu possa praticar meus conhecimentos adquiridos, e também mostrar como o nosso cotidiano está repleto de tecnologia aplicada sobre inteligência artificial.</p>
<p>O que iremos aprender:</p>
<ul>
<li>Extração</li>
<li>Exploração</li>
<li>Limpeza</li>
<li>Agregação</li>
<li>Storytelling</li>
</ul>
<h3 id="o-que-é-spotify-wrapped">O que é spotify wrapped</h3>
<p>Hoje, venho mostrar um projeto utilizando a plataforma de streaming de música mais utilizada no mundo, o Spotify. Iremos criar um recorço semelhante ao que o Spotify disponibiliza, chamada &ldquo;Spotify Wrapped&rdquo;, que nada mais é do que uma retrospectiva das músicas, artistas entro outros, mais ouvidos durante o seu ano.</p>
<p><img src="/images/spotify_wrapped/wrapped.png" alt="wrapped"></p>
<h3 id="dataset">DataSet</h3>
<p>Nesse projeto irei utilizar o meu DataSet pessoal de meu perfil do Spotify. Para conseguir as suas informações pessoais, basta ir nas <a href="https://www.spotify.com/br/account/privacy/">Configurações de Privacidade</a> da sua conta, e no final da página, seguir os passos para solicitação de seus dados. Dentro de alguns dias, você recebera por e-mail a confinação para baixas seus dados.</p>
<p><img src="/images/spotify_wrapped/steps.png" alt="steps"></p>
<h2 id="exploratory-data-analysis-eda">Exploratory Data Analysis (EDA)</h2>
<p>O que faremos hoje, será trabalha com um conceito primordial para o papel de um analista de dados, a análise Exploratória de dados(EAD).</p>
<ul>
<li>A EAD é um processo de analisar e resumir de forma detalhada um DataSet ou conjunto de dados. O objetivo é por várias técnicas, extrair informações precisas e claras, para a extração de <em>insights</em>.</li>
</ul>
<p>Antes de começar a analisar, importaremos as bibliotecas que iremos utilizar, e também carregar nosso dataset.</p>
<p>Como padrão, o spotify disponibiliza todas as informações em formato JSON, como observamos no exemplo abaixo:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="color:#f92672">&#34;endTime&#34;</span> : <span style="color:#e6db74">&#34;2021-04-29 03:33&#34;</span>,
  <span style="color:#f92672">&#34;artistName&#34;</span> : <span style="color:#e6db74">&#34;Tame Impala&#34;</span>,
  <span style="color:#f92672">&#34;trackName&#34;</span> : <span style="color:#e6db74">&#34;Let It Happen&#34;</span>,
  <span style="color:#f92672">&#34;msPlayed&#34;</span> : <span style="color:#ae81ff">345700</span>
}
</code></pre></div><h3 id="como-índices-temos">Como índices temos:</h3>
<ul>
<li>endTime - Data e hora em que o fluxo terminou no formato UTC (Fuso Horário Universal Coordenado).</li>
<li>artistName - Nome do &ldquo;criador&rdquo; para cada fluxo (por exemplo, o nome do artista se for uma faixa de música).</li>
<li>trackName - Nome dos itens ouvidos ou assistidos (por exemplo, título da faixa de música ou nome do vídeo).</li>
<li>msPlayed - “msPlayed”- Representa quantos milissegundos a faixa foi ouvida pelo usuário.</li>
</ul>
<h2 id="extração">Extração</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> pandas <span style="color:#f92672">as</span> pd
<span style="color:#f92672">import</span> seaborn <span style="color:#f92672">as</span> sns
<span style="color:#f92672">import</span> matplotlib.pyplot <span style="color:#f92672">as</span> plt
<span style="color:#f92672">from</span> datetime <span style="color:#f92672">import</span> timedelta, datetime

dataframe0 <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_json(<span style="color:#e6db74">&#39;./data-frame/StreamingHistory0.json&#39;</span>)
dataframe1 <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_json(<span style="color:#e6db74">&#39;./data-frame/StreamingHistory1.json&#39;</span>)
dataframe2 <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>read_json(<span style="color:#e6db74">&#39;./data-frame/StreamingHistory2.json&#39;</span>)
<span style="color:#66d9ef">print</span>(f<span style="color:#e6db74">&#34;dataframe0: {dataframe0.shape}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">dataframe1: {dataframe1.shape}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">dataframe2: {dataframe2.shape}&#34;</span>)
</code></pre></div><pre><code class="language-ipynb" data-lang="ipynb">dataframe0: (10000, 4)
dataframe1: (10000, 4)
dataframe2: (7154, 4)
</code></pre><p>Como quero fazer uma análise completa, irei concatenar dos dataframes, transformando-os apenas em um.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">sptf <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>concat([dataframe0,dataframe1,dataframe2], ignore_index<span style="color:#f92672">=</span>True)
<span style="color:#66d9ef">print</span>(f<span style="color:#e6db74">&#34;Novo DataFrame: {sptf.shape}&#34;</span>)
</code></pre></div><pre><code class="language-ipynb" data-lang="ipynb">Novo DataFrame: (27154, 4)
</code></pre><p>Como podemos ver, foi concatenado os 3 dataframes, somando um total de 27154 linhas, e 4 colunas.</p>
<p>O que faremos agora, é olhar para os dados que temos, e explorar essas informações que temos.</p>
<h2 id="exploração">Exploração</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">sptf<span style="color:#f92672">.</span>head()
</code></pre></div><p><img src="/images/spotify_wrapped/img1.png" alt="img1"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">sptf<span style="color:#f92672">.</span>columns
</code></pre></div><pre><code class="language-iptnb" data-lang="iptnb">Index(['endTime', 'artistName', 'trackName', 'msPlayed'], dtype='object')
</code></pre><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">sptf<span style="color:#f92672">.</span>dtypes
</code></pre></div><pre><code class="language-ipynb" data-lang="ipynb">endTime       object
artistName    object
trackName     object
msPlayed       int64
dtype: object
</code></pre><p>Nas colunas que são <em>object</em> podemos pressupor serem textos, e na coluna que é <em>int64</em> um número inteiro.</p>
<ul>
<li>Estatísticas descritivas.</li>
</ul>
<p>Para termos uma visão mais panorâmica do nosso DataSet podemos utilizar o comando describe(). Com ele conseguimos extrair as informações básicas como quantidade, média, minha e máxima, alguns percentuais e std. Esse comando visa, gerar estatísticas descritivas de nosso DataSet. Também pode ser aplicado individualmente com apenas uma coluna.</p>
<p>Como ha apenas o msPlayer como um valor numérico, todos esses cálculos serão feitos apenas pobre ele.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">sptf<span style="color:#f92672">.</span>describe()
</code></pre></div><p><img src="/images/spotify_wrapped/img2.png" alt="img2"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">sptf<span style="color:#f92672">.</span>min()
</code></pre></div><pre><code class="language-ipynb" data-lang="ipynb">endTime                        2021-04-29 03:33
artistName                      #TeuFuturo Cast
trackName      Som de chuva - dormir, relaxar  
msPlayed                                      0
dtype: object
</code></pre><p>Como podemos notar acima, o valor mínimo de msPlayed é 0(Zero), então vamos verificar se essas informações estão corretas.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">msPlayed_zero <span style="color:#f92672">=</span> sptf<span style="color:#f92672">.</span>query(<span style="color:#e6db74">&#39;msPlayed &lt;= 0&#39;</span>)
msPlayed_zero<span style="color:#f92672">.</span>head(<span style="color:#ae81ff">10</span>)
</code></pre></div><p><img src="/images/spotify_wrapped/img3.png" alt="img3"></p>
<p>Após uma pequena análise, podemos notar que as músicas que tem o valor 0(zero), são musicas que não tiveram o seu tempo escutado contabilizado. Com isso, caso seja feita alguma análise mais complexa futuramente, esses valores podem ser considerados <em>outliers</em>.</p>
<p>O que são <em>outliers</em>:
São valores que os diferencia drasticamente de todos os outros, ou que fogem do padrão dos valores, podendo causar anomalias nos resultados de algoritmos mais complexos, como uma Regressão Linear.</p>
<p>Vejamos isso em um grafico scatter em um  diagrama de caixa:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">6</span>))
plt<span style="color:#f92672">.</span>scatter(sptf[<span style="color:#e6db74">&#39;msPlayed&#39;</span>], sptf[<span style="color:#e6db74">&#39;msPlayed&#39;</span>])
plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#39;msPlayed&#39;</span>)
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;scatter:&#39;</span>)
plt<span style="color:#f92672">.</span>show()

sns<span style="color:#f92672">.</span>boxplot(y<span style="color:#f92672">=</span>sptf[<span style="color:#e6db74">&#39;msPlayed&#39;</span>])
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;boxplot:&#39;</span>)
plt<span style="color:#f92672">.</span>show()
</code></pre></div><h2 id="graf1imagesspotify_wrappedgraf1png"><img src="/images/spotify_wrapped/graf1.png" alt="graf1"></h2>
<p><img src="/images/spotify_wrapped/graf2.png" alt="graf2"></p>
<p>Verificando os gráficos, podemos notar uma coisa estranha. Existe um valor extremamente distante de todos os outros, um outlier. Porem como são os meus dados do Spotify, me questionei &ldquo;Será que tem uma música muito a mais que todas as outras?&quot;. Foi aí que fui investigar, e descobri que havia realmente escutado toda essa quantia de horas.</p>
<h3 id="mas-esses-outliers-não-vão-desbalancear-toda-a-minha-análise">Mas esses outliers não vão desbalancear toda a minha análise?</h3>
<p><img src="https://i.pinimg.com/originals/f1/85/3a/f1853a77c203e8bb4e6615ae7b62d325.gif" alt="img"></p>
<p>De certa forma sim, porem às vezes as informações que precisamos estão nesses outliers, e é o nosso caso.</p>
<p>Outra coisa que percebi, é que os dados que o spotify disponibilizou não estão 100% corretos. Pude ver músicas que já ouvido muitas vezes com o msPlayed ZERADO!</p>
<p>Vacilou heim Spotfy&hellip;</p>
<p>Mas tudo bem, deixamos passar dessa vez :D.</p>
<h2 id="limpeza-de-dados">Limpeza de Dados</h2>
<p>Agora que entendemo os dados que iremos trabalhar, muitas vezes nos deparamos com informações inconsistentes. Então devemos executar uma série de limpeza ou alteração dessas informações.</p>
<ul>
<li>Para verificar as linas com NaN use:</li>
</ul>
<p>Caso tenhamos valores valorem omissos como None, numpy.NaN, ou até mesmo Vazio, conseguimos identificá-los através do comando <em>notna()</em>, onde nos retorna a própria tabela, porem com os valores boleanos, representando se há ou não um valor NaN naquele índice.</p>
<ul>
<li>True  - Não tem NaN</li>
<li>False - Tem NaN</li>
</ul>
<p>Iremos calcular a quantia total de informações NaN, e como podemos ver, não ha nenhum valor NaN.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">sptf<span style="color:#f92672">.</span>notna()<span style="color:#f92672">.</span>value_counts()
</code></pre></div><pre><code class="language-ipynb" data-lang="ipynb">endTime  artistName  trackName  msPlayed
True     True        True       True        27154
dtype: int64
</code></pre><p>Como não temos nenhum dado NaN, o que podemos fazer é retirar todas as músicas que tenha o msPlayed menor ou igual a 0(zero).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">sptf <span style="color:#f92672">=</span> sptf<span style="color:#f92672">.</span>query(<span style="color:#e6db74">&#39;msPlayed &gt; 0&#39;</span>)

<span style="color:#75715e"># musica com menos tempo escutado</span>
sptf<span style="color:#f92672">.</span>query(<span style="color:#e6db74">&#39;msPlayed &lt;= 10&#39;</span>)
</code></pre></div><p><img src="/images/spotify_wrapped/img4.png" alt="img4"></p>
<h2 id="agregação">Agregação</h2>
<p>Na parte de agregação, buscamos resumir os dados através de métricas e estatísticas como soma, media, etc. para extrair insigths.</p>
<ul>
<li>Insigths - É a capacidade de tirar conclusões sobre os dados</li>
</ul>
<p>O que precisaremos fazer é buscar as músicas mais ouvidas e também os artistas mais ouvidos.</p>
<h4 id="abaixo-observaremos-os-10-artistas-mais-escutados">Abaixo observaremos os 10 artistas mais escutados.</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">artistas <span style="color:#f92672">=</span> sptf[[<span style="color:#e6db74">&#39;artistName&#39;</span>,<span style="color:#e6db74">&#39;msPlayed&#39;</span>]]<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#39;artistName&#39;</span>)<span style="color:#f92672">.</span>agg(<span style="color:#e6db74">&#39;sum&#39;</span>)<span style="color:#f92672">.</span>reset_index()
artistas <span style="color:#f92672">=</span> artistas<span style="color:#f92672">.</span>sort_values(by<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;msPlayed&#39;</span> ,ascending<span style="color:#f92672">=</span>False)
artistas_top_10 <span style="color:#f92672">=</span> artistas[:<span style="color:#ae81ff">10</span>]
artistas_top_10
</code></pre></div><p><img src="/images/spotify_wrapped/img5.png" alt="img5"></p>
<h4 id="abaixo-observaremos-as-10-musicas-mais-escutadas">Abaixo observaremos as 10 musicas mais escutadas.</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">musicas <span style="color:#f92672">=</span> sptf<span style="color:#f92672">.</span>sort_values(by<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;msPlayed&#39;</span> ,ascending<span style="color:#f92672">=</span>False)
musicas_top_10 <span style="color:#f92672">=</span> musicas[:<span style="color:#ae81ff">10</span>]
musicas_top_10
</code></pre></div><p><img src="/images/spotify_wrapped/img6.png" alt="img6"></p>
<p>Vamos também criar mais uma coluna como as posição do ranking.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">positions <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;1º&#39;</span>,<span style="color:#e6db74">&#39;2º&#39;</span>,<span style="color:#e6db74">&#39;3º&#39;</span>,<span style="color:#e6db74">&#39;4º&#39;</span>,<span style="color:#e6db74">&#39;5º&#39;</span>,<span style="color:#e6db74">&#39;6º&#39;</span>,<span style="color:#e6db74">&#39;7º&#39;</span>,<span style="color:#e6db74">&#39;8º&#39;</span>,<span style="color:#e6db74">&#39;9º&#39;</span>,<span style="color:#e6db74">&#39;10º&#39;</span>]

artistas_top_10[<span style="color:#e6db74">&#39;position&#39;</span>] <span style="color:#f92672">=</span> positions
musicas_top_10[<span style="color:#e6db74">&#39;position&#39;</span>] <span style="color:#f92672">=</span> positions
</code></pre></div><p>Com isso, já temos tudo que precisamos para fazer uma aplicação parecida com Spotify Wrapped.</p>
<h2 id="visualização">Visualização</h2>
<p>Na etapa de visualização, é buscado criar gráficos que melhor representem os insights, gerados por agregação.</p>
<p>Para ficar um pouco mais fácil para pessoas leigas verem essas informações, iremos plotar um barplot.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">chart <span style="color:#f92672">=</span> sns<span style="color:#f92672">.</span>barplot(data<span style="color:#f92672">=</span>artistas_top_10,  x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;artistName&#39;</span>,y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;msPlayed&#39;</span>)
chart<span style="color:#f92672">.</span>set_xticklabels(chart<span style="color:#f92672">.</span>get_xticklabels(), rotation<span style="color:#f92672">=</span><span style="color:#ae81ff">90</span>)
chart<span style="color:#f92672">.</span>set(title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Top 10 Artistas&#39;</span>)
artistas_top_10
</code></pre></div><h2 id="img7imagesspotify_wrappedimg7png"><img src="/images/spotify_wrapped/img7.png" alt="img7"></h2>
<p><img src="/images/spotify_wrapped/graf3.png" alt="graf3"></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">chart <span style="color:#f92672">=</span> sns<span style="color:#f92672">.</span>barplot(data<span style="color:#f92672">=</span>musicas_top_10, x<span style="color:#f92672">=</span>positions,y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;msPlayed&#39;</span>)
chart<span style="color:#f92672">.</span>set_xticklabels(chart<span style="color:#f92672">.</span>get_xticklabels(), size<span style="color:#f92672">=</span><span style="color:#ae81ff">10</span>)
chart<span style="color:#f92672">.</span>set(title<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Top 10 Músicas&#39;</span>)
musicas_top_10
</code></pre></div><h2 id="img8imagesspotify_wrappedimg8png"><img src="/images/spotify_wrapped/img8.png" alt="img8"></h2>
<p><img src="/images/spotify_wrapped/graf4.png" alt="graf4"></p>
<h2 id="storytelling">Storytelling</h2>
<p>Na etapa de storytelling, buscamos organizar as conclusões que temos dos dados, através de um formato de história, para facilitar a transmissão do conhecimento.</p>
<p>Baseado nos dados disponibilizados pelo Spotify, foi extraído os 10 artistas mais estucados, e as 10 musicas mais escutadas no último ano, sendo que:</p>
<ul>
<li>1 Podcast</li>
<li>1 Autio Relaxante</li>
<li>8 Músicas de diversos gêneros</li>
</ul>
<p>Nota-se que o usuário tem um gosto musical muito diversificado. Também podemos supor que o usuário possa ter alguma dificuldade para dormir, visto que a segunda música mais ouvida é relacionada ao relaxamento profundo para dormir mais facilmente. Também pode-se perceber que o usuário gosta de conhecimentos gerais, visto que escuta um Podcast com o foco na diversidade.</p>
<p>Portanto, recomenda-se aumentar a relação do usurário com a plataforma, recomendando novos podcast, com o formato semelhante ao que já escuta. Novos sons relaxantes para manter a qualidade do sono ainda melhor, e o anúncio de novos lançamentos do artista &ldquo;Pineapple StormTv&rdquo;, sendo que ocupa duas posições de músicas mais ouvidas e está no Top 3 artistas mais escutados.</p>
]]></content>
        </item>
        
        <item>
            <title>Email com Google Authentication – Refresh Token</title>
            <link>https://patrickpiccini.github.io/posts/google_auth-refresh-token/</link>
            <pubDate>Sun, 22 May 2022 18:00:00 -0300</pubDate>
            
            <guid>https://patrickpiccini.github.io/posts/google_auth-refresh-token/</guid>
            <description>Table of Contents  Introdução  Pré-requisitos   Step 1 – Instalação de bibliotecas Step 2 – Leitura do token.json Step 3 – Função refresh_token Step 4 – Função request_refresh_token Step 5 – Execução Código Completo Conclusão Referências   Introdução Nesse artigo irei continuar o assunto abordado na publicação Email com Google Authentication.
Visto que no primeiro estágio fizemos apenas uma autenticação, nos deparamos com a criação de um arquivo chamado token.</description>
            <content type="html"><![CDATA[<p><img src="/images/google-auth/refresh_token.png" alt="refresh_token"></p>
<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#introdu%C3%A7%C3%A3o">Introdução</a>
<ul>
<li><a href="#pr%C3%A9-requisitos">Pré-requisitos</a></li>
</ul>
</li>
<li><a href="#step-1--instala%C3%A7%C3%A3o-de-bibliotecas">Step 1 – Instalação de bibliotecas</a></li>
<li><a href="#step-2--leitura-do-tokenjson">Step 2 – Leitura do token.json</a></li>
<li><a href="#step-3--fun%C3%A7%C3%A3o-refresh%5C_token">Step 3 – Função refresh_token</a></li>
<li><a href="#step-4--fun%C3%A7%C3%A3o-request%5C_refresh%5C_token">Step 4 – Função request_refresh_token</a></li>
<li><a href="#step-5--execu%C3%A7%C3%A3o">Step 5 – Execução</a></li>
<li><a href="#c%C3%B3digo-completo">Código Completo</a></li>
<li><a href="#conclus%C3%A3o">Conclusão</a></li>
<li><a href="#refer%C3%AAncias">Referências</a></li>
</ul>
<hr>
<h2 id="introdução">Introdução</h2>
<p>Nesse artigo irei continuar o assunto abordado na publicação <a href="https://patrickpiccini.github.io/posts/google-auth/">Email com Google Authentication</a>.</p>
<p>Visto que no primeiro estágio fizemos apenas uma autenticação, nos deparamos com a criação de um arquivo chamado <em>token.json.</em> Nele, está contido uma sequência de informações, sendo elas um token de autenticação, algumas informações do usuário autenticado, e uma data de expiração. Então, quando o usuário utilizar a aplicação que criamos, ele não utilizará mais o arquivo <em>credentias.json</em>, mas sim as informações contidas no <em>token.json.</em></p>
<p>As informações contidas do <em>token.json</em> serão semelhantes aos dados abaixo.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
    <span style="color:#f92672">&#34;scopes&#34;</span>: [<span style="color:#e6db74">&#34;https://mail.google.com/&#34;</span>],
    <span style="color:#f92672">&#34;token_uri&#34;</span>: <span style="color:#e6db74">&#34;https://oauth2.googleapis.com/token&#34;</span>,
    <span style="color:#f92672">&#34;expiry&#34;</span>: <span style="color:#e6db74">&#34;2022-05-21T00:49:13.081000Z&#34;</span>,
    <span style="color:#f92672">&#34;token&#34;</span>: <span style="color:#e6db74">&#34;ya29.a0ARrdaM_Egt-trkKacPEcWEzCC9Lejs7DTo8VnPYRu&#34;</span>,
    <span style="color:#f92672">&#34;client_id&#34;</span>: <span style="color:#e6db74">&#34;725031891889-0533ns1pin5753k.apps.googleusercontent.com&#34;</span>,
    <span style="color:#f92672">&#34;client_secret&#34;</span>: <span style="color:#e6db74">&#34;GOCSPX-VlvdZsYe-0GXpkctKmK&#34;</span>,
    <span style="color:#f92672">&#34;refresh_token&#34;</span>: <span style="color:#e6db74">&#34;1//0h0y8XEIbzPbiCgYIARAAGBESNwF-C7yWA9JaFT_fACew&#34;</span>
}
</code></pre></div><p>Como podemos notar, nesse token que nos é retornado há uma data de expiração. Caso o usuário fique enviando vários e-mails durante o dia, terá que passar pela tela de autenticação inumeras vezes, sendo que a Google disponibiliza apenas 4 horas de validade para cada token.</p>
<p>Visto isso, utilizaremos uma informação contida no <em>token.json</em> chamada refresh_token. Com ela, conseguimos criar um novo token de acesso, sem que o usuário precise passar pela tela do browser.</p>
<h3 id="pré-requisitos">Pré-requisitos</h3>
<ul>
<li>
<p><a href="https://www.python.org/downloads/">Python</a> 2.6 ou superior;</p>
</li>
<li>
<p>Gerenciamento de pacotes <a href="https://pypi.org/project/pip/">PIP</a>;</p>
</li>
<li>
<p>Ter criado o código baseado no primeiro artigo publicado (<a href="https://patrickpiccini.github.io/posts/google-auth/">Email com Google Authentication</a>).</p>
</li>
</ul>
<h3 id="step-1--instalação-de-bibliotecas">Step 1 – Instalação de bibliotecas</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pip install --upgrade jsonlib DateTime requests
</code></pre></div><h3 id="step-2--leitura-do-tokenjson">Step 2 – Leitura do token.json</h3>
<p>Para entender quando iremos criar um novo token de acesso, nos basear pela data de expiração contida no arquivo. Será necessário apontarmos uma variável chamada <em>date_time_now</em>, que irá conter a data/hora atual. Após isso, iremos ler esse <em>token.json,</em> e verificar se a data/hora atual é maior que a data de expiração. Caso sejam, invocaremos uma função chamada de <em>refresh_token.</em></p>
<p>Todas as informações lidas do arquivo <em>token.json</em> serão atribuída à variável <em>Info_json,</em> que passaremos como parâmetro para a nova função criada.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(<span style="color:#e6db74">&#39;token.json&#39;</span>):
        <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;token.json&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>) <span style="color:#66d9ef">as</span> verify:
            info_json <span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>load(verify)

            <span style="color:#66d9ef">if</span> date_time_now <span style="color:#f92672">&gt;</span> info_json[<span style="color:#e6db74">&#39;expiry&#39;</span>]:
                refresh_token(info_json)

        creds <span style="color:#f92672">=</span> Credentials<span style="color:#f92672">.</span>from_authorized_user_file(
            <span style="color:#e6db74">&#39;token.json&#39;</span>, SCOPES)
</code></pre></div><h3 id="step-3--função-refresh_token">Step 3 – Função refresh_token</h3>
<p>A função refresh_token será responsável por requisitar à API do Google um novo token de acesso. Dentro dessa função será feita toda a manipulação de requisição de um novo token, adição de horas de expiração, e escrita das novas informações dentro do arquivo já existente <em>token.json.</em></p>
<p>Primeiramente precisaremos criar o corpo da requisição, seguindo alguns padrões exigidos.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">refresh_token</span>(info_json):
    <span style="color:#66d9ef">try</span>:
        refresh_token_obj <span style="color:#f92672">=</span> {
            <span style="color:#e6db74">&#34;client_id&#34;</span>: str(info_json[<span style="color:#e6db74">&#34;client_id&#34;</span>])<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;u&#39;&#34;</span>, <span style="color:#e6db74">&#34;&#39;&#34;</span>),
            <span style="color:#e6db74">&#34;client_secret&#34;</span>: str(info_json[<span style="color:#e6db74">&#34;client_secret&#34;</span>])<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;u&#39;&#34;</span>, <span style="color:#e6db74">&#34;&#39;&#34;</span>),
            <span style="color:#e6db74">&#34;refresh_token&#34;</span>: str(info_json[<span style="color:#e6db74">&#34;refresh_token&#34;</span>])<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;u&#39;&#34;</span>, <span style="color:#e6db74">&#34;&#39;&#34;</span>), 
            <span style="color:#e6db74">&#34;grant_type&#34;</span>: <span style="color:#e6db74">&#34;refresh_token&#34;</span>
        }
</code></pre></div><p>Logo abaixo, vamos reservar uma variável chamada <em>refresh_credentials</em>. para ela, posteriormente atribuiremos uma nova função nomeada de <em>request_refresh_token</em>, passando como parâmetro as informações que criamos na variável <em>refresh_token_obj.</em></p>
<p>Após isso, a função <em>request_refresh_token</em> retornará um response. Iremos carregar as informações em formato json na variável <em>refresh_toke_obj.</em> Separaremos mais duas informações, uma variável contendo a soma do horário atual + 4 horas, visto que o token é válido por quatro horas, e também o token de acesso retornado da requisição <em>refresh_credentials.</em></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">   refresh_credentials <span style="color:#f92672">=</span> request_refresh_token(refresh_token_obj)

        refresh_toke_obj <span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>loads(refresh_credentials<span style="color:#f92672">.</span>text)
        expiry_time_refresh_token <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>now() <span style="color:#f92672">+</span> timedelta(hours<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>)
        access_token <span style="color:#f92672">=</span> refresh_toke_obj[<span style="color:#e6db74">&#39;access_token&#39;</span>]
</code></pre></div><p>Por fim, uma exception da função caso ocorra falha em alguma dessas informações que manipulamos.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> error:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;Erro criacao de refresh_token.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">{}&#39;</span><span style="color:#f92672">.</span>format(str(error)))
</code></pre></div><h3 id="step-4--função-request_refresh_token">Step 4 – Função request_refresh_token</h3>
<p>O que abordaremos agora será a função itada anteriormente, <em>a request_refresh_token.</em> Nela, iremos apenas fazer uma requisição post para a url <a href="https://oauth2.googleapis.com/token">https://oauth2.googleapis.com/token</a>, passando as informações que montamos na variável <em>refresh_token_obj</em> anteriormente.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">request_refresh_token</span>(refresh_token_obj):
    <span style="color:#66d9ef">try</span>:
        <span style="color:#66d9ef">return</span> requests<span style="color:#f92672">.</span>post(<span style="color:#e6db74">&#39;https://oauth2.googleapis.com/token&#39;</span>, data<span style="color:#f92672">=</span>refresh_token_obj)
</code></pre></div><p>Assim, finalizaremos com uma sequência de possíveis exceções que podem ocorrem na requisição.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">except</span> requests<span style="color:#f92672">.</span>exceptions<span style="color:#f92672">.</span>Timeout <span style="color:#66d9ef">as</span> e:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;Request Timeout exception:</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">{}&#39;</span><span style="color:#f92672">.</span>format(v))
        <span style="color:#66d9ef">return</span>
    <span style="color:#66d9ef">except</span> requests<span style="color:#f92672">.</span>exceptions<span style="color:#f92672">.</span>TooManyRedirects <span style="color:#66d9ef">as</span> e:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;Request too many redirects exception:</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">{}&#39;</span><span style="color:#f92672">.</span>format(str(e)))
        <span style="color:#66d9ef">return</span>
    <span style="color:#66d9ef">except</span> requests<span style="color:#f92672">.</span>exceptions<span style="color:#f92672">.</span>RequestException <span style="color:#66d9ef">as</span> e:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;Request exception:</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">{}&#39;</span><span style="color:#f92672">.</span>format(str(e)))
        <span style="color:#66d9ef">return</span>
</code></pre></div><h3 id="step-5--execução">Step 5 – Execução</h3>
<p>O funcionamento será o mesmo mostrado no artigo <a href="https://patrickpiccini.github.io/posts/google-auth/">Email com Google Authentication</a>.
Executando o arquivo <em>SendEmail.py,</em> abrirá uma página de seleção de usuário para autenticação.</p>
<p><img src="/images/google-auth/img1.png" alt="img1"></p>
<p>Como meu aplicativo não foi publicado, irá aparecer uma tela de verificação para aceitar o acesso as informações confidenciais da conta do google que desejamos autenticar.</p>
<p><img src="/images/google-auth/img2.png" alt="img2"></p>
<p><img src="/images/google-auth/img3.png" alt="img3"></p>
<p><img src="/images/google-auth/img4.png" alt="img4"></p>
<p>Após isso, a conexão será autenticada e o email será enviado ao destinatário.</p>
<p><img src="/images/google-auth/img5.png" alt="img5"></p>
<p>Depois de o usuário passar por esse estágio de autenticação, não precisará mais refazer todos esses passos, visto que a atualização que fizemos no código já irá gerar novos tokens automaticamente.</p>
<h3 id="código-completo">Código Completo</h3>
<p><a href="https://github.com/patrickpiccini/email-google-auth-2">Code - Email com Google Authentication – Refresh Token</a></p>
<h2 id="conclusão">Conclusão</h2>
<p>Nesse artigo abordamos a segunda etapa para aplicação de autenticação utilizando Gmail API. Foi mostrado como verificar a validade do token de acesso através da data de expiração. Caso esse token esteja expirado, criamos duas novas funções chamadas de <em>refresh_token</em> e <em>request_refresh_token</em>, responsáveis por requisitar um novo token de acesso, e inseri-lo no arquivo <em>token.json</em> com uma nova data de expiração. Assim, o usuário não precisará ficar passando pelas telas de Login com o Google diversas vezes ao dia. Tudo isso a nova atualização no código fará em back-end para o usuário.</p>
<p>Reforçando o que citei no artigo anterior: Existem outros métodos de autenticação de usuário, e diferentes formas de desenvolver o código para a autenticação, basta saber fazer a procura certa no google que encontrará.</p>
<p>Espero que tenha gostado dessa publicação, e que possa usá-la de alguma forma em seu dia a dia.</p>
<h3 id="referências">Referências</h3>
<p><a href="https://support.google.com/accounts/answer/6010255?p=less-secure-apps&amp;hl=pt-BR&amp;visit_id=637824317526826001-2187211079&amp;rd=1">Apps menos seguros e a Conta do Google</a>);</p>
<p><a href="https://developers.google.com/workspace/guides/create-project">Create a Google Cloud project</a>;</p>
<p><a href="https://developers.google.com/workspace/guides/create-credentials">Create access credentials</a>;</p>
<p><a href="https://developers.google.com/gmail/api/quickstart/python">Python Quickstart</a>;</p>
<p><a href="https://developers.google.com/gmail/api/guides/sending">Sending Email</a>.</p>
]]></content>
        </item>
        
        <item>
            <title>Email com Google Authentication</title>
            <link>https://patrickpiccini.github.io/posts/google-auth/</link>
            <pubDate>Tue, 12 Apr 2022 21:00:50 -0300</pubDate>
            
            <guid>https://patrickpiccini.github.io/posts/google-auth/</guid>
            <description>Table of Contents  Introdução  Pré-Requisitos Arquitetura   Step 1 – Criar credenciais Step 2 – Instalação de bibliotecas Step 3 – Criação de código de autenticação Step 4 – Criação do código de envio de e-mail Step 5 – Execução Código Completo Conclusão Referências   Introdução Nesse artigo irei abordar uma situação que recentemente a Google publicou referente ao login a conta Google, utilizando somente o usuário e senha para se conectar em apps de terceiros.</description>
            <content type="html"><![CDATA[<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#introdu%C3%A7%C3%A3o">Introdução</a>
<ul>
<li><a href="#pr%C3%A9-requisitos">Pré-Requisitos</a></li>
<li><a href="#a-aplica%C3%A7%C3%A3o-ter%C3%A1-a-seguinte-arquitetura">Arquitetura</a></li>
</ul>
</li>
<li><a href="#step-1--criar-credenciais">Step 1 – Criar credenciais</a></li>
<li><a href="#step-2--instala%C3%A7%C3%A3o-de-bibliotecas">Step 2 – Instalação de bibliotecas</a></li>
<li><a href="#step-3--cria%C3%A7%C3%A3o-de-c%C3%B3digo-de-autentica%C3%A7%C3%A3o">Step 3 – Criação de código de autenticação</a></li>
<li><a href="#step-4--cria%C3%A7%C3%A3o-do-c%C3%B3digo-de-envio-de-e-mail">Step 4 – Criação do código de envio de e-mail</a></li>
<li><a href="#step-5--execu%C3%A7%C3%A3o">Step 5 – Execução</a></li>
<li><a href="#c%C3%B3digo-completo">Código Completo</a></li>
<li><a href="#conclus%C3%A3o">Conclusão</a></li>
<li><a href="#refer%C3%AAncias">Referências</a></li>
</ul>
<hr>
<h2 id="introdução">Introdução</h2>
<p>Nesse artigo irei abordar uma situação que recentemente a Google publicou referente ao login a conta Google, utilizando somente o usuário e senha para se conectar em apps de terceiros. Segue um trecho da publicação:</p>
<p><em>- &ldquo;Para proteger sua conta, o Google vai deixar de oferecer suporte para o uso de apps ou dispositivos de terceiros que solicitam login na Conta do Google usando apenas seu nome de usuário e senha. Essa mudança será válida a partir de 30 de maio de 2022. Continue lendo para mais informações&rdquo; -</em> <a href="https://support.google.com/accounts/answer/6010255?p=less-secure-apps&amp;hl=pt-BR&amp;visit_id=637824317526826001-2187211079&amp;rd=1"><em>Apps menos seguros e a Conta do Google</em></a>.)</p>
<p>Tendo em vista que muitas aplicações do mercado utilizam esse método simples de login (usuário e senha), criei esse pequeno artigo explicando e desenvolvendo um método de autenticação a conta do google, através das APIs que o Google disponibiliza. Fazendo com que não haja a necessidade de liberar nas configurações da conta a opção de &ldquo;permitir apps menos seguros&rdquo;</p>
<p><strong>Obs</strong>: Os exemplos de códigos apresentados nesse artigo foram todos baseados nas documentações oficiais da Google, porém refartados, trazendo a clareza e a simplicidade no desenvolvimento da aplicação.</p>
<p>Para usar a Gmail API é necessário ter uma conta na Google Cloud Plataform, onde o cadastro pode ser feito <a href="https://console.cloud.google.com/freetrial/signup/tos?_ga=2.255782728.1788355950.1649683957-1725700722.1640005169&amp;_gac=1.61556062.1649692396.CjwKCAjwo8-SBhAlEiwAopc9W-9WErTEtw9O2DIPMgtBZHRMMb8iu52gwJgAgy-YPZidJP80yxSCahoCk94QAvD_BwE">AQUI</a>.</p>
<h3 id="pré-requisitos">Pré-Requisitos</h3>
<ul>
<li>
<p><a href="https://www.python.org/downloads/">Python</a> 2.6 ou superior;</p>
</li>
<li>
<p>Gerenciamento de pacotes <a href="https://pypi.org/project/pip/">PIP</a>;</p>
</li>
<li>
<p>Um projeto na Google Cloud Platform com GmailAPI ativada. Para criar um projeto e ativar uma API, consulte <a href="https://developers.google.com/workspace/guides/create-project">Criar um projeto e ativar a API</a>.</p>
</li>
</ul>
<h4 id="a-aplicação-terá-a-seguinte-arquitetura">A aplicação terá a seguinte arquitetura:</h4>
<pre><code>Aplication
    ↳ GoogleAuthenticator.py
    ↳ SendEmail.py
    ↳ credentials.json
</code></pre><h3 id="step-1--criar-credenciais">Step 1 – Criar credenciais</h3>
<p>Para comunicação da aplicação e a API, deve ser baixado as credenciais de acesso, obtida em <strong>≡</strong> <em>&gt; APIs &amp; Services &gt; Credentials,</em> depois em Click <em>Create credentials &gt; API key.</em></p>
<p>Para visualizar a documentação oficial acesse <a href="https://developers.google.com/workspace/guides/create-credentials">Create access credentials</a>.</p>
<h3 id="step-2--instalação-de-bibliotecas">Step 2 – Instalação de bibliotecas</h3>
<p>Instalar a biblioteca do Google Client.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib pybase64 email-to
</code></pre></div><h3 id="step-3--criação-de-código-de-autenticação">Step 3 – Criação de código de autenticação</h3>
<p>Criar um arquivo <em>GoogleAuthenticator.py</em>.</p>
<p>Ao abrir o arquivo, deve-se fazer uma sequência de importações das bibliotecas instaladas.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> os.path
<span style="color:#f92672">from</span> google.auth.transport.requests <span style="color:#f92672">import</span> Request
<span style="color:#f92672">from</span> google.oauth2.credentials <span style="color:#f92672">import</span> Credentials
<span style="color:#f92672">from</span> google_auth_oauthlib.flow <span style="color:#f92672">import</span> InstalledAppFlow
<span style="color:#f92672">from</span> googleapiclient.discovery <span style="color:#f92672">import</span> build
<span style="color:#f92672">from</span> googleapiclient.errors <span style="color:#f92672">import</span> HttpError
</code></pre></div><p>Abaixo das importações, deverá ser criado uma definition que será chamara para ocorrer a autenticação. Nela deve conter como parâmetros, <em>client_secret_file</em>(arquivo baixado contendo as credenciais de acesso), <em>api_service_name</em>(nome do serviço de API), <em>api version</em>(versão da API) e <em>scopes</em>(é responsável por solicitar o acesso as APIs do Google).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">authenticator</span>(client_secret_file, api_service_name, api_version, <span style="color:#f92672">*</span>scopes):
    CLIENT_SECRET_FILE <span style="color:#f92672">=</span> client_secret_file
    API_SERVICE_NAME <span style="color:#f92672">=</span> api_service_name
    API_VERSION <span style="color:#f92672">=</span> api_version
    SCOPES <span style="color:#f92672">=</span> [scope <span style="color:#66d9ef">for</span> scope <span style="color:#f92672">in</span> scopes[<span style="color:#ae81ff">0</span>]]

    credentials <span style="color:#f92672">=</span> None
</code></pre></div><p>A lógica será bem simples. Primeiro deve-se verificar se existe no diretório atual o arquivo <em>token.json,</em> que é responsável por conter em seu corpo, todas informações de um usuário já autenticado pela aplicação. Caso não exista, o código ira ler um arquivo chamado <em>credentials.json,</em> que dentro dele há as credenciais para a autenticação, como <em>client_id, client_secret</em> entre outras. Ambos os arquivos são atribuídos a variável <strong>&ldquo;credentials&rdquo;</strong> que será usado na chamada da API posteriormente.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(<span style="color:#e6db74">&#39;DocGoogle/token.json&#39;</span>):
        credentials <span style="color:#f92672">=</span> Credentials<span style="color:#f92672">.</span>from_authorized_user_file(
            <span style="color:#e6db74">&#39;DocGoogle/token.json&#39;</span>, SCOPES)
    
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> credentials <span style="color:#f92672">or</span> <span style="color:#f92672">not</span> credentials<span style="color:#f92672">.</span>valid:
        <span style="color:#66d9ef">if</span> credentials <span style="color:#f92672">and</span> credentials<span style="color:#f92672">.</span>expired <span style="color:#f92672">and</span> credentials<span style="color:#f92672">.</span>refresh_token:
            credentials<span style="color:#f92672">.</span>refresh(Request())
        <span style="color:#66d9ef">else</span>:
            flow <span style="color:#f92672">=</span> InstalledAppFlow<span style="color:#f92672">.</span>from_client_secrets_file(
                CLIENT_SECRET_FILE, SCOPES)
            credentials <span style="color:#f92672">=</span> flow<span style="color:#f92672">.</span>run_local_server(port<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>)

</code></pre></div><p>Após a autenticação, iremos salvar as credenciais do usuário autenticado no arquivo <em>token.json</em>, para que nas próximas vezes que a aplicação for usada, não necessite passar pelo processo de autenticação novamente.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">        <span style="color:#75715e"># Save the credentials for the next run</span>
        <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;DocGoogle/token.json&#39;</span>, <span style="color:#e6db74">&#39;w&#39;</span>) <span style="color:#66d9ef">as</span> token:
            token<span style="color:#f92672">.</span>write(credentials<span style="color:#f92672">.</span>to_json())
</code></pre></div><p>Agora, é necessário fazer uma chamada a API do google com os arquivos <em>token.json</em> ou <em>credential.json</em> que está na variável <strong>&ldquo;credentials&rdquo;</strong> como citado anteriormente. Com a função <em>build</em> será construído um Resource Object para interagir com a API, e assim, retorne a confirmação ou rejeição do acesso. Caso ocorra um erro na chamada a API, será disparado um except para o tratamento do erro.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">try</span>:
        <span style="color:#75715e"># Call the Gmail API</span>
        service <span style="color:#f92672">=</span> build(API_SERVICE_NAME, API_VERSION, credentials<span style="color:#f92672">=</span>credentials)
        <span style="color:#66d9ef">print</span>(API_SERVICE_NAME, <span style="color:#e6db74">&#39;service created successfully&#39;</span>)
        <span style="color:#66d9ef">return</span> service

    <span style="color:#66d9ef">except</span> HttpError <span style="color:#66d9ef">as</span> error:
        <span style="color:#75715e"># TO DO(developer) - Handle errors from gmail API.</span>
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;An error occurred: {}&#39;</span><span style="color:#f92672">.</span>format(error))
</code></pre></div><h3 id="step-4--criação-do-código-de-envio-de-e-mail">Step 4 – Criação do código de envio de e-mail</h3>
<p>Criar um arquivo <em>SendEmail.py</em>.</p>
<p>Ao abrir o arquivo, deve-se fazer uma sequência de importações das bibliotecas instaladas.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> base64
<span style="color:#f92672">from</span> quickstart <span style="color:#f92672">import</span> authenticator
<span style="color:#f92672">from</span> email.mime.text <span style="color:#f92672">import</span> MIMEText
<span style="color:#f92672">from</span> googleapiclient.errors <span style="color:#f92672">import</span> HttpError
</code></pre></div><p>Nota-se que foi importado a <em>def authenticator</em> do arquivo <em>GoogleAuthenticator.py .</em></p>
<p>É criado as variáveis <em>CLIENT_SECRET_FILE</em> que é atribuído o arquivo credential.json, <em>API_NAME</em> contendo o nome da aplicação, <em>API VERSION</em> com a versão, e <em>SCOPES</em> com a url para a solicitação a API. Tudo isso é passado como parâmetro para a <em>def euthenticator.</em></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">CLIENT_SECRET_FILE <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;DocGoogle/credentials.json&#39;</span>
API_NAME <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;gmail&#39;</span>
API_VERSION <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;v1&#39;</span>
SCOPES <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;https://mail.google.com/&#39;</span>]

service <span style="color:#f92672">=</span> authenticator(CLIENT_SECRET_FILE, API_NAME, API_VERSION, SCOPES)
</code></pre></div><p>Apenas com essa parte já se consegue criar uma autenticação apenas executando o arquivo <em>SendEmail.py,</em> porém como o objetivo é enviar um email com o usuario autenticado, continuarei mostrando o final do código.</p>
<p>Agora é necessário criar os campos para envio de email como, Titulo, Mensagem, Remetente e Destinatário.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">message <span style="color:#f92672">=</span> MIMEText(<span style="color:#e6db74">&#39;Python Mail test using API Google&#39;</span>)
message[<span style="color:#e6db74">&#39;from&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;your_email@gmail.com&#34;</span>
message[<span style="color:#e6db74">&#39;to&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;recipient@gmail.com&#39;</span>
message[<span style="color:#e6db74">&#39;subject&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;API Google&#39;</span>
raw_string <span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>urlsafe_b64encode(message<span style="color:#f92672">.</span>as_bytes())<span style="color:#f92672">.</span>decode()
</code></pre></div><p>Nesse momento é executado o envio do email passando o response da autenticação que está contida na variavel <em>service</em>, e os demais dados preenchidos. Todas essas informações foram codificadas em base64 para facilitar a transferência na Internet.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">try</span>:
    message <span style="color:#f92672">=</span> service<span style="color:#f92672">.</span>users()<span style="color:#f92672">.</span>messages()<span style="color:#f92672">.</span>send(userId<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;me&#39;</span>, body<span style="color:#f92672">=</span>{<span style="color:#e6db74">&#39;raw&#39;</span>: raw_string})<span style="color:#f92672">.</span>execute()
    <span style="color:#66d9ef">print</span> (<span style="color:#e6db74">&#39;Message Id: {}&#39;</span>)<span style="color:#f92672">.</span>format(message[<span style="color:#e6db74">&#39;id&#39;</span>])
<span style="color:#66d9ef">except</span> HttpError <span style="color:#66d9ef">as</span> error:
     <span style="color:#66d9ef">print</span> (<span style="color:#e6db74">&#39;An error occurred: {}&#39;</span>)<span style="color:#f92672">.</span>format(error)

</code></pre></div><h3 id="step-5--execução">Step 5 – Execução</h3>
<p>Executando o arquivo <em>SendEmail.py,</em> abrirá uma página de seleção de usuário para autenticação.</p>
<p><img src="/images/google-auth/img1.png" alt="img1"></p>
<p>Como meu aplicativo não foi publicado, irá aparecer uma tela de verificação para aceitar o acesso as informações confidenciais da conta do google que desejamos autenticar.</p>
<p><img src="/images/google-auth/img2.png" alt="img2"></p>
<p><img src="/images/google-auth/img3.png" alt="img3"></p>
<p><img src="/images/google-auth/img4.png" alt="img4"></p>
<p>Após isso, a conexão será autenticada e o email será enviado ao destinatário.</p>
<p><img src="/images/google-auth/img5.png" alt="img5"></p>
<h2 id="código-completo">Código Completo</h2>
<p><a href="https://github.com/patrickpiccini/email-google-auth">Code - Email com Google Authentication</a></p>
<h2 id="conclusão">Conclusão</h2>
<p>Nesse artigo foi abordado uma técnica básica de autenticação de usuário do google para aplicações de terceiros. Com apenas as ferramentas disponibilizadas pela Google como o GmailAPI e bibliotecas python. No decorrer do desenvolvimento percebe-se a estrutura que foi utilizada é fácil para ser implementada em qualquer aplicação, basta adaptá-la a regra de negócio.</p>
<p>Existem outros métodos de autenticação de usuário, e diferentes formas de desenvolver o código para a autenticação, basta saber fazer a procura certa no google que encontrará.</p>
<p>Espero que tenha gostado dessa publicação, e que possa usá-la de alguma forma em seu dia a dia.</p>
<h3 id="referências">Referências</h3>
<p><a href="https://support.google.com/accounts/answer/6010255?p=less-secure-apps&amp;hl=pt-BR&amp;visit_id=637824317526826001-2187211079&amp;rd=1">Apps menos seguros e a Conta do Google</a>);</p>
<p><a href="https://developers.google.com/workspace/guides/create-project">Create a Google Cloud project</a>;</p>
<p><a href="https://developers.google.com/workspace/guides/create-credentials">Create access credentials</a>;</p>
<p><a href="https://developers.google.com/gmail/api/quickstart/python">Python Quickstart</a>;</p>
<p><a href="https://developers.google.com/gmail/api/guides/sending">Sending Email</a>.</p>
]]></content>
        </item>
        
    </channel>
</rss>
