<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Patrick Piccini</title>
        <link>https://patrickpiccini.github.io/posts/</link>
        <description>Recent content in Posts on Patrick Piccini</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
        <lastBuildDate>Tue, 12 Apr 2022 21:00:50 -0300</lastBuildDate>
        <atom:link href="https://patrickpiccini.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Email com Google Authentication</title>
            <link>https://patrickpiccini.github.io/posts/google-auth/</link>
            <pubDate>Tue, 12 Apr 2022 21:00:50 -0300</pubDate>
            
            <guid>https://patrickpiccini.github.io/posts/google-auth/</guid>
            <description>Table of Contents  Introdução  Pré-Requisitos Arquitetura   Step 1 – Criar credenciais Step 2 – Instalação de bibliotecas Step 3 – Criação de código de autenticação Step 4 – Criação do código de envio de e-mail Step 5 – Execução Código Completo Conclusão Referências   Introdução Nesse artigo irei abordar uma situação que recentemente a Google publicou referente ao login a conta Google, utilizando somente o usuário e senha para se conectar em apps de terceiros.</description>
            <content type="html"><![CDATA[<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#introdu%C3%A7%C3%A3o">Introdução</a>
<ul>
<li><a href="#pr%C3%A9-requisitos">Pré-Requisitos</a></li>
<li><a href="#a-aplica%C3%A7%C3%A3o-ter%C3%A1-a-seguinte-arquitetura">Arquitetura</a></li>
</ul>
</li>
<li><a href="#step-1--criar-credenciais">Step 1 – Criar credenciais</a></li>
<li><a href="#step-2--instala%C3%A7%C3%A3o-de-bibliotecas">Step 2 – Instalação de bibliotecas</a></li>
<li><a href="#step-3--cria%C3%A7%C3%A3o-de-c%C3%B3digo-de-autentica%C3%A7%C3%A3o">Step 3 – Criação de código de autenticação</a></li>
<li><a href="#step-4--cria%C3%A7%C3%A3o-do-c%C3%B3digo-de-envio-de-e-mail">Step 4 – Criação do código de envio de e-mail</a></li>
<li><a href="#step-5--execu%C3%A7%C3%A3o">Step 5 – Execução</a></li>
<li><a href="#c%C3%B3digo-completo">Código Completo</a></li>
<li><a href="#conclus%C3%A3o">Conclusão</a></li>
<li><a href="#refer%C3%AAncias">Referências</a></li>
</ul>
<hr>
<h2 id="introdução">Introdução</h2>
<p>Nesse artigo irei abordar uma situação que recentemente a Google publicou referente ao login a conta Google, utilizando somente o usuário e senha para se conectar em apps de terceiros. Segue um trecho da publicação:</p>
<p><em>- &ldquo;Para proteger sua conta, o Google vai deixar de oferecer suporte para o uso de apps ou dispositivos de terceiros que solicitam login na Conta do Google usando apenas seu nome de usuário e senha. Essa mudança será válida a partir de 30 de maio de 2022. Continue lendo para mais informações&rdquo; -</em> <a href="https://support.google.com/accounts/answer/6010255?p=less-secure-apps&amp;hl=pt-BR&amp;visit_id=637824317526826001-2187211079&amp;rd=1"><em>Apps menos seguros e a Conta do Google</em></a>.)</p>
<p>Tendo em vista que muitas aplicações do mercado utilizam esse método simples de login (usuário e senha), criei esse pequeno artigo explicando e desenvolvendo um método de autenticação a conta do google, através das APIs que o Google disponibiliza. Fazendo com que não haja a necessidade de liberar nas configurações da conta a opção de &ldquo;permitir apps menos seguros&rdquo;</p>
<p><strong>Obs</strong>: Os exemplos de códigos apresentados nesse artigo foram todos baseados nas documentações oficiais da Google, porém refartados, trazendo a clareza e a simplicidade no desenvolvimento da aplicação.</p>
<p>Para usar a Gmail API é necessário ter uma conta na Google Cloud Plataform, onde o cadastro pode ser feito <a href="https://console.cloud.google.com/freetrial/signup/tos?_ga=2.255782728.1788355950.1649683957-1725700722.1640005169&amp;_gac=1.61556062.1649692396.CjwKCAjwo8-SBhAlEiwAopc9W-9WErTEtw9O2DIPMgtBZHRMMb8iu52gwJgAgy-YPZidJP80yxSCahoCk94QAvD_BwE">AQUI</a>.</p>
<h3 id="pré-requisitos">Pré-Requisitos</h3>
<ul>
<li>
<p><a href="https://www.python.org/downloads/">Python</a> 2.6 ou superior;</p>
</li>
<li>
<p>Gerenciamento de pacotes <a href="https://pypi.org/project/pip/">PIP</a>;</p>
</li>
<li>
<p>Um projeto na Google Cloud Platform com GmailAPI ativada. Para criar um projeto e ativar uma API, consulte <a href="https://developers.google.com/workspace/guides/create-project">Criar um projeto e ativar a API</a>.</p>
</li>
</ul>
<h4 id="a-aplicação-terá-a-seguinte-arquitetura">A aplicação terá a seguinte arquitetura:</h4>
<pre><code>Aplication
    ↳ GoogleAuthenticator.py
    ↳ SendEmail.py
    ↳ credentials.json
</code></pre><h3 id="step-1--criar-credenciais">Step 1 – Criar credenciais</h3>
<p>Para comunicação da aplicação e a API, deve ser baixado as credenciais de acesso, obtida em <strong>≡</strong> <em>&gt; APIs &amp; Services &gt; Credentials,</em> depois em Click <em>Create credentials &gt; API key.</em></p>
<p>Para visualizar a documentação oficial acesse <a href="https://developers.google.com/workspace/guides/create-credentials">Create access credentials</a>.</p>
<h3 id="step-2--instalação-de-bibliotecas">Step 2 – Instalação de bibliotecas</h3>
<p>Instalar a biblioteca do Google Client.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib pybase64 email-to
</code></pre></div><h3 id="step-3--criação-de-código-de-autenticação">Step 3 – Criação de código de autenticação</h3>
<p>Criar um arquivo <em>GoogleAuthenticator.py</em>.</p>
<p>Ao abrir o arquivo, deve-se fazer uma sequência de importações das bibliotecas instaladas.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> os.path
<span style="color:#f92672">from</span> google.auth.transport.requests <span style="color:#f92672">import</span> Request
<span style="color:#f92672">from</span> google.oauth2.credentials <span style="color:#f92672">import</span> Credentials
<span style="color:#f92672">from</span> google_auth_oauthlib.flow <span style="color:#f92672">import</span> InstalledAppFlow
<span style="color:#f92672">from</span> googleapiclient.discovery <span style="color:#f92672">import</span> build
<span style="color:#f92672">from</span> googleapiclient.errors <span style="color:#f92672">import</span> HttpError
</code></pre></div><p>Abaixo das importações, deverá ser criado uma definition que será chamara para ocorrer a autenticação. Nela deve conter como parâmetros, <em>client_secret_file</em>(arquivo baixado contendo as credenciais de acesso), <em>api_service_name</em>(nome do serviço de API), <em>api version</em>(versão da API) e <em>scopes</em>(é responsável por solicitar o acesso as APIs do Google).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">authenticator</span>(client_secret_file, api_service_name, api_version, <span style="color:#f92672">*</span>scopes):
    CLIENT_SECRET_FILE <span style="color:#f92672">=</span> client_secret_file
    API_SERVICE_NAME <span style="color:#f92672">=</span> api_service_name
    API_VERSION <span style="color:#f92672">=</span> api_version
    SCOPES <span style="color:#f92672">=</span> [scope <span style="color:#66d9ef">for</span> scope <span style="color:#f92672">in</span> scopes[<span style="color:#ae81ff">0</span>]]

    credentials <span style="color:#f92672">=</span> None
</code></pre></div><p>A lógica será bem simples. Primeiro deve-se verificar se existe no diretório atual o arquivo <em>token.json,</em> que é responsável por conter em seu corpo, todas informações de um usuário já autenticado pela aplicação. Caso não exista, o código ira ler um arquivo chamado <em>credentials.json,</em> que dentro dele há as credenciais para a autenticação, como <em>client_id, client_secret</em> entre outras. Ambos os arquivos são atribuídos a variável <strong>&ldquo;credentials&rdquo;</strong> que será usado na chamada da API posteriormente.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(<span style="color:#e6db74">&#39;DocGoogle/token.json&#39;</span>):
        credentials <span style="color:#f92672">=</span> Credentials<span style="color:#f92672">.</span>from_authorized_user_file(
            <span style="color:#e6db74">&#39;DocGoogle/token.json&#39;</span>, SCOPES)
    
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> credentials <span style="color:#f92672">or</span> <span style="color:#f92672">not</span> credentials<span style="color:#f92672">.</span>valid:
        <span style="color:#66d9ef">if</span> credentials <span style="color:#f92672">and</span> credentials<span style="color:#f92672">.</span>expired <span style="color:#f92672">and</span> credentials<span style="color:#f92672">.</span>refresh_token:
            credentials<span style="color:#f92672">.</span>refresh(Request())
        <span style="color:#66d9ef">else</span>:
            flow <span style="color:#f92672">=</span> InstalledAppFlow<span style="color:#f92672">.</span>from_client_secrets_file(
                CLIENT_SECRET_FILE, SCOPES)
            credentials <span style="color:#f92672">=</span> flow<span style="color:#f92672">.</span>run_local_server(port<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>)

</code></pre></div><p>Após a autenticação, iremos salvar as credenciais do usuário autenticado no arquivo <em>token.json</em>, para que nas próximas vezes que a aplicação for usada, não necessite passar pelo processo de autenticação novamente.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">        <span style="color:#75715e"># Save the credentials for the next run</span>
        <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;DocGoogle/token.json&#39;</span>, <span style="color:#e6db74">&#39;w&#39;</span>) <span style="color:#66d9ef">as</span> token:
            token<span style="color:#f92672">.</span>write(credentials<span style="color:#f92672">.</span>to_json())
</code></pre></div><p>Agora, é necessário fazer uma chamada a API do google com os arquivos <em>token.json</em> ou <em>credential.json</em> que está na variável <strong>&ldquo;credentials&rdquo;</strong> como citado anteriormente. Com a função <em>build</em> será construído um Resource Object para interagir com a API, e assim, retorne a confirmação ou rejeição do acesso. Caso ocorra um erro na chamada a API, será disparado um except para o tratamento do erro.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">try</span>:
        <span style="color:#75715e"># Call the Gmail API</span>
        service <span style="color:#f92672">=</span> build(API_SERVICE_NAME, API_VERSION, credentials<span style="color:#f92672">=</span>credentials)
        <span style="color:#66d9ef">print</span>(API_SERVICE_NAME, <span style="color:#e6db74">&#39;service created successfully&#39;</span>)
        <span style="color:#66d9ef">return</span> service

    <span style="color:#66d9ef">except</span> HttpError <span style="color:#66d9ef">as</span> error:
        <span style="color:#75715e"># TO DO(developer) - Handle errors from gmail API.</span>
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;An error occurred: {}&#39;</span><span style="color:#f92672">.</span>format(error))
</code></pre></div><h3 id="step-4--criação-do-código-de-envio-de-e-mail">Step 4 – Criação do código de envio de e-mail</h3>
<p>Criar um arquivo <em>SendEmail.py</em>.</p>
<p>Ao abrir o arquivo, deve-se fazer uma sequência de importações das bibliotecas instaladas.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> base64
<span style="color:#f92672">from</span> quickstart <span style="color:#f92672">import</span> authenticator
<span style="color:#f92672">from</span> email.mime.text <span style="color:#f92672">import</span> MIMEText
<span style="color:#f92672">from</span> googleapiclient.errors <span style="color:#f92672">import</span> HttpError
</code></pre></div><p>Nota-se que foi importado a <em>def authenticator</em> do arquivo <em>GoogleAuthenticator.py .</em></p>
<p>É criado as variáveis <em>CLIENT_SECRET_FILE</em> que é atribuído o arquivo credential.json, <em>API_NAME</em> contendo o nome da aplicação, <em>API VERSION</em> com a versão, e <em>SCOPES</em> com a url para a solicitação a API. Tudo isso é passado como parâmetro para a <em>def euthenticator.</em></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">CLIENT_SECRET_FILE <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;DocGoogle/credentials.json&#39;</span>
API_NAME <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;gmail&#39;</span>
API_VERSION <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;v1&#39;</span>
SCOPES <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;https://mail.google.com/&#39;</span>]

service <span style="color:#f92672">=</span> authenticator(CLIENT_SECRET_FILE, API_NAME, API_VERSION, SCOPES)
</code></pre></div><p>Apenas com essa parte já se consegue criar uma autenticação apenas executando o arquivo <em>SendEmail.py,</em> porém como o objetivo é enviar um email com o usuario autenticado, continuarei mostrando o final do código.</p>
<p>Agora é necessário criar os campos para envio de email como, Titulo, Mensagem, Remetente e Destinatário.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">message <span style="color:#f92672">=</span> MIMEText(<span style="color:#e6db74">&#39;Python Mail test using API Google&#39;</span>)
message[<span style="color:#e6db74">&#39;from&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;your_email@gmail.com&#34;</span>
message[<span style="color:#e6db74">&#39;to&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;recipient@gmail.com&#39;</span>
message[<span style="color:#e6db74">&#39;subject&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;API Google&#39;</span>
raw_string <span style="color:#f92672">=</span> base64<span style="color:#f92672">.</span>urlsafe_b64encode(message<span style="color:#f92672">.</span>as_bytes())<span style="color:#f92672">.</span>decode()
</code></pre></div><p>Nesse momento é executado o envio do email passando o response da autenticação que está contida na variavel <em>service</em>, e os demais dados preenchidos. Todas essas informações foram codificadas em base64 para facilitar a transferência na Internet.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">try</span>:
    message <span style="color:#f92672">=</span> service<span style="color:#f92672">.</span>users()<span style="color:#f92672">.</span>messages()<span style="color:#f92672">.</span>send(userId<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;me&#39;</span>, body<span style="color:#f92672">=</span>{<span style="color:#e6db74">&#39;raw&#39;</span>: raw_string})<span style="color:#f92672">.</span>execute()
    <span style="color:#66d9ef">print</span> (<span style="color:#e6db74">&#39;Message Id: {}&#39;</span>)<span style="color:#f92672">.</span>format(message[<span style="color:#e6db74">&#39;id&#39;</span>])
<span style="color:#66d9ef">except</span> HttpError <span style="color:#66d9ef">as</span> error:
     <span style="color:#66d9ef">print</span> (<span style="color:#e6db74">&#39;An error occurred: {}&#39;</span>)<span style="color:#f92672">.</span>format(error)

</code></pre></div><h3 id="step-5--execução">Step 5 – Execução</h3>
<p>Executando o arquivo <em>SendEmail.py,</em> abrirá uma página de seleção de usuário para autenticação.</p>
<p><img src="/images/google-auth/img1.png" alt="img1"></p>
<p>Como meu aplicativo não foi publicado, irá aparecer uma tela de verificação para aceitar o acesso as informações confidenciais da conta do google que desejamos autenticar.</p>
<p><img src="/images/google-auth/img2.png" alt="img2"></p>
<p><img src="/images/google-auth/img3.png" alt="img3"></p>
<p><img src="/images/google-auth/img4.png" alt="img4"></p>
<p>Após isso a conexão será autenticada e o email será enviado ao destinatário.</p>
<p><img src="/images/google-auth/img5.png" alt="img5"></p>
<h2 id="código-completo">Código Completo</h2>
<p><a href="https://github.com/patrickpiccini/email-google-auth">Code - Email com Google Authentication</a></p>
<h2 id="conclusão">Conclusão</h2>
<p>Nesse artigo foi abordado uma técnica básica de autenticação de usuário do google para aplicações de terceiros. Com apenas as ferramentas disponibilizadas pela Google como o GmailAPI e bibliotecas python. No decorrer do desenvolvimento percebe-se a estrutura que foi utilizada é fácil para ser implementada em qualquer aplicação, basta adaptá-la a regra de negócio.</p>
<p>Existem outros métodos de autenticação de usuário, e diferentes formas de desenvolver o código para a autenticação, basta saber fazer a procura certa no google que encontrará.</p>
<p>Espero que tenha gostado dessa publicação, e que possa usá-la de alguma forma em seu dia a dia.</p>
<h3 id="referências">Referências</h3>
<p><a href="https://support.google.com/accounts/answer/6010255?p=less-secure-apps&amp;hl=pt-BR&amp;visit_id=637824317526826001-2187211079&amp;rd=1">Apps menos seguros e a Conta do Google</a>);</p>
<p><a href="https://developers.google.com/workspace/guides/create-project">Create a Google Cloud project</a>;</p>
<p><a href="https://developers.google.com/workspace/guides/create-credentials">Create access credentials</a>;</p>
<p><a href="https://developers.google.com/gmail/api/quickstart/python">Python Quickstart</a>;</p>
<p><a href="https://developers.google.com/gmail/api/guides/sending">Sending Email</a>.</p>
]]></content>
        </item>
        
        <item>
            <title>Email com Google Authentication – Refersh Token</title>
            <link>https://patrickpiccini.github.io/posts/google-auth-2/</link>
            <pubDate>Tue, 12 Apr 2022 21:00:50 -0300</pubDate>
            
            <guid>https://patrickpiccini.github.io/posts/google-auth-2/</guid>
            <description>Table of Contents  Table of Contents Introdução  Pré-requisitos   Step 1 – Instalação de bibliotecas Step 2 – Leitura do token.json Step 3 – Função refresh_token Step 4 – Função request_refresh_token Step 5 – Execução Código Completo Conclusão Referências   Introdução Nesse artigo irei continuar o assunto abordado da publicação Email com Google Authentication.
Visto que no primeiro estágio fizemos apenas uma autenticação, nos deparamos com a criação de um arquivo chamado token.</description>
            <content type="html"><![CDATA[<h2 id="table-of-contents">Table of Contents</h2>
<ul>
<li><a href="#table-of-contents">Table of Contents</a></li>
<li><a href="#introdu%C3%A7%C3%A3o">Introdução</a>
<ul>
<li><a href="#pr%C3%A9-requisitos">Pré-requisitos</a></li>
</ul>
</li>
<li><a href="#step-1--instala%C3%A7%C3%A3o-de-bibliotecas">Step 1 – Instalação de bibliotecas</a></li>
<li><a href="#step-2--leitura-do-tokenjson">Step 2 – Leitura do token.json</a></li>
<li><a href="#step-3--fun%C3%A7%C3%A3o-refresh%5C_token">Step 3 – Função refresh_token</a></li>
<li><a href="#step-4--fun%C3%A7%C3%A3o-request%5C_refresh%5C_token">Step 4 – Função request_refresh_token</a></li>
<li><a href="#step-5--execu%C3%A7%C3%A3o">Step 5 – Execução</a></li>
<li><a href="#c%C3%B3digo-completo">Código Completo</a></li>
<li><a href="#conclus%C3%A3o">Conclusão</a></li>
<li><a href="#refer%C3%AAncias">Referências</a></li>
</ul>
<hr>
<h2 id="introdução">Introdução</h2>
<p>Nesse artigo irei continuar o assunto abordado da publicação <a href="https://patrickpiccini.github.io/posts/google-auth/">Email com Google Authentication</a>.</p>
<p>Visto que no primeiro estágio fizemos apenas uma autenticação, nos deparamos com a criação de um arquivo chamado <em>token.json.</em> Nele, está contido uma sequência de informações sendo elas um token de autenticação, algumas informações do usuário autenticado, e uma data de expiração. Então, quando o usuário utilizar a aplicação que criamos, ele não utilizará mais o arquivo <em>credentias.json</em> e utilizará as informações contidas no <em>token.json.</em></p>
<p>As informações contidas do <em>token.json</em> será semelhantes dados abaixo.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
    <span style="color:#f92672">&#34;scopes&#34;</span>: [<span style="color:#e6db74">&#34;https://mail.google.com/&#34;</span>],
    <span style="color:#f92672">&#34;token_uri&#34;</span>: <span style="color:#e6db74">&#34;https://oauth2.googleapis.com/token&#34;</span>,
    <span style="color:#f92672">&#34;expiry&#34;</span>: <span style="color:#e6db74">&#34;2022-05-21T00:49:13.081000Z&#34;</span>,
    <span style="color:#f92672">&#34;token&#34;</span>: <span style="color:#e6db74">&#34;ya29.a0ARrdaM_Egt-trkKacPEcWEzCC9Lejs7DTo8VnPYRu&#34;</span>,
    <span style="color:#f92672">&#34;client_id&#34;</span>: <span style="color:#e6db74">&#34;725031891889-0533ns1pin5753k.apps.googleusercontent.com&#34;</span>,
    <span style="color:#f92672">&#34;client_secret&#34;</span>: <span style="color:#e6db74">&#34;GOCSPX-VlvdZsYe-0GXpkctKmK&#34;</span>,
    <span style="color:#f92672">&#34;refresh_token&#34;</span>: <span style="color:#e6db74">&#34;1//0h0y8XEIbzPbiCgYIARAAGBESNwF-C7yWA9JaFT_fACew&#34;</span>
}
</code></pre></div><p>Como podemos notar, esse token que é nos retornado há uma data de expiração. E caso o usuário fique enviando vários e-mails durante o dia, terá que passar pela tela de autenticação varias e varias vezes, sendo que a google disponibiliza apenas 4 horas de validade para cada token.</p>
<p>Visto isso utilizaremos uma informação contida no <em>token.json</em> chamda &quot;refresh_token&quot;. Com ela, conseguimos criar um novo token de acesso, sem que o usuário precise passar pela tela do browser.</p>
<h3 id="pré-requisitos">Pré-requisitos</h3>
<ul>
<li>
<p><a href="https://www.python.org/downloads/">Python</a> 2.6 ou superior;</p>
</li>
<li>
<p>Gerenciamento de pacotes <a href="https://pypi.org/project/pip/">PIP</a>;</p>
</li>
<li>
<p>Ter seguido criado o código baseado no primeiro artigo publicado (<a href="https://patrickpiccini.github.io/posts/google-auth/">Email com Google Authentication</a>).</p>
</li>
</ul>
<h3 id="step-1--instalação-de-bibliotecas">Step 1 – Instalação de bibliotecas</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pip install --upgrade jsonlib DateTime requests
</code></pre></div><h3 id="step-2--leitura-do-tokenjson">Step 2 – Leitura do token.json</h3>
<p>Para entender quando iremos criar um novo token de acesso, iremos nos basear pela data de expiração contida no arquivo. Será necessário apontarmos uma variável chamada <em>date_time_now</em>, que irá conter a data/hora atual. Após isso, iremos ler esse o <em>token.json,</em> e verificar se a data/hora atual é maior que a data de expiração. Caso seja iremos invocar uma função chamada de <em>refresh_token.</em></p>
<p>Todas as informações lidas do arquivo <em>token.json</em> será atribuída a variável <em>Info_json,</em> que passaremos como parâmetro para a nova função criada.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">if</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>exists(<span style="color:#e6db74">&#39;token.json&#39;</span>):
        <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;token.json&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>) <span style="color:#66d9ef">as</span> verify:
            info_json <span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>load(verify)

            <span style="color:#66d9ef">if</span> date_time_now <span style="color:#f92672">&gt;</span> info_json[<span style="color:#e6db74">&#39;expiry&#39;</span>]:
                refresh_token(info_json)

        creds <span style="color:#f92672">=</span> Credentials<span style="color:#f92672">.</span>from_authorized_user_file(
            <span style="color:#e6db74">&#39;token.json&#39;</span>, SCOPES)
</code></pre></div><h3 id="step-3--função-refresh_token">Step 3 – Função refresh_token</h3>
<p>A função refresh_token será responsável por requisitar a API do Google um novo token de acesso. Dentro dessa função será feita toda a manipulação de requisição de um novo token, adição de horas de expiração, e escrita das novas informações dentro do arquivo já existente <em>token.json.</em></p>
<p>Primeiramente precisaremos criar o corpo da requisição, seguindo alguns padrões exigidos.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">refresh_token</span>(info_json):
    <span style="color:#66d9ef">try</span>:
        refresh_token_obj <span style="color:#f92672">=</span> {
            <span style="color:#e6db74">&#34;client_id&#34;</span>: str(info_json[<span style="color:#e6db74">&#34;client_id&#34;</span>])<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;u&#39;&#34;</span>, <span style="color:#e6db74">&#34;&#39;&#34;</span>),
            <span style="color:#e6db74">&#34;client_secret&#34;</span>: str(info_json[<span style="color:#e6db74">&#34;client_secret&#34;</span>])<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;u&#39;&#34;</span>, <span style="color:#e6db74">&#34;&#39;&#34;</span>),
            <span style="color:#e6db74">&#34;refresh_token&#34;</span>: str(info_json[<span style="color:#e6db74">&#34;refresh_token&#34;</span>])<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;u&#39;&#34;</span>, <span style="color:#e6db74">&#34;&#39;&#34;</span>), 
            <span style="color:#e6db74">&#34;grant_type&#34;</span>: <span style="color:#e6db74">&#34;refresh_token&#34;</span>
        }
</code></pre></div><p>Logo abaixo, vamos reservar uma variável chamada <em>refresh_credentials</em> que iremos passar outra função que criaremos posteriormente nomeada de <em>request_refresh_token</em> passando como parâmetro as informações que criamos na variável <em>refresh_token_obj.</em></p>
<p>Após isso, a função <em>request_refresh_token</em> retornará um, response. Iremos carregar as informações em formato json na variável <em>refresh_toke_obj.</em> Separaremos mais duas informações, uma variável contendo a soma do horário atual + 4 horas, visto que o token é valido pro quatro horas, e também o token de acesso retornado da requisição <em>refresh_credentials.</em></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">   refresh_credentials <span style="color:#f92672">=</span> request_refresh_token(refresh_token_obj)

        refresh_toke_obj <span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>loads(refresh_credentials<span style="color:#f92672">.</span>text)
        expiry_time_refresh_token <span style="color:#f92672">=</span> datetime<span style="color:#f92672">.</span>now() <span style="color:#f92672">+</span> timedelta(hours<span style="color:#f92672">=</span><span style="color:#ae81ff">4</span>)
        access_token <span style="color:#f92672">=</span> refresh_toke_obj[<span style="color:#e6db74">&#39;access_token&#39;</span>]
</code></pre></div><p>Por fim, uma exception da função caso de ocorra alguma falha em alguma dessas informações que manipulamos.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">except</span> <span style="color:#a6e22e">Exception</span> <span style="color:#66d9ef">as</span> error:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;Erro criacao de refresh_token.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">{}&#39;</span><span style="color:#f92672">.</span>format(str(error)))
</code></pre></div><h3 id="step-4--função-request_refresh_token">Step 4 – Função request_refresh_token</h3>
<p>O que faremos agora será a função que foi citada anteriormente, <em>a request_refresh_token.</em> Nela iremos apenas fazer uma requisição post para a url &quot;<a href="https://oauth2.googleapis.com/token">https://oauth2.googleapis.com/token</a>&quot;, passando as informações que montamos na variável <em>refresh_token_obj</em> anteriormente.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">request_refresh_token</span>(refresh_token_obj):
    <span style="color:#66d9ef">try</span>:
        <span style="color:#66d9ef">return</span> requests<span style="color:#f92672">.</span>post(<span style="color:#e6db74">&#39;https://oauth2.googleapis.com/token&#39;</span>, data<span style="color:#f92672">=</span>refresh_token_obj)
</code></pre></div><p>E finalizaremos com uma sequência de possíveis exceções que podem ocorrem na requisição.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">except</span> requests<span style="color:#f92672">.</span>exceptions<span style="color:#f92672">.</span>Timeout <span style="color:#66d9ef">as</span> e:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;Request Timeout exception:</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">{}&#39;</span><span style="color:#f92672">.</span>format(v))
        <span style="color:#66d9ef">return</span>
    <span style="color:#66d9ef">except</span> requests<span style="color:#f92672">.</span>exceptions<span style="color:#f92672">.</span>TooManyRedirects <span style="color:#66d9ef">as</span> e:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;Request too many redirects exception:</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">{}&#39;</span><span style="color:#f92672">.</span>format(str(e)))
        <span style="color:#66d9ef">return</span>
    <span style="color:#66d9ef">except</span> requests<span style="color:#f92672">.</span>exceptions<span style="color:#f92672">.</span>RequestException <span style="color:#66d9ef">as</span> e:
        <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#39;Request exception:</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">{}&#39;</span><span style="color:#f92672">.</span>format(str(e)))
        <span style="color:#66d9ef">return</span>
</code></pre></div><h3 id="step-5--execução">Step 5 – Execução</h3>
<p>O funcionamento será o mesmo mostrado no artigo <a href="https://patrickpiccini.github.io/posts/google-auth/">Email com Google Authentication</a>.
Executando o arquivo <em>SendEmail.py,</em> abrirá uma página de seleção de usuário para autenticação.</p>
<p><img src="/images/google-auth/img1.png" alt="img1"></p>
<p>Como meu aplicativo não foi publicado, irá aparecer uma tela de verificação para aceitar o acesso as informações confidenciais da conta do google que desejamos autenticar.</p>
<p><img src="/images/google-auth/img2.png" alt="img2"></p>
<p><img src="/images/google-auth/img3.png" alt="img3"></p>
<p><img src="/images/google-auth/img4.png" alt="img4"></p>
<p>Após isso a conexão será autenticada e o email será enviado ao destinatário.</p>
<p><img src="/images/google-auth/img5.png" alt="img5"></p>
<p>Após o usuário passar por esse estágio de autenticação, não precisará mais refazer todos esses passos visto que a atualização que fizemos no código já irá gerar novos tokens automaticamente.</p>
<h3 id="código-completo">Código Completo</h3>
<p><a href="https://github.com/patrickpiccini/email-google-auth-2">Code - Email com Google Authentication – Refresh Token</a></p>
<h2 id="conclusão">Conclusão</h2>
<p>Nesse artigo abordamos a segunda etapa para aplicação de autenticação utilizando Gmail API. Foi mostrado como verificar a validade do token de acesso através da data de expiração. Caso esse token não seja mais valido, criamos duas novas funções chamadas de <em>refresh_token</em> e <em>request_refresh_token</em>, responsáveis por requisitar um novo token de acesso, e inseri-lo no arquivo <em>token.json</em> com uma nova data de expiração. Assim o usuário não precisará ficar passando pelas telas de Login com o Google diversas vezes no dia. Tudo isso a nova atualização no código, fará em back-end para o usuário.</p>
<p>Reforçando o que citei no artigo anterior: Existem outros métodos de autenticação de usuário, e diferentes formas de desenvolver o código para a autenticação, basta saber fazer a procura certa no google que encontrará.</p>
<p>Espero que tenha gostado dessa publicação, e que possa usá-la de alguma forma em seu dia a dia.</p>
<h3 id="referências">Referências</h3>
<p><a href="https://support.google.com/accounts/answer/6010255?p=less-secure-apps&amp;hl=pt-BR&amp;visit_id=637824317526826001-2187211079&amp;rd=1">Apps menos seguros e a Conta do Google</a>);</p>
<p><a href="https://developers.google.com/workspace/guides/create-project">Create a Google Cloud project</a>;</p>
<p><a href="https://developers.google.com/workspace/guides/create-credentials">Create access credentials</a>;</p>
<p><a href="https://developers.google.com/gmail/api/quickstart/python">Python Quickstart</a>;</p>
<p><a href="https://developers.google.com/gmail/api/guides/sending">Sending Email</a>.</p>
]]></content>
        </item>
        
    </channel>
</rss>
