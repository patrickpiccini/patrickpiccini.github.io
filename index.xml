<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Patrick Piccini</title>
    <link>https://patrickpiccini.github.io/</link>
    <description>Recent content on Patrick Piccini</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Tue, 12 Apr 2022 21:00:50 -0300</lastBuildDate>
    
	<atom:link href="https://patrickpiccini.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Microservice Project – Step 5</title>
      <link>https://patrickpiccini.github.io/posts/microservice_project_step05/</link>
      <pubDate>Thu, 30 Jun 2022 18:01:55 -0300</pubDate>
      
      <guid>https://patrickpiccini.github.io/posts/microservice_project_step05/</guid>
      <description>Table of Contents  Postgres  Create_tables   Rabbit MQ Redis Resumo   Como visto no Step4, foi iniciado os primeiros passos para interagir com a API gateway, e foi criado as configurações para a inicialização do container, quando for subir para a OCI.
Nesse passo, mostrarei como configurar a conexão com os servidores do Rabbit, Redis e Postgres, e como planejei a arquitetura de pastas e módulos para ter uma aplicação organizada.</description>
    </item>
    
    <item>
      <title>Microservice Project – Step 4</title>
      <link>https://patrickpiccini.github.io/posts/microservice_project_step04/</link>
      <pubDate>Thu, 23 Jun 2022 18:01:54 -0300</pubDate>
      
      <guid>https://patrickpiccini.github.io/posts/microservice_project_step04/</guid>
      <description>Table of Contents  Requirements Criação API Dockerfile Docker-Compose Resumo   Nesse passo, iremos começar a criar o rosto da API. Irei explicar como estruturei as rotas para a conexão utilizando Flask, e como funciona o disparo das funções das rotas. Criaremos a própria imagem para futuramente rodar a aplicação utilizando Dockerfile, juntamente a um Docker-Compose para subir as instancias Docker. Por fim, farei um teste de conexão localmente as rotas que criei.</description>
    </item>
    
    <item>
      <title>Predição de Insuficiência Cardíaca</title>
      <link>https://patrickpiccini.github.io/posts/predicao_de_insuficiencia_cardiaca/</link>
      <pubDate>Tue, 21 Jun 2022 20:00:52 -0100</pubDate>
      
      <guid>https://patrickpiccini.github.io/posts/predicao_de_insuficiencia_cardiaca/</guid>
      <description>Table of Contents  DataSet Compreendendo o problema  Informações de atributo   Configuração Inicial Exploração Limpeza Discretização Visualização Quais atributos tem relação? Distribuição de algumas colunas do DataSet Calculo de Insuficiência Cardíaca Inicio de Treinamento de Modelos  Separação de Dados   Desision Tree  Medidas de seleção de atributo   Randon Fores Logistic Regression GaussianNB  Calculo do algoritmo   Matriz Confusão Cross-Validation Curva ROC Insigths   Projeto GitHub heart-failure-prediction</description>
    </item>
    
    <item>
      <title>Microservice Project – Step 3</title>
      <link>https://patrickpiccini.github.io/posts/microservice_project_step03/</link>
      <pubDate>Thu, 16 Jun 2022 10:01:53 -0300</pubDate>
      
      <guid>https://patrickpiccini.github.io/posts/microservice_project_step03/</guid>
      <description>Table of Contents  Criação do Docker-Compose-Services Teste na OCI Resumo   Nesse próximo passo, parto do pressuposto que meu ambiente já está configurado e com todas as instalações feitas, assim, posso começar a criar as primeiras linhas de código.
Devemos começar criando uma pasta chamada MS-Application. Essa pasta será onde iremos criar todos os microsserviços, configuração de containers de serviço, e mais alguns detalhes, que serão mostrados no decorrer das publicações.</description>
    </item>
    
    <item>
      <title>Microservice Project – Step 2</title>
      <link>https://patrickpiccini.github.io/posts/microservice_project_step02/</link>
      <pubDate>Thu, 09 Jun 2022 10:01:52 -0300</pubDate>
      
      <guid>https://patrickpiccini.github.io/posts/microservice_project_step02/</guid>
      <description>Table of Contents  Entrar na Instancia via shell Instalar Docker Instalar Docker-Compose Instalar Git Resumo   Após Configurar a infraestrutura no Oracle Cloud, necessitamos fazer instalações de alguns programas que iremos utilizar. O Docker para a criação dos nossos containers de servidores e microsserviços, o Docker-Compose para facilitar a criação dos containers, e o Git, para versionamento de código.
Como desenvolvi os códigos fora de nossa VM da OCI, o Git é o fator principal para que todos os códigos sejam disponíveis facilmente.</description>
    </item>
    
    <item>
      <title>Microservice Project – Step 1</title>
      <link>https://patrickpiccini.github.io/posts/microservice_project_step01/</link>
      <pubDate>Thu, 02 Jun 2022 13:00:52 -0200</pubDate>
      
      <guid>https://patrickpiccini.github.io/posts/microservice_project_step01/</guid>
      <description>Table of Contents  Criação do Compartment Criação de Usuário Criação de Grupo Criação de Policies Criação de SSH-KEY Criação de Instancia VM Resumo   Nesse primeiro passo, iremos configurar um ambiente OCI para rodar toda a aplicação em cloud.
Criação do Compartment Iremos criar um conpartiment.
No ícone de hamburguer na página inicial do OCI, iremos em &amp;gt; Identity &amp;gt; Security &amp;gt; compartments, e criaremos um compartimento com o nome Developmet.</description>
    </item>
    
    <item>
      <title>Um projeto completo de Microservices</title>
      <link>https://patrickpiccini.github.io/posts/microservice_project_introduction/</link>
      <pubDate>Thu, 02 Jun 2022 13:00:52 -0100</pubDate>
      
      <guid>https://patrickpiccini.github.io/posts/microservice_project_introduction/</guid>
      <description>Table of Contents  Entendimento do problema Objetivo Arquitetura do Projeto Completo   Há um tempo eu desejava entender melhor como os tão famosos microsserviços conseguem trabalhar individualmente, porém todos conectados. Foi então que decidi projetar uma pequena aplicação onde iria me aprofundar nesses conhecimentos, e que também me desafiaria a criar uma aplicação completa seguindo o Software Development Life Circle. Partindo desde a criação da ideia, até o deploy.</description>
    </item>
    
    <item>
      <title>Data Analytcs - Spotify Wrapped</title>
      <link>https://patrickpiccini.github.io/posts/spotify_wrapped/</link>
      <pubDate>Thu, 26 May 2022 09:00:50 -0300</pubDate>
      
      <guid>https://patrickpiccini.github.io/posts/spotify_wrapped/</guid>
      <description>Table of Contents  Projeto Spotify Wrapped  O que é spotify wrapped DataSet   Exploratory Data Analysis EDA Extração Exploração Limpeza de Dados Agregação  10 artistas mais escutados. 10 musicas mais escutadas.   Visualização Storytelling   Projeto Spotify Wrapped Recentemente venho estudando a área de Data Analytics, Data Science e as várias derivações de inteligência artificial, e descobri um grande interesse por esse mundo. Foi então que decidi iniciar um pequeno projeto onde eu possa praticar meus conhecimentos adquiridos, e também mostrar como o nosso cotidiano está repleto de tecnologia aplicada sobre inteligência artificial.</description>
    </item>
    
    <item>
      <title>Email com Google Authentication – Refresh Token</title>
      <link>https://patrickpiccini.github.io/posts/google_auth-refresh-token/</link>
      <pubDate>Sun, 22 May 2022 18:00:00 -0300</pubDate>
      
      <guid>https://patrickpiccini.github.io/posts/google_auth-refresh-token/</guid>
      <description>Table of Contents  Introdução  Pré-requisitos   Step 1 – Instalação de bibliotecas Step 2 – Leitura do token.json Step 3 – Função refresh_token Step 4 – Função request_refresh_token Step 5 – Execução Código Completo Conclusão Referências   Introdução Nesse artigo irei continuar o assunto abordado na publicação Email com Google Authentication.
Visto que no primeiro estágio fizemos apenas uma autenticação, nos deparamos com a criação de um arquivo chamado token.</description>
    </item>
    
    <item>
      <title>Codes</title>
      <link>https://patrickpiccini.github.io/codes/</link>
      <pubDate>Tue, 12 Apr 2022 21:00:50 -0300</pubDate>
      
      <guid>https://patrickpiccini.github.io/codes/</guid>
      <description>2022  Predição de Insuficiência Cardiaca    Um projeto completo de Microservices    Data Analytcs - Spotify Wrapped    Code - Email com Google Authentication – Refresh Token    Code - Email com Google Authentication  </description>
    </item>
    
  </channel>
</rss>