<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Patrick Piccini</title>
    <link>https://patrickpiccini.github.io/</link>
    <description>Recent content on Patrick Piccini</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Tue, 12 Apr 2022 21:00:50 -0300</lastBuildDate>
    
	<atom:link href="https://patrickpiccini.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Microservice Project – Step 1</title>
      <link>https://patrickpiccini.github.io/posts/microservice_project_step1/</link>
      <pubDate>Thu, 02 Jun 2022 13:00:52 -0200</pubDate>
      
      <guid>https://patrickpiccini.github.io/posts/microservice_project_step1/</guid>
      <description>Table of Contents  Criação do Compartment Criação de Usuário Criação de Grupo Criação de Policies Criação de SSH-KEY Criação de Instancia VM Resumo   Nesse primeiro passo, iremos configurar um ambiente OCI para rodar toda a aplicação em cloud.
Criação do Compartment Iremos criar um conpartiment.
No ícone de hamburguer na página inicial do OCI, iremos em &amp;gt; Identity &amp;gt; Security &amp;gt; compartments, e criaremos um compartimento com o nome Developmet.</description>
    </item>
    
    <item>
      <title>Um projeto completo de Microservices</title>
      <link>https://patrickpiccini.github.io/posts/microservice_project_intro/</link>
      <pubDate>Thu, 02 Jun 2022 13:00:52 -0100</pubDate>
      
      <guid>https://patrickpiccini.github.io/posts/microservice_project_intro/</guid>
      <description>Table of Contents  Há um tempo eu desejava entender melhor como os tão famosos microsserviços conseguem trabalhar individualmente, porém todos conectados. Foi então que decidi projetar uma pequena aplicação onde iria me aprofundar nesses conhecimentos, e que também me desafiaria a criar uma aplicação completa seguindo o Software Development Life Circle. Partindo desde a criação da ideia, até o deploy.
Isso pode ser representado conforme o seguinte fluxo:
Então, meu nome é Patrick Berlatto Piccini, e esse é meu projeto completo de microservices.</description>
    </item>
    
    <item>
      <title>Data Analytcs - Spotify Wrapped</title>
      <link>https://patrickpiccini.github.io/posts/spotify_wrapped/</link>
      <pubDate>Thu, 26 May 2022 09:00:50 -0300</pubDate>
      
      <guid>https://patrickpiccini.github.io/posts/spotify_wrapped/</guid>
      <description>Table of Contents  Projeto Spotify Wrapped  O que é spotify wrapped DataSet   Exploratory Data Analysis EDA Extração Exploração Limpeza de Dados Agregação  10 artistas mais escutados. 10 musicas mais escutadas.   Visualização Storytelling   Projeto Spotify Wrapped Recentemente venho estudando a área de Data Analytics, Data Science e as várias derivações de inteligência artificial, e descobri um grande interesse por esse mundo. Foi então que decidi iniciar um pequeno projeto onde eu possa praticar meus conhecimentos adquiridos, e também mostrar como o nosso cotidiano está repleto de tecnologia aplicada sobre inteligência artificial.</description>
    </item>
    
    <item>
      <title>Email com Google Authentication – Refresh Token</title>
      <link>https://patrickpiccini.github.io/posts/google_auth-refresh-token/</link>
      <pubDate>Sun, 22 May 2022 18:00:00 -0300</pubDate>
      
      <guid>https://patrickpiccini.github.io/posts/google_auth-refresh-token/</guid>
      <description>Table of Contents  Introdução  Pré-requisitos   Step 1 – Instalação de bibliotecas Step 2 – Leitura do token.json Step 3 – Função refresh_token Step 4 – Função request_refresh_token Step 5 – Execução Código Completo Conclusão Referências   Introdução Nesse artigo irei continuar o assunto abordado na publicação Email com Google Authentication.
Visto que no primeiro estágio fizemos apenas uma autenticação, nos deparamos com a criação de um arquivo chamado token.</description>
    </item>
    
    <item>
      <title>Codes</title>
      <link>https://patrickpiccini.github.io/codes/</link>
      <pubDate>Tue, 12 Apr 2022 21:00:50 -0300</pubDate>
      
      <guid>https://patrickpiccini.github.io/codes/</guid>
      <description>2022  Um projeto completo de Microservices    Data Analytcs - Spotify Wrapped    Code - Email com Google Authentication – Refresh Token    Code - Email com Google Authentication  </description>
    </item>
    
    <item>
      <title>Email com Google Authentication</title>
      <link>https://patrickpiccini.github.io/posts/google-auth/</link>
      <pubDate>Tue, 12 Apr 2022 21:00:50 -0300</pubDate>
      
      <guid>https://patrickpiccini.github.io/posts/google-auth/</guid>
      <description>Table of Contents  Introdução  Pré-Requisitos Arquitetura   Step 1 – Criar credenciais Step 2 – Instalação de bibliotecas Step 3 – Criação de código de autenticação Step 4 – Criação do código de envio de e-mail Step 5 – Execução Código Completo Conclusão Referências   Introdução Nesse artigo irei abordar uma situação que recentemente a Google publicou referente ao login a conta Google, utilizando somente o usuário e senha para se conectar em apps de terceiros.</description>
    </item>
    
    <item>
      <title>Developing...</title>
      <link>https://patrickpiccini.github.io/about/</link>
      <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://patrickpiccini.github.io/about/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>